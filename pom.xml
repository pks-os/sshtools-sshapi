<!-- Copyright (c) 2020 The JavaSSH Project Permission is hereby granted, 
	free of charge, to any person obtaining a copy of this software and associated 
	documentation files (the "Software"), to deal in the Software without restriction, 
	including without limitation the rights to use, copy, modify, merge, publish, 
	distribute, sublicense, and/or sell copies of the Software, and to permit 
	persons to whom the Software is furnished to do so, subject to the following 
	conditions: The above copyright notice and this permission notice shall be 
	included in all copies or substantial portions of the Software. THE SOFTWARE 
	IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
	BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS 
	BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH 
	THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<properties>
		<sourceRelease>1.8</sourceRelease>
		<targetRelease>1.8</targetRelease>
		<reportTargetRelease>1.7</reportTargetRelease>
		<!-- Distribution properties. -->
		<sfUser>SOMEUSER</sfUser>
		<releasesRepositoryDeploymentLocation>file:///${basedir}/../sshapi-mvn/releases</releasesRepositoryDeploymentLocation>
		<snapshotsRepositoryDeploymentLocation>file:///${basedir}/../sshapi-mvn/snapshots</snapshotsRepositoryDeploymentLocation>
		<scmWebRoot>http://sourceforge.net/p/sshapi/svn/LATEST/tree/trunk</scmWebRoot>
		<siteDeploymentLocation>scp://localhost/var/www/maven-sites/sshapi/</siteDeploymentLocation>
		<assemblyDeploymentLocation>scp://localhost/var/www/maven-assembly/sshapi</assemblyDeploymentLocation>
		<assemblyDownloadLocation>http://localhost/maven-assembly/files/${project.version}</assemblyDownloadLocation>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- To compile Maverick Legacy bridge (New public 1.6+) -->
		<maverickVersion>1.7.36</maverickVersion>
		<!-- To compile Maverick Obsolete bridge (stable 1.5.19 version) -->
		<maverickHome>${user.home}/maverick</maverickHome>
		<maverickStableVersion>1.5.19</maverickStableVersion>
		<maverickNGVersion>2.0.4</maverickNGVersion>
		<maverickSynergyVersion>3.0.0-RC5</maverickSynergyVersion>
		<common.version>2.0.4</common.version>

		<!-- HACK! This is so that child JPMS modules can find the com.sshtools.sshpapi.core 
			module and any provider dependencies when an MRJAR is in use. See the use 
			of Maven plugins in this POM that collect the classpath into a property to 
			support this, and the child modules that use the variable to adjust the module 
			path for MRJAR compilation -->
		<mrJarClasspathFile>${project.basedir}/target/classpath</mrJarClasspathFile>
	</properties>
	<groupId>com.sshtools</groupId>
	<artifactId>sshapi-group</artifactId>
	<packaging>pom</packaging>
	<version>2.0.0-SNAPSHOT</version>
	<name>SSHAPI Group</name>
	<description>Parent project for all SSHAPI modules</description>
	<url>${scmWebRoot}/${project.artifactId}/</url>
	<licenses>
		<license>
			<name>MIT</name>
			<url>LICENSE.txt</url>
			<comments>a permissive license, meaning that it permits reuse within proprietary software on the condition that the license is distributed with that software. The license is also GPL-compatible, meaning that the GPL permits combination and redistribution with software that uses the MIT License.</comments>
		</license>
	</licenses>
	<distributionManagement>
		<snapshotRepository>
			<id>ossrh-sshtools</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh-sshtools</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
		<site>
			<id>sshapi-site</id>
			<url>${siteDeploymentLocation}/${project.artifactId}/</url>
		</site>
	</distributionManagement>
	<developers>
		<developer>
			<id>brett</id>
			<name>Brett Smith</name>
			<email>brett@nervepoint.com</email>
		</developer>
	</developers>
	<scm>
		<connection>scm:svn:svn://svn.code.sf.net/p/sshapi/svn/trunk/${project.artifactId}</connection>
		<developerConnection>scm:svn:svn+ssh://svn.code.sf.net/p/sshapi/svn/trunk/${project.artifactId}</developerConnection>
		<url>https://sourceforge.net/p/sshapi/svn/</url>
	</scm>
	<build>
		<extensions>
			<!-- Let's see if SSHAPI can now use itself to publish -->
			<extension>
				<groupId>com.sshtools</groupId>
				<artifactId>wagon-sshapi</artifactId>
				<version>1.1.0</version>
			</extension>
			<extension>
				<groupId>com.sshtools</groupId>
				<artifactId>sshapi-maverick</artifactId>
				<version>1.1.0</version>
			</extension>
		</extensions>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.2.0</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<excludePackageNames>**.impl.*</excludePackageNames>
						<!-- https://bugs.openjdk.java.net/browse/JDK-8212233 -->
						<detectJavaApiLink>false</detectJavaApiLink>
						<source>8</source>
						<doclint>none</doclint>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>1.6</version>
				</plugin>
				<plugin>
					<groupId>com.mycila</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>3.0</version>
				</plugin>
				<plugin>
					<groupId>org.sonatype.plugins</groupId>
					<artifactId>nexus-staging-maven-plugin</artifactId>
					<version>1.6.8</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.8.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.3</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-ant-plugin</artifactId>
					<version>2.3</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>

			<plugin>
				<!-- HACK! This is so that child JPMS modules can find the com.sshtools.sshpapi.core 
					module and any provider dependencies when an MRJAR is in use. See child modules 
					that use the variable to adjust the module path for MRJAR compilation -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<id>build-classpath</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>build-classpath</goal>
						</goals>
						<configuration>
							<outputFile>${mrJarClasspathFile}</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- HACK! This is so that child JPMS modules can find the com.sshtools.sshpapi.core 
					module and any provider dependencies when an MRJAR is in use. See child modules 
					that use the variable to adjust the module path for MRJAR compilation -->
				<groupId>org.codehaus.gmaven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>
								def file = new
								File(project.properties.mrJarClasspathFile)
								project.properties.mrJarClasspath = file.getText()
							</source>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>com.sshtools</groupId>
						<artifactId>wagon-sshapi</artifactId>
						<!-- One version behind -->
						<version>1.1.0</version>
					</dependency>
					<dependency>
						<groupId>com.sshtools</groupId>
						<artifactId>sshapi-maverick</artifactId>
						<!-- One version behind -->
						<version>1.1.0</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh-sshtools</serverId>
					<nexusUrl>https://oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<goals>
							<goal>sign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<autoVersionSubmodules>true</autoVersionSubmodules>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>3.5.1</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
						<Bundle-SymbolicName>${project.groupId}.${project.artifactId}
						</Bundle-SymbolicName>
					</instructions>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${sourceRelease}</source>
					<target>${targetRelease}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
						</manifest>
						<manifestEntries>
							<API-Version>${project.version}</API-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>aggregate-jar</goal>
						</goals>
					</execution>
					<execution>
						<id>javadoc-jar</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<failOnError>false</failOnError>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<header>LICENSE.txt</header>
					<properties>
						<owner>SSHTOOLS Limited</owner>
						<email>support@sshtools.com</email>
					</properties>
					<excludes>
						<exclude>**/README</exclude>
						<exclude>src/test/resources/**</exclude>
						<exclude>src/main/resources/**</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
							<goal>format</goal>
							<goal>remove</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>3.0.0</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>index</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<!-- <report>project-team</report> -->
							<!-- <report>project-summary</report> -->
							<!-- <report>issue-tracking</report> -->
							<!-- <report>license</report> -->
							<report>scm</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M3</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clover-plugin</artifactId>
				<version>2.4</version>
			</plugin>
			<!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>cobertura-maven-plugin</artifactId> 
				<version>2.7</version> </plugin> -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.12.0</version>
				<configuration>
					<targetJdk>${reportTargetRelease}</targetJdk>
					<rulesets>
						<ruleset>/rulesets/java/basic.xml</ruleset>
						<ruleset>/rulesets/java/controversial.xml</ruleset>
					</rulesets>
					<format>xml</format>
					<linkXref>true</linkXref>
					<sourceEncoding>utf-8</sourceEncoding>
					<minimumTokens>100</minimumTokens>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</reporting>
	<repositories>
		<repository>
			<id>oss-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots />
		</repository>
	</repositories>
	<modules>
		<module>sshapi-core</module>
		<module>sshapi-examples</module>
		<module>sshapi-maverick-synergy</module>
		<module>sshapi-maverick</module>
		<module>sshapi-maverick-16</module>
		<module>sshapi-ganymed</module>
		<module>sshapi-jsch</module>
		<module>sshapi-libssh</module>
		<module>sshapi-j2ssh</module>
		<module>sshapi-openssh</module>
		<module>sshapi-trilead</module>
		<module>sshapi-sshj</module>
		<module>sshapi-commons-vfs</module>
		<module>sshapi-cli</module>
		<module>sshapi-performance-tests</module>
		<module>sshapi-site</module>
		<module>wagon-sshapi</module>
		<module>sshapi-tests-core</module>
		<module>sshapi-tests-server-maverick-synergy</module>
		<module>sshapi-tests-server-maverick-sshd</module>
		<module>sshapi-tests-server-openssh</module>
		<module>sshapi-tests-server-openssh-local</module>
		<module>sshapi-tests-server-openssh-remote</module>
		<module>sshapi-tests</module>
		<!-- <module>../sshapi-site</module> -->
	</modules>
	<profiles>

		<profile>
			<activation>
				<jdk>[9,)</jdk>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-javadoc-plugin</artifactId>
							<configuration>
								<!-- TODO: Why is this STILL broken! -->
								<javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
								<excludePackageNames>**.impl.*</excludePackageNames>
								<!-- https://bugs.openjdk.java.net/browse/JDK-8212233 -->
								<detectJavaApiLink>false</detectJavaApiLink>
								<source>8</source>
								<doclint>none</doclint>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>release-sign-artifacts</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
