~~
~~ Copyright (c) 2020 The JavaSSH Project
~~
~~  Permission is hereby granted, free of charge, to any person obtaining a copy
~~  of this software and associated documentation files (the "Software"), to deal
~~  in the Software without restriction, including without limitation the rights
~~  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
~~  copies of the Software, and to permit persons to whom the Software is
~~  furnished to do so, subject to the following conditions:
~~
~~  The above copyright notice and this permission notice shall be included in
~~  all copies or substantial portions of the Software.
~~
~~  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
~~  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
~~  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
~~  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
~~  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
~~  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
~~  THE SOFTWARE.
~~

 -----
 Introduction
 -----
 JavaSSH Team
 ------
 2009-12-07
 ------

SSHAPI

 SSHAPI serves as a simple facade or abstraction for various SSH
 client implementations (or providers as they are known in this API) such
 as Maverick SSH or JSch.

 It allows the user to plug in the required provider at deployment
 time depending on their needs, for example because of specific
 performance, feature or licensing requirements.

 SSHAPI will search the CLASSPATH for providers, and choose the 
 best one for the requested configuration (or just a default). The 
 behavior of the discovery can be configured using system properties.

 Specific providers can also be chosen manually at connection time. This
 makes it possible to use different providers depending on configuration
 of the connection, yet still use a single API for your application.

* Main Features

  * Supports password authentication 

  * Remote shell
  
  * Remote command execution
  
  * X11 forwarding
  
* Coming soon

  * Other authentication methods

  * File transfer 

  * ..
