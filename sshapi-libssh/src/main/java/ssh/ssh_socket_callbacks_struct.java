package ssh;
import java.util.Arrays;
import java.util.List;

import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import ssh.SshLibrary.ssh_callback_data;
import ssh.SshLibrary.ssh_callback_int;
import ssh.SshLibrary.ssh_callback_int_int;
/**
 * These are the callbacks exported by the socket structure<br>
 * They are called by the socket module when a socket event appears<br>
 * <i>native declaration : /usr/include/libssh/callbacks.h:146</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ssh_socket_callbacks_struct extends Structure<ssh_socket_callbacks_struct, ssh_socket_callbacks_struct.ByValue, ssh_socket_callbacks_struct.ByReference > {
	/**
	 * User-provided data. User is free to set anything he wants here<br>
	 * C type : void*
	 */
	public Pointer userdata;
	/**
	 * This function will be called each time data appears on socket. The data<br>
	 * not consumed will appear on the next data event.<br>
	 * C type : ssh_callback_data
	 */
	public ssh_callback_data data;
	/**
	 * This function will be called each time a controlflow state changes, i.e.<br>
	 * the socket is available for reading or writing.<br>
	 * C type : ssh_callback_int
	 */
	public ssh_callback_int controlflow;
	/**
	 * This function will be called each time an exception appears on socket. An<br>
	 * exception can be a socket problem (timeout, ...) or an end-of-file.<br>
	 * C type : ssh_callback_int_int
	 */
	public ssh_callback_int_int exception;
	/**
	 * This function is called when the ssh_socket_connect was used on the socket<br>
	 * on nonblocking state, and the connection successed.<br>
	 * C type : ssh_callback_int_int
	 */
	public ssh_callback_int_int connected;
	public ssh_socket_callbacks_struct() {
		super();
	}

	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(new java.lang.String[]{"userdata", "data", "controlflow", "exception", "connected"});
	}
	/**
	 * @param userdata User-provided data. User is free to set anything he wants here<br>
	 * C type : void*<br>
	 * @param data This function will be called each time data appears on socket. The data<br>
	 * not consumed will appear on the next data event.<br>
	 * C type : ssh_callback_data<br>
	 * @param controlflow This function will be called each time a controlflow state changes, i.e.<br>
	 * the socket is available for reading or writing.<br>
	 * C type : ssh_callback_int<br>
	 * @param exception This function will be called each time an exception appears on socket. An<br>
	 * exception can be a socket problem (timeout, ...) or an end-of-file.<br>
	 * C type : ssh_callback_int_int<br>
	 * @param connected This function is called when the ssh_socket_connect was used on the socket<br>
	 * on nonblocking state, and the connection successed.<br>
	 * C type : ssh_callback_int_int
	 */
	public ssh_socket_callbacks_struct(Pointer userdata, ssh_callback_data data, ssh_callback_int controlflow, ssh_callback_int_int exception, ssh_callback_int_int connected) {
		super();
		this.userdata = userdata;
		this.data = data;
		this.controlflow = controlflow;
		this.exception = exception;
		this.connected = connected;
	}
	@Override
	protected ByReference newByReference() { return new ByReference(); }
	@Override
	protected ByValue newByValue() { return new ByValue(); }
	@Override
	protected ssh_socket_callbacks_struct newInstance() { return new ssh_socket_callbacks_struct(); }
	public static ssh_socket_callbacks_struct[] newArray(int arrayLength) {
		return Structure.newArray(ssh_socket_callbacks_struct.class, arrayLength);
	}
	public static class ByReference extends ssh_socket_callbacks_struct implements Structure.ByReference {
		
	};
	public static class ByValue extends ssh_socket_callbacks_struct implements Structure.ByValue {
		
	};
}
