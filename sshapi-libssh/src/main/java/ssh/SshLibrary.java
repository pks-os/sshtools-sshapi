package ssh;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.ochafik.lang.jnaerator.runtime.Mangling;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>ssh</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SshLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("ssh", true, ssh.SshLibrary.class);
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(ssh.SshLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final SshLibrary INSTANCE = (SshLibrary)Native.loadLibrary(ssh.SshLibrary.JNA_LIBRARY_NAME, ssh.SshLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	/**
	 * the offsets of methods<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:70</i><br>
	 * enum values
	 */
	public static interface ssh_kex_types_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:71</i>
		public static final int SSH_KEX = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:72</i>
		public static final int SSH_HOSTKEYS = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:73</i>
		public static final int SSH_CRYPT_C_S = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:74</i>
		public static final int SSH_CRYPT_S_C = 3;
		/// <i>native declaration : /usr/include/libssh/libssh.h:75</i>
		public static final int SSH_MAC_C_S = 4;
		/// <i>native declaration : /usr/include/libssh/libssh.h:76</i>
		public static final int SSH_MAC_S_C = 5;
		/// <i>native declaration : /usr/include/libssh/libssh.h:77</i>
		public static final int SSH_COMP_C_S = 6;
		/// <i>native declaration : /usr/include/libssh/libssh.h:78</i>
		public static final int SSH_COMP_S_C = 7;
		/// <i>native declaration : /usr/include/libssh/libssh.h:79</i>
		public static final int SSH_LANG_C_S = 8;
		/// <i>native declaration : /usr/include/libssh/libssh.h:80</i>
		public static final int SSH_LANG_S_C = 9;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:88</i><br>
	 * enum values
	 */
	public static interface ssh_auth_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:89</i>
		public static final int SSH_AUTH_SUCCESS = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:90</i>
		public static final int SSH_AUTH_DENIED = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:91</i>
		public static final int SSH_AUTH_PARTIAL = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:92</i>
		public static final int SSH_AUTH_INFO = 3;
		/// <i>native declaration : /usr/include/libssh/libssh.h:93</i>
		public static final int SSH_AUTH_AGAIN = 4;
		/// <i>native declaration : /usr/include/libssh/libssh.h:94</i>
		public static final int SSH_AUTH_ERROR = -1;
	};
	/**
	 * messages<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:106</i><br>
	 * enum values
	 */
	public static interface ssh_requests_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:107</i>
		public static final int SSH_REQUEST_AUTH = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:108</i>
		public static final int SSH_REQUEST_CHANNEL_OPEN = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:109</i>
		public static final int SSH_REQUEST_CHANNEL = 3;
		/// <i>native declaration : /usr/include/libssh/libssh.h:110</i>
		public static final int SSH_REQUEST_SERVICE = 4;
		/// <i>native declaration : /usr/include/libssh/libssh.h:111</i>
		public static final int SSH_REQUEST_GLOBAL = 5;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:114</i><br>
	 * enum values
	 */
	public static interface ssh_channel_type_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:115</i>
		public static final int SSH_CHANNEL_UNKNOWN = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:116</i>
		public static final int SSH_CHANNEL_SESSION = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:117</i>
		public static final int SSH_CHANNEL_DIRECT_TCPIP = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:118</i>
		public static final int SSH_CHANNEL_FORWARDED_TCPIP = 3;
		/// <i>native declaration : /usr/include/libssh/libssh.h:119</i>
		public static final int SSH_CHANNEL_X11 = 4;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:122</i><br>
	 * enum values
	 */
	public static interface ssh_channel_requests_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:123</i>
		public static final int SSH_CHANNEL_REQUEST_UNKNOWN = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:124</i>
		public static final int SSH_CHANNEL_REQUEST_PTY = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:125</i>
		public static final int SSH_CHANNEL_REQUEST_EXEC = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:126</i>
		public static final int SSH_CHANNEL_REQUEST_SHELL = 3;
		/// <i>native declaration : /usr/include/libssh/libssh.h:127</i>
		public static final int SSH_CHANNEL_REQUEST_ENV = 4;
		/// <i>native declaration : /usr/include/libssh/libssh.h:128</i>
		public static final int SSH_CHANNEL_REQUEST_SUBSYSTEM = 5;
		/// <i>native declaration : /usr/include/libssh/libssh.h:129</i>
		public static final int SSH_CHANNEL_REQUEST_WINDOW_CHANGE = 6;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:132</i><br>
	 * enum values
	 */
	public static interface ssh_global_requests_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:133</i>
		public static final int SSH_GLOBAL_REQUEST_UNKNOWN = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:134</i>
		public static final int SSH_GLOBAL_REQUEST_TCPIP_FORWARD = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:135</i>
		public static final int SSH_GLOBAL_REQUEST_CANCEL_TCPIP_FORWARD = 2;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:138</i><br>
	 * enum values
	 */
	public static interface ssh_publickey_state_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:139</i>
		public static final int SSH_PUBLICKEY_STATE_ERROR = -1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:140</i>
		public static final int SSH_PUBLICKEY_STATE_NONE = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:141</i>
		public static final int SSH_PUBLICKEY_STATE_VALID = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:142</i>
		public static final int SSH_PUBLICKEY_STATE_WRONG = 2;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:150</i><br>
	 * enum values
	 */
	public static interface ssh_server_known_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:151</i>
		public static final int SSH_SERVER_ERROR = -1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:152</i>
		public static final int SSH_SERVER_NOT_KNOWN = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:153</i>
		public static final int SSH_SERVER_KNOWN_OK = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:154</i>
		public static final int SSH_SERVER_KNOWN_CHANGED = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:155</i>
		public static final int SSH_SERVER_FOUND_OTHER = 3;
		/// <i>native declaration : /usr/include/libssh/libssh.h:156</i>
		public static final int SSH_SERVER_FILE_NOT_FOUND = 4;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:164</i><br>
	 * enum values
	 */
	public static interface ssh_error_types_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:165</i>
		public static final int SSH_NO_ERROR = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:166</i>
		public static final int SSH_REQUEST_DENIED = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:167</i>
		public static final int SSH_FATAL = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:168</i>
		public static final int SSH_EINTR = 3;
	};
	/**
	 * some types for keys<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:172</i><br>
	 * enum values
	 */
	public static interface ssh_keytypes_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:173</i>
		public static final int SSH_KEYTYPE_UNKNOWN = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:174</i>
		public static final int SSH_KEYTYPE_DSS = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:175</i>
		public static final int SSH_KEYTYPE_RSA = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:176</i>
		public static final int SSH_KEYTYPE_RSA1 = 3;
	};
	/// No logging at all
	public static final int SSH_LOG_NOLOG = 0;
	/// Only rare and noteworthy events
	public static final int SSH_LOG_RARE = 1;
	/// High level protocol information
	public static final int SSH_LOG_PROTOCOL = 2;
	/// Lower level protocol infomations, packet level
	public static final int SSH_LOG_PACKET = 3;
	/// Every function path
	public static final int SSH_LOG_FUNCTIONS = 4;
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:213</i><br>
	 * enum values
	 */
	public static interface ssh_options_e {
		/// <i>native declaration : /usr/include/libssh/libssh.h:214</i>
		public static final int SSH_OPTIONS_HOST = 0;
		/// <i>native declaration : /usr/include/libssh/libssh.h:215</i>
		public static final int SSH_OPTIONS_PORT = 1;
		/// <i>native declaration : /usr/include/libssh/libssh.h:216</i>
		public static final int SSH_OPTIONS_PORT_STR = 2;
		/// <i>native declaration : /usr/include/libssh/libssh.h:217</i>
		public static final int SSH_OPTIONS_FD = 3;
		/// <i>native declaration : /usr/include/libssh/libssh.h:218</i>
		public static final int SSH_OPTIONS_USER = 4;
		/// <i>native declaration : /usr/include/libssh/libssh.h:219</i>
		public static final int SSH_OPTIONS_SSH_DIR = 5;
		/// <i>native declaration : /usr/include/libssh/libssh.h:220</i>
		public static final int SSH_OPTIONS_IDENTITY = 6;
		/// <i>native declaration : /usr/include/libssh/libssh.h:221</i>
		public static final int SSH_OPTIONS_ADD_IDENTITY = 7;
		/// <i>native declaration : /usr/include/libssh/libssh.h:222</i>
		public static final int SSH_OPTIONS_KNOWNHOSTS = 8;
		/// <i>native declaration : /usr/include/libssh/libssh.h:223</i>
		public static final int SSH_OPTIONS_TIMEOUT = 9;
		/// <i>native declaration : /usr/include/libssh/libssh.h:224</i>
		public static final int SSH_OPTIONS_TIMEOUT_USEC = 10;
		/// <i>native declaration : /usr/include/libssh/libssh.h:225</i>
		public static final int SSH_OPTIONS_SSH1 = 11;
		/// <i>native declaration : /usr/include/libssh/libssh.h:226</i>
		public static final int SSH_OPTIONS_SSH2 = 12;
		/// <i>native declaration : /usr/include/libssh/libssh.h:227</i>
		public static final int SSH_OPTIONS_LOG_VERBOSITY = 13;
		/// <i>native declaration : /usr/include/libssh/libssh.h:228</i>
		public static final int SSH_OPTIONS_LOG_VERBOSITY_STR = 14;
		/// <i>native declaration : /usr/include/libssh/libssh.h:229</i>
		public static final int SSH_OPTIONS_CIPHERS_C_S = 15;
		/// <i>native declaration : /usr/include/libssh/libssh.h:230</i>
		public static final int SSH_OPTIONS_CIPHERS_S_C = 16;
		/// <i>native declaration : /usr/include/libssh/libssh.h:231</i>
		public static final int SSH_OPTIONS_COMPRESSION_C_S = 17;
		/// <i>native declaration : /usr/include/libssh/libssh.h:232</i>
		public static final int SSH_OPTIONS_COMPRESSION_S_C = 18;
		/// <i>native declaration : /usr/include/libssh/libssh.h:233</i>
		public static final int SSH_OPTIONS_PROXYCOMMAND = 19;
		/// <i>native declaration : /usr/include/libssh/libssh.h:234</i>
		public static final int SSH_OPTIONS_BINDADDR = 20;
		/// <i>native declaration : /usr/include/libssh/libssh.h:235</i>
		public static final int SSH_OPTIONS_STRICTHOSTKEYCHECK = 21;
		/// <i>native declaration : /usr/include/libssh/libssh.h:236</i>
		public static final int SSH_OPTIONS_COMPRESSION = 22;
		/// <i>native declaration : /usr/include/libssh/libssh.h:237</i>
		public static final int SSH_OPTIONS_COMPRESSION_LEVEL = 23;
	};
	/// Code is going to write/create remote files
	public static final int SSH_SCP_WRITE = 0;
	/// Code is going to read remote files
	public static final int SSH_SCP_READ = 1;
	public static final int SSH_SCP_RECURSIVE = 16;
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:248</i><br>
	 * enum values
	 */
	public static interface ssh_scp_request_types {
		/**
		 * A new directory is going to be pulled<br>
		 * A new directory is going to be pulled<br>
		 * <i>native declaration : /usr/include/libssh/libssh.h:250</i>
		 */
		public static final int SSH_SCP_REQUEST_NEWDIR = 1;
		/**
		 * A new file is going to be pulled<br>
		 * A new file is going to be pulled<br>
		 * <i>native declaration : /usr/include/libssh/libssh.h:252</i>
		 */
		public static final int SSH_SCP_REQUEST_NEWFILE = 2;
		/**
		 * End of requests<br>
		 * End of requests<br>
		 * <i>native declaration : /usr/include/libssh/libssh.h:254</i>
		 */
		public static final int SSH_SCP_REQUEST_EOF = 3;
		/**
		 * End of directory<br>
		 * End of directory<br>
		 * <i>native declaration : /usr/include/libssh/libssh.h:256</i>
		 */
		public static final int SSH_SCP_REQUEST_ENDDIR = 4;
		/**
		 * Warning received<br>
		 * Warning received<br>
		 * <i>native declaration : /usr/include/libssh/libssh.h:258</i>
		 */
		public static final int SSH_SCP_REQUEST_WARNING = 5;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/server.h:38</i><br>
	 * enum values
	 */
	public static interface ssh_bind_options_e {
		/// <i>native declaration : /usr/include/libssh/server.h:39</i>
		public static final int SSH_BIND_OPTIONS_BINDADDR = 0;
		/// <i>native declaration : /usr/include/libssh/server.h:40</i>
		public static final int SSH_BIND_OPTIONS_BINDPORT = 1;
		/// <i>native declaration : /usr/include/libssh/server.h:41</i>
		public static final int SSH_BIND_OPTIONS_BINDPORT_STR = 2;
		/// <i>native declaration : /usr/include/libssh/server.h:42</i>
		public static final int SSH_BIND_OPTIONS_HOSTKEY = 3;
		/// <i>native declaration : /usr/include/libssh/server.h:43</i>
		public static final int SSH_BIND_OPTIONS_DSAKEY = 4;
		/// <i>native declaration : /usr/include/libssh/server.h:44</i>
		public static final int SSH_BIND_OPTIONS_RSAKEY = 5;
		/// <i>native declaration : /usr/include/libssh/server.h:45</i>
		public static final int SSH_BIND_OPTIONS_BANNER = 6;
		/// <i>native declaration : /usr/include/libssh/server.h:46</i>
		public static final int SSH_BIND_OPTIONS_LOG_VERBOSITY = 7;
		/// <i>native declaration : /usr/include/libssh/server.h:47</i>
		public static final int SSH_BIND_OPTIONS_LOG_VERBOSITY_STR = 8;
	};
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_WRITE = 6;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_EOF = 96;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_FAILURE = 100;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_DATA = 103;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE = 14;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEX_DH_GEX_REQUEST = 34;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_SOCKET_EXCEPTION_ERROR = 2;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_LANG = 5;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_EXTENDED_DATA = 95;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_OPEN_CONNECT_FAILED = 2;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_HANDLES = 256;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_AUTH_METHOD_NONE = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_APPEND = 4;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_SOCKET_FLOW_WRITEWONTBLOCK = 2;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_EOF = -127;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int LIBSFTP_VERSION = 3;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_CLOSED = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_TYPE_UNKNOWN = 5;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_AUTH_CANCELLED_BY_USER = 13;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_OPEN_FAILURE = 92;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_GLOBAL_REQUEST = 80;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_TYPE_SYMLINK = 3;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_FILE_ALREADY_EXISTS = 11;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_RENAME_ATOMIC = 2;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_SUCCESS = 52;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_AUTH_METHOD_PUBLICKEY = 4;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_EXTENDED = 200;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_ACL = 64;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_OPEN = 90;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_RENAME_OVERWRITE = 1;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEX_DH_GEX_REQUEST_OLD = 30;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_HOST_KEY_NOT_VERIFIABLE = 9;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_REQUEST_FAILURE = 82;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_OPEN_RESOURCE_SHORTAGE = 4;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_SOCKET_FLOW_WRITEWILLBLOCK = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_OPENDIR = 11;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_RENAME = 18;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_EXTENDED_REPLY = 201;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_UNIMPLEMENTED = 3;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEX_DH_GEX_REPLY = 33;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_KEY_EXCHANGE_FAILED = 3;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_CLOSE = 97;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_CREAT = 8;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXE_STATVFS_ST_NOSUID = 2;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT = 1;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_AUTH_METHOD_UNKNOWN = 0;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_VERSION = 2;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_BAD_MESSAGE = 5;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_SYMLINK = 20;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_READ = 1;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_PK_OK = 60;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_INVALID_HANDLE = 9;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_OK = 0;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_REALPATH = 16;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_EOF = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_WRITE_PROTECT = 12;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_CLOSED_ERROR = 4;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_CONNECTION_LOST = 10;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_SETSTAT = 9;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_AUTH_METHOD_INTERACTIVE = 16;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED = 8;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_CREATETIME = 16;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_SIZE = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_READ = 5;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_REQUEST = 98;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_RENAME_NATIVE = 4;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_DATA = 94;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_AUTH_METHOD_HOSTBASED = 8;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_TOO_MANY_CONNECTIONS = 12;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_NO_MEDIA = 13;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_PACKET_NOT_USED = 2;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_OK = 0;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_PASSWD_CHANGEREQ = 60;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_NO_SUCH_PATH = 10;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_OPEN_CONFIRMATION = 91;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_FAILURE = 4;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_NO_CONNECTION = 6;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_MAC_ERROR = 5;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_ILLEGAL_USER_NAME = 15;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEXINIT = 20;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_REMOVE = 13;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_FSETSTAT = 10;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_SOCKET_CONNECTED_TIMEOUT = 3;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_READ_PENDING = 2;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_FAILURE = 51;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_NAME = 104;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEXDH_REPLY = 31;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_SOCKET_CONNECTED_OK = 1;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_BANNER = 53;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_EXCL = 32;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEX_DH_GEX_GROUP = 31;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_PERMISSIONS = 4;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_STATUS = 101;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_SOCKET_EXCEPTION_EOF = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_TYPE_REGULAR = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_OPEN = 3;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_TYPE_SPECIAL = 4;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_INFO_REQUEST = 60;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_NO_SUCH_FILE = 2;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_COMP = 4;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_SUCCESS = 99;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_NEWKEYS = 21;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_REQUEST_SUCCESS = 81;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEX_DH_GEX_INIT = 32;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_RESERVED = 4;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int LIBSSH_VERSION_MICRO = 2;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_TEXT = 64;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_ACCESSTIME = 8;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_CHANNEL_WINDOW_ADJUST = 93;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int MD5_DIGEST_LEN = 16;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_SERVICE_NOT_AVAILABLE = 7;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_ACMODTIME = 8;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_STAT = 17;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int LIBSSH_VERSION_MAJOR = 0;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_MAC = 3;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_UIDGID = 2;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_DISCONNECT = 1;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_IGNORE = 2;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXE_STATVFS_ST_RDONLY = 1;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_DEBUG = 4;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_PACKET_USED = 1;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_SERVICE_REQUEST = 5;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_TRUNC = 16;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_CONNECTION_LOST = 7;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_BY_APPLICATION = 11;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int LIBSSH_VERSION_MINOR = 5;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_KEXDH_INIT = 30;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_RMDIR = 15;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_REQUEST = 50;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_READDIR = 12;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_AGAIN = -2;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_COMPRESSION_ERROR = 6;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_PERMISSION_DENIED = 3;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_INIT = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_LSTAT = 7;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_USERAUTH_INFO_RESPONSE = 61;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_SUBSECOND_TIMES = 256;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FX_OP_UNSUPPORTED = 8;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_CLOSE = 4;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_ERROR = -1;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public static final int SSH_SOCKET_CONNECTED_ERROR = 2;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_CRYPT = 2;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_READLINK = 19;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_EXTENDED = -2147483648;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_OWNERGROUP = 128;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_HANDLE = 102;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_MSG_SERVICE_ACCEPT = 6;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_OPEN_UNKNOWN_CHANNEL_TYPE = 3;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_ATTRS = 105;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXF_WRITE = 2;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_HOST_AUTHENTICATION_FAILED = 4;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_OPEN_ADMINISTRATIVELY_PROHIBITED = 1;
	/// <i>native declaration : /usr/include/libssh/libssh.h</i>
	public static final int SSH_AUTH_METHOD_PASSWORD = 2;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_DISCONNECT_PROTOCOL_ERROR = 2;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_TYPE_DIRECTORY = 2;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FILEXFER_ATTR_MODIFYTIME = 32;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_MKDIR = 14;
	/// <i>native declaration : /usr/include/libssh/ssh2.h</i>
	public static final int SSH2_EXTENDED_DATA_STDERR = 1;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SSH_FXP_FSTAT = 8;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_SETSTAT = SshLibrary.SSH_FXP_SETSTAT;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_WRITE = SshLibrary.SSH_FXP_WRITE;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_REMOVE = SshLibrary.SSH_FXP_REMOVE;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_REALPATH = SshLibrary.SSH_FXP_REALPATH;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_READ = SshLibrary.SSH_FXP_READ;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_SYMLINK = SshLibrary.SSH_FXP_SYMLINK;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_READLINK = SshLibrary.SSH_FXP_READLINK;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_RENAME = SshLibrary.SSH_FXP_RENAME;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_RMDIR = SshLibrary.SSH_FXP_RMDIR;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_STAT = SshLibrary.SSH_FXP_STAT;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_MKDIR = SshLibrary.SSH_FXP_MKDIR;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_READDIR = SshLibrary.SSH_FXP_READDIR;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_CLOSE = SshLibrary.SSH_FXP_CLOSE;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_LSTAT = SshLibrary.SSH_FXP_LSTAT;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_FSTAT = SshLibrary.SSH_FXP_FSTAT;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_OPENDIR = SshLibrary.SSH_FXP_OPENDIR;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_OPEN = SshLibrary.SSH_FXP_OPEN;
	/// <i>native declaration : /usr/include/libssh/sftp.h</i>
	public static final int SFTP_FSETSTAT = SshLibrary.SSH_FXP_FSETSTAT;
	/**
	 * @internal<br>
	 * @brief callback to process simple codes<br>
	 * @param code value to transmit<br>
	 * @param user Userdata to pass in callback<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_callback_int extends Callback {
		void apply(int code, Pointer user);
	};
	/**
	 * @internal<br>
	 * @brief callback for data received messages.<br>
	 * @param data data retrieved from the socket or stream<br>
	 * @param len number of bytes available from this stream<br>
	 * @param user user-supplied pointer sent along with all callback messages<br>
	 * @returns number of bytes processed by the callee. The remaining bytes will<br>
	 * be sent in the next callback message, when more data is available.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_callback_data extends Callback {
		int apply(Pointer data, NativeSize len, Pointer user);
	};
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface ssh_callback_int_int extends Callback {
		void apply(int code, int errno_code, Pointer user);
	};
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface ssh_message_callback extends Callback {
		int apply(SshLibrary.ssh_message message, Pointer user);
	};
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface ssh_channel_callback_int extends Callback {
		int apply(SshLibrary.ssh_channel channel, int code, Pointer user);
	};
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface ssh_channel_callback_data extends Callback {
		int apply(SshLibrary.ssh_channel channel, int code, Pointer data, NativeSize len, Pointer user);
	};
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface ssh_auth_callback extends Callback {
		int apply(Pointer prompt, Pointer buf, NativeSize len, int echo, int verify, Pointer userdata);
	};
	/**
	 * @brief SSH log callback. All logging messages will go through this callback<br>
	 * @param session Current session handler<br>
	 * @param priority Priority of the log, the smaller being the more important<br>
	 * @param message the actual message<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_log_callback extends Callback {
		void apply(SshLibrary.ssh_session session, int priority, Pointer message, Pointer userdata);
	};
	/**
	 * @brief SSH Connection status callback.<br>
	 * @param session Current session handler<br>
	 * @param status Percentage of connection status, going from 0.0 to 1.0<br>
	 * once connection is done.<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_status_callback extends Callback {
		void apply(SshLibrary.ssh_session session, float status, Pointer userdata);
	};
	/**
	 * @brief SSH global request callback. All global request will go through this<br>
	 * callback.<br>
	 * @param session Current session handler<br>
	 * @param message the actual message<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_global_request_callback extends Callback {
		void apply(SshLibrary.ssh_session session, SshLibrary.ssh_message message, Pointer userdata);
	};
	/**
	 * @brief Prototype for a packet callback, to be called when a new packet arrives<br>
	 * @param session The current session of the packet<br>
	 * @param type packet type (see ssh2.h)<br>
	 * @param packet buffer containing the packet, excluding size, type and padding fields<br>
	 * @param user user argument to the callback<br>
	 * and are called each time a packet shows up<br>
	 * @returns SSH_PACKET_USED Packet was parsed and used<br>
	 * @returns SSH_PACKET_NOT_USED Packet was not used or understood, processing must continue<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_packet_callback extends Callback {
		int apply(SshLibrary.ssh_session session, byte type, SshLibrary.ssh_buffer packet, Pointer user);
	};
	/**
	 * @brief SSH channel data callback. Called when data is available on a channel<br>
	 * @param session Current session handler<br>
	 * @param channel the actual channel<br>
	 * @param data the data that has been read on the channel<br>
	 * @param len the length of the data<br>
	 * @param is_stderr is 0 for stdout or 1 for stderr<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_channel_data_callback extends Callback {
		int apply(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel, Pointer data, int len, int is_stderr, Pointer userdata);
	};
	/**
	 * @brief SSH channel eof callback. Called when a channel receives EOF<br>
	 * @param session Current session handler<br>
	 * @param channel the actual channel<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_channel_eof_callback extends Callback {
		void apply(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel, Pointer userdata);
	};
	/**
	 * @brief SSH channel close callback. Called when a channel is closed by remote peer<br>
	 * @param session Current session handler<br>
	 * @param channel the actual channel<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_channel_close_callback extends Callback {
		void apply(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel, Pointer userdata);
	};
	/**
	 * @brief SSH channel signal callback. Called when a channel has received a signal<br>
	 * @param session Current session handler<br>
	 * @param channel the actual channel<br>
	 * @param signal the signal name (without the SIG prefix)<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_channel_signal_callback extends Callback {
		void apply(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel, Pointer signal, Pointer userdata);
	};
	/**
	 * @brief SSH channel exit status callback. Called when a channel has received an exit status<br>
	 * @param session Current session handler<br>
	 * @param channel the actual channel<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_channel_exit_status_callback extends Callback {
		void apply(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel, int exit_status, Pointer userdata);
	};
	/**
	 * @brief SSH channel exit signal callback. Called when a channel has received an exit signal<br>
	 * @param session Current session handler<br>
	 * @param channel the actual channel<br>
	 * @param signal the signal name (without the SIG prefix)<br>
	 * @param core a boolean telling wether a core has been dumped or not<br>
	 * @param errmsg the description of the exception<br>
	 * @param lang the language of the description (format: RFC 3066)<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h</i>
	 */
	public interface ssh_channel_exit_signal_callback extends Callback {
		void apply(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel, Pointer signal, int core, Pointer errmsg, Pointer lang, Pointer userdata);
	};
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface ssh_thread_callback extends Callback {
		int apply(PointerByReference lock);
	};
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface ssh_thread_id_callback extends Callback {
		NativeLong apply();
	};
	/**
	 * @brief Incoming connection callback. This callback is called when a ssh_bind<br>
	 *        has a new incoming connection.<br>
	 * @param sshbind Current sshbind session handler<br>
	 * @param message the actual message<br>
	 * @param userdata Userdata to be passed to the callback function.<br>
	 * <i>native declaration : /usr/include/libssh/server.h</i>
	 */
	public interface ssh_bind_incoming_connection_callback extends Callback {
		void apply(SshLibrary.ssh_bind sshbind, Pointer userdata);
	};
	/// <i>native declaration : /usr/include/libssh/server.h:262</i>
	public interface ssh_set_message_callback_arg1_ssh_bind_message_callback_callback extends Callback {
		int apply(SshLibrary.ssh_session session, SshLibrary.ssh_message msg, Pointer data);
	};
	/**
	 * Original signature : <code>int ssh_blocking_flush(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:261</i>
	 */
	@Mangling({"_Z18ssh_blocking_flushP18ssh_session_structi", "?ssh_blocking_flush@@YAHPA18ssh_session_structH@Z"}) 
	int ssh_blocking_flush(SshLibrary.ssh_session session, int timeout);
	/**
	 * Original signature : <code>ssh_channel ssh_channel_accept_x11(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:262</i>
	 */
	@Mangling({"_Z22ssh_channel_accept_x11P18ssh_channel_structi", "?ssh_channel_accept_x11@@YAPA18ssh_channel_structPA18ssh_channel_structH@Z"}) 
	SshLibrary.ssh_channel ssh_channel_accept_x11(SshLibrary.ssh_channel channel, int timeout_ms);
	/**
	 * Original signature : <code>int ssh_channel_change_pty_size(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:263</i>
	 */
	@Mangling({"_Z27ssh_channel_change_pty_sizeP18ssh_channel_structii", "?ssh_channel_change_pty_size@@YAHPA18ssh_channel_structHH@Z"}) 
	int ssh_channel_change_pty_size(SshLibrary.ssh_channel channel, int cols, int rows);
	/**
	 * Original signature : <code>int ssh_channel_close(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:264</i>
	 */
	@Mangling({"_Z17ssh_channel_closeP18ssh_channel_struct", "?ssh_channel_close@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_close(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>void ssh_channel_free(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:265</i>
	 */
	@Mangling({"_Z16ssh_channel_freeP18ssh_channel_struct", "?ssh_channel_free@@YAXPA18ssh_channel_struct@Z"}) 
	void ssh_channel_free(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_get_exit_status(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:266</i>
	 */
	@Mangling({"_Z27ssh_channel_get_exit_statusP18ssh_channel_struct", "?ssh_channel_get_exit_status@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_get_exit_status(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_session ssh_channel_get_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:267</i>
	 */
	@Mangling({"_Z23ssh_channel_get_sessionP18ssh_channel_struct", "?ssh_channel_get_session@@YAPA18ssh_session_structPA18ssh_channel_struct@Z"}) 
	SshLibrary.ssh_session ssh_channel_get_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_is_closed(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:268</i>
	 */
	@Mangling({"_Z21ssh_channel_is_closedP18ssh_channel_struct", "?ssh_channel_is_closed@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_is_closed(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_is_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:269</i>
	 */
	@Mangling({"_Z18ssh_channel_is_eofP18ssh_channel_struct", "?ssh_channel_is_eof@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_is_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_is_open(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:270</i>
	 */
	@Mangling({"_Z19ssh_channel_is_openP18ssh_channel_struct", "?ssh_channel_is_open@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_is_open(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_channel ssh_channel_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:271</i>
	 */
	@Mangling({"_Z15ssh_channel_newP18ssh_session_struct", "?ssh_channel_new@@YAPA18ssh_channel_structPA18ssh_session_struct@Z"}) 
	SshLibrary.ssh_channel ssh_channel_new(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:272</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_open_forward(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, int)} and {@link #ssh_channel_open_forward(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z24ssh_channel_open_forwardP18ssh_channel_structPKciPKci", "?ssh_channel_open_forward@@YAHPA18ssh_channel_structPADHPADH@Z"}) 
	@Deprecated 
	int ssh_channel_open_forward(SshLibrary.ssh_channel channel, Pointer remotehost, int remoteport, Pointer sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:272</i>
	 */
	@Mangling({"_Z24ssh_channel_open_forwardP18ssh_channel_structPKciPKci", "?ssh_channel_open_forward@@YAHPA18ssh_channel_structPADHPADH@Z"}) 
	int ssh_channel_open_forward(SshLibrary.ssh_channel channel, String remotehost, int remoteport, String sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_open_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:274</i>
	 */
	@Mangling({"_Z24ssh_channel_open_sessionP18ssh_channel_struct", "?ssh_channel_open_session@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_open_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_poll(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:275</i>
	 */
	@Mangling({"_Z16ssh_channel_pollP18ssh_channel_structi", "?ssh_channel_poll@@YAHPA18ssh_channel_structH@Z"}) 
	int ssh_channel_poll(SshLibrary.ssh_channel channel, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_read(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:276</i>
	 */
	@Mangling({"_Z16ssh_channel_readP18ssh_channel_structPv8uint32_ti", "?ssh_channel_read@@YAHPA18ssh_channel_structPAX8uint32_tH@Z"}) 
	int ssh_channel_read(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_read_nonblocking(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:277</i>
	 */
	@Mangling({"_Z28ssh_channel_read_nonblockingP18ssh_channel_structPv8uint32_ti", "?ssh_channel_read_nonblocking@@YAHPA18ssh_channel_structPAX8uint32_tH@Z"}) 
	int ssh_channel_read_nonblocking(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:279</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_env(ssh.SshLibrary.ssh_channel, java.lang.String, java.lang.String)} and {@link #ssh_channel_request_env(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z23ssh_channel_request_envP18ssh_channel_structPKcPKc", "?ssh_channel_request_env@@YAHPA18ssh_channel_structPADPAD@Z"}) 
	@Deprecated 
	int ssh_channel_request_env(SshLibrary.ssh_channel channel, Pointer name, Pointer value);
	/**
	 * Original signature : <code>int ssh_channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:279</i>
	 */
	@Mangling({"_Z23ssh_channel_request_envP18ssh_channel_structPKcPKc", "?ssh_channel_request_env@@YAHPA18ssh_channel_structPADPAD@Z"}) 
	int ssh_channel_request_env(SshLibrary.ssh_channel channel, String name, String value);
	/**
	 * Original signature : <code>int ssh_channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:280</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_exec(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #ssh_channel_request_exec(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z24ssh_channel_request_execP18ssh_channel_structPKc", "?ssh_channel_request_exec@@YAHPA18ssh_channel_structPAD@Z"}) 
	@Deprecated 
	int ssh_channel_request_exec(SshLibrary.ssh_channel channel, Pointer cmd);
	/**
	 * Original signature : <code>int ssh_channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:280</i>
	 */
	@Mangling({"_Z24ssh_channel_request_execP18ssh_channel_structPKc", "?ssh_channel_request_exec@@YAHPA18ssh_channel_structPAD@Z"}) 
	int ssh_channel_request_exec(SshLibrary.ssh_channel channel, String cmd);
	/**
	 * Original signature : <code>int ssh_channel_request_pty(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:281</i>
	 */
	@Mangling({"_Z23ssh_channel_request_ptyP18ssh_channel_struct", "?ssh_channel_request_pty@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_request_pty(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:282</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_pty_size(ssh.SshLibrary.ssh_channel, java.lang.String, int, int)} and {@link #ssh_channel_request_pty_size(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, int)} instead
	 */
	@Mangling({"_Z28ssh_channel_request_pty_sizeP18ssh_channel_structPKcii", "?ssh_channel_request_pty_size@@YAHPA18ssh_channel_structPADHH@Z"}) 
	@Deprecated 
	int ssh_channel_request_pty_size(SshLibrary.ssh_channel channel, Pointer term, int cols, int rows);
	/**
	 * Original signature : <code>int ssh_channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:282</i>
	 */
	@Mangling({"_Z28ssh_channel_request_pty_sizeP18ssh_channel_structPKcii", "?ssh_channel_request_pty_size@@YAHPA18ssh_channel_structPADHH@Z"}) 
	int ssh_channel_request_pty_size(SshLibrary.ssh_channel channel, String term, int cols, int rows);
	/**
	 * Original signature : <code>int ssh_channel_request_shell(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:284</i>
	 */
	@Mangling({"_Z25ssh_channel_request_shellP18ssh_channel_struct", "?ssh_channel_request_shell@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_request_shell(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:285</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_send_signal(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #ssh_channel_request_send_signal(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z31ssh_channel_request_send_signalP18ssh_channel_structPKc", "?ssh_channel_request_send_signal@@YAHPA18ssh_channel_structPAD@Z"}) 
	@Deprecated 
	int ssh_channel_request_send_signal(SshLibrary.ssh_channel channel, Pointer signum);
	/**
	 * Original signature : <code>int ssh_channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:285</i>
	 */
	@Mangling({"_Z31ssh_channel_request_send_signalP18ssh_channel_structPKc", "?ssh_channel_request_send_signal@@YAHPA18ssh_channel_structPAD@Z"}) 
	int ssh_channel_request_send_signal(SshLibrary.ssh_channel channel, String signum);
	/**
	 * Original signature : <code>int ssh_channel_request_sftp(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:286</i>
	 */
	@Mangling({"_Z24ssh_channel_request_sftpP18ssh_channel_struct", "?ssh_channel_request_sftp@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_request_sftp(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:287</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_subsystem(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #ssh_channel_request_subsystem(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z29ssh_channel_request_subsystemP18ssh_channel_structPKc", "?ssh_channel_request_subsystem@@YAHPA18ssh_channel_structPAD@Z"}) 
	@Deprecated 
	int ssh_channel_request_subsystem(SshLibrary.ssh_channel channel, Pointer subsystem);
	/**
	 * Original signature : <code>int ssh_channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:287</i>
	 */
	@Mangling({"_Z29ssh_channel_request_subsystemP18ssh_channel_structPKc", "?ssh_channel_request_subsystem@@YAHPA18ssh_channel_structPAD@Z"}) 
	int ssh_channel_request_subsystem(SshLibrary.ssh_channel channel, String subsystem);
	/**
	 * Original signature : <code>int ssh_channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:288</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_x11(ssh.SshLibrary.ssh_channel, int, java.lang.String, java.lang.String, int)} and {@link #ssh_channel_request_x11(ssh.SshLibrary.ssh_channel, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z23ssh_channel_request_x11P18ssh_channel_structiPKcPKci", "?ssh_channel_request_x11@@YAHPA18ssh_channel_structHPADPADH@Z"}) 
	@Deprecated 
	int ssh_channel_request_x11(SshLibrary.ssh_channel channel, int single_connection, Pointer protocol, Pointer cookie, int screen_number);
	/**
	 * Original signature : <code>int ssh_channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:288</i>
	 */
	@Mangling({"_Z23ssh_channel_request_x11P18ssh_channel_structiPKcPKci", "?ssh_channel_request_x11@@YAHPA18ssh_channel_structHPADPADH@Z"}) 
	int ssh_channel_request_x11(SshLibrary.ssh_channel channel, int single_connection, String protocol, String cookie, int screen_number);
	/**
	 * Original signature : <code>int ssh_channel_send_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:290</i>
	 */
	@Mangling({"_Z20ssh_channel_send_eofP18ssh_channel_struct", "?ssh_channel_send_eof@@YAHPA18ssh_channel_struct@Z"}) 
	int ssh_channel_send_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_select(ssh_channel*, ssh_channel*, ssh_channel*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:291</i>
	 */
	@Mangling({"_Z18ssh_channel_selectPP18ssh_channel_structPP18ssh_channel_structPP18ssh_channel_structP7timeval", "?ssh_channel_select@@YAHPAPA18ssh_channel_structPAPA18ssh_channel_structPAPA18ssh_channel_structPA7timeval@Z"}) 
	int ssh_channel_select(PointerByReference readchans, PointerByReference writechans, PointerByReference exceptchans, Pointer timeout);
	/**
	 * Original signature : <code>void ssh_channel_set_blocking(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:293</i>
	 */
	@Mangling({"_Z24ssh_channel_set_blockingP18ssh_channel_structi", "?ssh_channel_set_blocking@@YAXPA18ssh_channel_structH@Z"}) 
	void ssh_channel_set_blocking(SshLibrary.ssh_channel channel, int blocking);
	/**
	 * Original signature : <code>int ssh_channel_write(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:294</i>
	 */
	@Mangling({"_Z17ssh_channel_writeP18ssh_channel_structPKv8uint32_t", "?ssh_channel_write@@YAHPA18ssh_channel_structPAX8uint32_t@Z"}) 
	int ssh_channel_write(SshLibrary.ssh_channel channel, Pointer data, int len);
	/**
	 * Original signature : <code>uint32_t ssh_channel_window_size(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:295</i>
	 */
	@Mangling({"_Z23ssh_channel_window_sizeP18ssh_channel_struct", "?ssh_channel_window_size@@YA8uint32_tPA18ssh_channel_struct@Z"}) 
	int ssh_channel_window_size(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_try_publickey_from_file(ssh_session, const char*, ssh_string*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:297</i><br>
	 * @deprecated use the safer methods {@link #ssh_try_publickey_from_file(ssh.SshLibrary.ssh_session, java.lang.String, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #ssh_try_publickey_from_file(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Mangling({"_Z27ssh_try_publickey_from_fileP18ssh_session_structPKcPP17ssh_string_structPi", "?ssh_try_publickey_from_file@@YAHPA18ssh_session_structPADPAPA17ssh_string_structPAH@Z"}) 
	@Deprecated 
	int ssh_try_publickey_from_file(SshLibrary.ssh_session session, Pointer keyfile, PointerByReference publickey, IntByReference type);
	/**
	 * Original signature : <code>int ssh_try_publickey_from_file(ssh_session, const char*, ssh_string*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:297</i>
	 */
	@Mangling({"_Z27ssh_try_publickey_from_fileP18ssh_session_structPKcPP17ssh_string_structPi", "?ssh_try_publickey_from_file@@YAHPA18ssh_session_structPADPAPA17ssh_string_structPAH@Z"}) 
	int ssh_try_publickey_from_file(SshLibrary.ssh_session session, String keyfile, PointerByReference publickey, IntBuffer type);
	/**
	 * Original signature : <code>int ssh_auth_list(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:300</i>
	 */
	@Mangling({"_Z13ssh_auth_listP18ssh_session_struct", "?ssh_auth_list@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_auth_list(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_basename(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:301</i><br>
	 * @deprecated use the safer methods {@link #ssh_basename(java.lang.String)} and {@link #ssh_basename(com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z12ssh_basenamePKc", "?ssh_basename@@YAPADPAD@Z"}) 
	@Deprecated 
	Pointer ssh_basename(Pointer path);
	/**
	 * Original signature : <code>char* ssh_basename(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:301</i>
	 */
	@Mangling({"_Z12ssh_basenamePKc", "?ssh_basename@@YAPADPAD@Z"}) 
	Pointer ssh_basename(String path);
	/**
	 * Original signature : <code>void ssh_clean_pubkey_hash(unsigned char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:302</i>
	 */
	@Mangling({"_Z21ssh_clean_pubkey_hashPPh", "?ssh_clean_pubkey_hash@@YAXPAPAE@Z"}) 
	void ssh_clean_pubkey_hash(PointerByReference hash);
	/**
	 * Original signature : <code>int ssh_connect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:303</i>
	 */
	@Mangling({"_Z11ssh_connectP18ssh_session_struct", "?ssh_connect@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_connect(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_copyright()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:304</i>
	 */
	@Mangling({"_Z13ssh_copyrightv", "?ssh_copyright@@YAQBDXZ"}) 
	String ssh_copyright();
	/**
	 * Original signature : <code>void ssh_disconnect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:305</i>
	 */
	@Mangling({"_Z14ssh_disconnectP18ssh_session_struct", "?ssh_disconnect@@YAXPA18ssh_session_struct@Z"}) 
	void ssh_disconnect(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_dirname(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:306</i><br>
	 * @deprecated use the safer methods {@link #ssh_dirname(java.lang.String)} and {@link #ssh_dirname(com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z11ssh_dirnamePKc", "?ssh_dirname@@YAPADPAD@Z"}) 
	@Deprecated 
	Pointer ssh_dirname(Pointer path);
	/**
	 * Original signature : <code>char* ssh_dirname(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:306</i>
	 */
	@Mangling({"_Z11ssh_dirnamePKc", "?ssh_dirname@@YAPADPAD@Z"}) 
	Pointer ssh_dirname(String path);
	/**
	 * Original signature : <code>int ssh_finalize()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:307</i>
	 */
	@Mangling({"_Z12ssh_finalizev", "?ssh_finalize@@YAHXZ"}) 
	int ssh_finalize();
	/**
	 * Original signature : <code>ssh_channel ssh_forward_accept(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:308</i>
	 */
	@Mangling({"_Z18ssh_forward_acceptP18ssh_session_structi", "?ssh_forward_accept@@YAPA18ssh_channel_structPA18ssh_session_structH@Z"}) 
	SshLibrary.ssh_channel ssh_forward_accept(SshLibrary.ssh_session session, int timeout_ms);
	/**
	 * Original signature : <code>int ssh_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:309</i><br>
	 * @deprecated use the safer methods {@link #ssh_forward_cancel(ssh.SshLibrary.ssh_session, java.lang.String, int)} and {@link #ssh_forward_cancel(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z18ssh_forward_cancelP18ssh_session_structPKci", "?ssh_forward_cancel@@YAHPA18ssh_session_structPADH@Z"}) 
	@Deprecated 
	int ssh_forward_cancel(SshLibrary.ssh_session session, Pointer address, int port);
	/**
	 * Original signature : <code>int ssh_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:309</i>
	 */
	@Mangling({"_Z18ssh_forward_cancelP18ssh_session_structPKci", "?ssh_forward_cancel@@YAHPA18ssh_session_structPADH@Z"}) 
	int ssh_forward_cancel(SshLibrary.ssh_session session, String address, int port);
	/**
	 * Original signature : <code>int ssh_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:310</i><br>
	 * @deprecated use the safer methods {@link #ssh_forward_listen(ssh.SshLibrary.ssh_session, java.lang.String, int, java.nio.IntBuffer)} and {@link #ssh_forward_listen(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Mangling({"_Z18ssh_forward_listenP18ssh_session_structPKciPi", "?ssh_forward_listen@@YAHPA18ssh_session_structPADHPAH@Z"}) 
	@Deprecated 
	int ssh_forward_listen(SshLibrary.ssh_session session, Pointer address, int port, IntByReference bound_port);
	/**
	 * Original signature : <code>int ssh_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:310</i>
	 */
	@Mangling({"_Z18ssh_forward_listenP18ssh_session_structPKciPi", "?ssh_forward_listen@@YAHPA18ssh_session_structPADHPAH@Z"}) 
	int ssh_forward_listen(SshLibrary.ssh_session session, String address, int port, IntBuffer bound_port);
	/**
	 * Original signature : <code>void ssh_free(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:311</i>
	 */
	@Mangling({"_Z8ssh_freeP18ssh_session_struct", "?ssh_free@@YAXPA18ssh_session_struct@Z"}) 
	void ssh_free(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_disconnect_message(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:312</i>
	 */
	@Mangling({"_Z26ssh_get_disconnect_messageP18ssh_session_struct", "?ssh_get_disconnect_message@@YAQBDPA18ssh_session_struct@Z"}) 
	String ssh_get_disconnect_message(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_error(void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:313</i>
	 */
	@Mangling({"_Z13ssh_get_errorPv", "?ssh_get_error@@YAQBDPAX@Z"}) 
	String ssh_get_error(Pointer error);
	/**
	 * Original signature : <code>int ssh_get_error_code(void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:314</i>
	 */
	@Mangling({"_Z18ssh_get_error_codePv", "?ssh_get_error_code@@YAHPAX@Z"}) 
	int ssh_get_error_code(Pointer error);
	/**
	 * Original signature : <code>socket_t ssh_get_fd(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:315</i>
	 */
	@Mangling({"_Z10ssh_get_fdP18ssh_session_struct", "?ssh_get_fd@@YA6SOCKETPA18ssh_session_struct@Z"}) 
	SshLibrary.SOCKET ssh_get_fd(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_hexa(const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:316</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_hexa(byte[], com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ssh_get_hexa(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Mangling({"_Z12ssh_get_hexaPKh6size_t", "?ssh_get_hexa@@YAPADPAE6size_t@Z"}) 
	@Deprecated 
	Pointer ssh_get_hexa(Pointer what, NativeSize len);
	/**
	 * Original signature : <code>char* ssh_get_hexa(const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:316</i>
	 */
	@Mangling({"_Z12ssh_get_hexaPKh6size_t", "?ssh_get_hexa@@YAPADPAE6size_t@Z"}) 
	Pointer ssh_get_hexa(byte what[], NativeSize len);
	/**
	 * Original signature : <code>char* ssh_get_issue_banner(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:317</i>
	 */
	@Mangling({"_Z20ssh_get_issue_bannerP18ssh_session_struct", "?ssh_get_issue_banner@@YAPADPA18ssh_session_struct@Z"}) 
	Pointer ssh_get_issue_banner(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_get_openssh_version(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:318</i>
	 */
	@Mangling({"_Z23ssh_get_openssh_versionP18ssh_session_struct", "?ssh_get_openssh_version@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_get_openssh_version(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>ssh_string ssh_get_pubkey(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:319</i>
	 */
	@Mangling({"_Z14ssh_get_pubkeyP18ssh_session_struct", "?ssh_get_pubkey@@YAPA17ssh_string_structPA18ssh_session_struct@Z"}) 
	SshLibrary.ssh_string ssh_get_pubkey(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_get_pubkey_hash(ssh_session, unsigned char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:320</i>
	 */
	@Mangling({"_Z19ssh_get_pubkey_hashP18ssh_session_structPPh", "?ssh_get_pubkey_hash@@YAHPA18ssh_session_structPAPAE@Z"}) 
	int ssh_get_pubkey_hash(SshLibrary.ssh_session session, PointerByReference hash);
	/**
	 * Original signature : <code>int ssh_get_random(void*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:321</i>
	 */
	@Mangling({"_Z14ssh_get_randomPvii", "?ssh_get_random@@YAHPAXHH@Z"}) 
	int ssh_get_random(Pointer where, int len, int strong);
	/**
	 * Original signature : <code>int ssh_get_version(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:322</i>
	 */
	@Mangling({"_Z15ssh_get_versionP18ssh_session_struct", "?ssh_get_version@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_get_version(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_get_status(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:323</i>
	 */
	@Mangling({"_Z14ssh_get_statusP18ssh_session_struct", "?ssh_get_status@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_get_status(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_init()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:324</i>
	 */
	@Mangling({"_Z8ssh_initv", "?ssh_init@@YAHXZ"}) 
	int ssh_init();
	/**
	 * Original signature : <code>int ssh_is_blocking(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:325</i>
	 */
	@Mangling({"_Z15ssh_is_blockingP18ssh_session_struct", "?ssh_is_blocking@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_is_blocking(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_is_connected(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:326</i>
	 */
	@Mangling({"_Z16ssh_is_connectedP18ssh_session_struct", "?ssh_is_connected@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_is_connected(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_is_server_known(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:327</i>
	 */
	@Mangling({"_Z19ssh_is_server_knownP18ssh_session_struct", "?ssh_is_server_known@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_is_server_known(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_log(ssh_session, int, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:328</i><br>
	 * @deprecated use the safer methods {@link #ssh_log(ssh.SshLibrary.ssh_session, int, java.lang.String, java.lang.Object)} and {@link #ssh_log(ssh.SshLibrary.ssh_session, int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Mangling({"_Z7ssh_logP18ssh_session_structiPKcv", "?ssh_log@@YAXPA18ssh_session_structHPADX@Z"}) 
	@Deprecated 
	void ssh_log(SshLibrary.ssh_session session, int prioriry, Pointer format, Object... varargs);
	/**
	 * Original signature : <code>void ssh_log(ssh_session, int, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:328</i>
	 */
	@Mangling({"_Z7ssh_logP18ssh_session_structiPKcv", "?ssh_log@@YAXPA18ssh_session_structHPADX@Z"}) 
	void ssh_log(SshLibrary.ssh_session session, int prioriry, String format, Object... varargs);
	/**
	 * Original signature : <code>ssh_channel ssh_message_channel_request_open_reply_accept(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:329</i>
	 */
	@Mangling({"_Z45ssh_message_channel_request_open_reply_acceptP18ssh_message_struct", "?ssh_message_channel_request_open_reply_accept@@YAPA18ssh_channel_structPA18ssh_message_struct@Z"}) 
	SshLibrary.ssh_channel ssh_message_channel_request_open_reply_accept(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_reply_success(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:330</i>
	 */
	@Mangling({"_Z41ssh_message_channel_request_reply_successP18ssh_message_struct", "?ssh_message_channel_request_reply_success@@YAHPA18ssh_message_struct@Z"}) 
	int ssh_message_channel_request_reply_success(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>void ssh_message_free(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:331</i>
	 */
	@Mangling({"_Z16ssh_message_freeP18ssh_message_struct", "?ssh_message_free@@YAXPA18ssh_message_struct@Z"}) 
	void ssh_message_free(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>ssh_message ssh_message_get(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:332</i>
	 */
	@Mangling({"_Z15ssh_message_getP18ssh_session_struct", "?ssh_message_get@@YAPA18ssh_message_structPA18ssh_session_struct@Z"}) 
	SshLibrary.ssh_message ssh_message_get(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_message_subtype(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:333</i>
	 */
	@Mangling({"_Z19ssh_message_subtypeP18ssh_message_struct", "?ssh_message_subtype@@YAHPA18ssh_message_struct@Z"}) 
	int ssh_message_subtype(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_type(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:334</i>
	 */
	@Mangling({"_Z16ssh_message_typeP18ssh_message_struct", "?ssh_message_type@@YAHPA18ssh_message_struct@Z"}) 
	int ssh_message_type(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_mkdir(const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:335</i><br>
	 * @deprecated use the safer methods {@link #ssh_mkdir(java.lang.String, int)} and {@link #ssh_mkdir(com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z9ssh_mkdirPKcj", "?ssh_mkdir@@YAHPADI@Z"}) 
	@Deprecated 
	int ssh_mkdir(Pointer pathname, int mode);
	/**
	 * Original signature : <code>int ssh_mkdir(const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:335</i>
	 */
	@Mangling({"_Z9ssh_mkdirPKcj", "?ssh_mkdir@@YAHPADI@Z"}) 
	int ssh_mkdir(String pathname, int mode);
	/**
	 * Original signature : <code>ssh_session ssh_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:336</i>
	 */
	@Mangling({"_Z7ssh_newv", "?ssh_new@@YAPA18ssh_session_structXZ"}) 
	SshLibrary.ssh_session ssh_new();
	/**
	 * Original signature : <code>int ssh_options_copy(ssh_session, ssh_session*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:338</i>
	 */
	@Mangling({"_Z16ssh_options_copyP18ssh_session_structPP18ssh_session_struct", "?ssh_options_copy@@YAHPA18ssh_session_structPAPA18ssh_session_struct@Z"}) 
	int ssh_options_copy(SshLibrary.ssh_session src, PointerByReference dest);
	/**
	 * Original signature : <code>int ssh_options_getopt(ssh_session, int*, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:339</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_getopt(ssh.SshLibrary.ssh_session, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_options_getopt(ssh.SshLibrary.ssh_session, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Mangling({"_Z18ssh_options_getoptP18ssh_session_structPiPPc", "?ssh_options_getopt@@YAHPA18ssh_session_structPAHPAPAD@Z"}) 
	@Deprecated 
	int ssh_options_getopt(SshLibrary.ssh_session session, IntByReference argcptr, PointerByReference argv);
	/**
	 * Original signature : <code>int ssh_options_getopt(ssh_session, int*, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:339</i>
	 */
	@Mangling({"_Z18ssh_options_getoptP18ssh_session_structPiPPc", "?ssh_options_getopt@@YAHPA18ssh_session_structPAHPAPAD@Z"}) 
	int ssh_options_getopt(SshLibrary.ssh_session session, IntBuffer argcptr, PointerByReference argv);
	/**
	 * Original signature : <code>int ssh_options_parse_config(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:340</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_parse_config(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_options_parse_config(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z24ssh_options_parse_configP18ssh_session_structPKc", "?ssh_options_parse_config@@YAHPA18ssh_session_structPAD@Z"}) 
	@Deprecated 
	int ssh_options_parse_config(SshLibrary.ssh_session session, Pointer filename);
	/**
	 * Original signature : <code>int ssh_options_parse_config(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:340</i>
	 */
	@Mangling({"_Z24ssh_options_parse_configP18ssh_session_structPKc", "?ssh_options_parse_config@@YAHPA18ssh_session_structPAD@Z"}) 
	int ssh_options_parse_config(SshLibrary.ssh_session session, String filename);
	/**
	 * Original signature : <code>int ssh_options_set(ssh_session, ssh_options_e, const void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:341</i><br>
	 * @param type @see ssh_options_e
	 */
	@Mangling({"_Z15ssh_options_setP18ssh_session_struct13ssh_options_ePKv", "?ssh_options_set@@YAHPA18ssh_session_struct13ssh_options_ePAX@Z"}) 
	int ssh_options_set(SshLibrary.ssh_session session, int type, Pointer value);
	/**
	 * Original signature : <code>int ssh_pcap_file_close(ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:343</i>
	 */
	@Mangling({"_Z19ssh_pcap_file_closeP20ssh_pcap_file_struct", "?ssh_pcap_file_close@@YAHPA20ssh_pcap_file_struct@Z"}) 
	int ssh_pcap_file_close(SshLibrary.ssh_pcap_file pcap);
	/**
	 * Original signature : <code>void ssh_pcap_file_free(ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:344</i>
	 */
	@Mangling({"_Z18ssh_pcap_file_freeP20ssh_pcap_file_struct", "?ssh_pcap_file_free@@YAXPA20ssh_pcap_file_struct@Z"}) 
	void ssh_pcap_file_free(SshLibrary.ssh_pcap_file pcap);
	/**
	 * Original signature : <code>ssh_pcap_file ssh_pcap_file_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:345</i>
	 */
	@Mangling({"_Z17ssh_pcap_file_newv", "?ssh_pcap_file_new@@YAPA20ssh_pcap_file_structXZ"}) 
	SshLibrary.ssh_pcap_file ssh_pcap_file_new();
	/**
	 * Original signature : <code>int ssh_pcap_file_open(ssh_pcap_file, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:346</i><br>
	 * @deprecated use the safer methods {@link #ssh_pcap_file_open(ssh.SshLibrary.ssh_pcap_file, java.lang.String)} and {@link #ssh_pcap_file_open(ssh.SshLibrary.ssh_pcap_file, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z18ssh_pcap_file_openP20ssh_pcap_file_structPKc", "?ssh_pcap_file_open@@YAHPA20ssh_pcap_file_structPAD@Z"}) 
	@Deprecated 
	int ssh_pcap_file_open(SshLibrary.ssh_pcap_file pcap, Pointer filename);
	/**
	 * Original signature : <code>int ssh_pcap_file_open(ssh_pcap_file, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:346</i>
	 */
	@Mangling({"_Z18ssh_pcap_file_openP20ssh_pcap_file_structPKc", "?ssh_pcap_file_open@@YAHPA20ssh_pcap_file_structPAD@Z"}) 
	int ssh_pcap_file_open(SshLibrary.ssh_pcap_file pcap, String filename);
	/**
	 * Original signature : <code>ssh_keytypes_e ssh_privatekey_type(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:348</i>
	 */
	@Mangling({"_Z19ssh_privatekey_typeP22ssh_private_key_struct", "?ssh_privatekey_type@@YA14ssh_keytypes_ePA22ssh_private_key_struct@Z"}) 
	/**
	 * @see ssh_keytypes_e
	 */int ssh_privatekey_type(SshLibrary.ssh_private_key privatekey);
	/**
	 * Original signature : <code>void ssh_print_hexa(const char*, const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:350</i><br>
	 * @deprecated use the safer methods {@link #ssh_print_hexa(java.lang.String, byte[], com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ssh_print_hexa(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Mangling({"_Z14ssh_print_hexaPKcPKh6size_t", "?ssh_print_hexa@@YAXPADPAE6size_t@Z"}) 
	@Deprecated 
	void ssh_print_hexa(Pointer descr, Pointer what, NativeSize len);
	/**
	 * Original signature : <code>void ssh_print_hexa(const char*, const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:350</i>
	 */
	@Mangling({"_Z14ssh_print_hexaPKcPKh6size_t", "?ssh_print_hexa@@YAXPADPAE6size_t@Z"}) 
	void ssh_print_hexa(String descr, byte what[], NativeSize len);
	/**
	 * Original signature : <code>int ssh_scp_accept_request(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:351</i>
	 */
	@Mangling({"_Z22ssh_scp_accept_requestP14ssh_scp_struct", "?ssh_scp_accept_request@@YAHPA14ssh_scp_struct@Z"}) 
	int ssh_scp_accept_request(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_close(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:352</i>
	 */
	@Mangling({"_Z13ssh_scp_closeP14ssh_scp_struct", "?ssh_scp_close@@YAHPA14ssh_scp_struct@Z"}) 
	int ssh_scp_close(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_deny_request(ssh_scp, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:353</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_deny_request(ssh.SshLibrary.ssh_scp, java.lang.String)} and {@link #ssh_scp_deny_request(ssh.SshLibrary.ssh_scp, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z20ssh_scp_deny_requestP14ssh_scp_structPKc", "?ssh_scp_deny_request@@YAHPA14ssh_scp_structPAD@Z"}) 
	@Deprecated 
	int ssh_scp_deny_request(SshLibrary.ssh_scp scp, Pointer reason);
	/**
	 * Original signature : <code>int ssh_scp_deny_request(ssh_scp, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:353</i>
	 */
	@Mangling({"_Z20ssh_scp_deny_requestP14ssh_scp_structPKc", "?ssh_scp_deny_request@@YAHPA14ssh_scp_structPAD@Z"}) 
	int ssh_scp_deny_request(SshLibrary.ssh_scp scp, String reason);
	/**
	 * Original signature : <code>void ssh_scp_free(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:354</i>
	 */
	@Mangling({"_Z12ssh_scp_freeP14ssh_scp_struct", "?ssh_scp_free@@YAXPA14ssh_scp_struct@Z"}) 
	void ssh_scp_free(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_init(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:355</i>
	 */
	@Mangling({"_Z12ssh_scp_initP14ssh_scp_struct", "?ssh_scp_init@@YAHPA14ssh_scp_struct@Z"}) 
	int ssh_scp_init(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_leave_directory(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:356</i>
	 */
	@Mangling({"_Z23ssh_scp_leave_directoryP14ssh_scp_struct", "?ssh_scp_leave_directory@@YAHPA14ssh_scp_struct@Z"}) 
	int ssh_scp_leave_directory(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>ssh_scp ssh_scp_new(ssh_session, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:357</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_new(ssh.SshLibrary.ssh_session, int, java.lang.String)} and {@link #ssh_scp_new(ssh.SshLibrary.ssh_session, int, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z11ssh_scp_newP18ssh_session_structiPKc", "?ssh_scp_new@@YAPA14ssh_scp_structPA18ssh_session_structHPAD@Z"}) 
	@Deprecated 
	SshLibrary.ssh_scp ssh_scp_new(SshLibrary.ssh_session session, int mode, Pointer location);
	/**
	 * Original signature : <code>ssh_scp ssh_scp_new(ssh_session, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:357</i>
	 */
	@Mangling({"_Z11ssh_scp_newP18ssh_session_structiPKc", "?ssh_scp_new@@YAPA14ssh_scp_structPA18ssh_session_structHPAD@Z"}) 
	SshLibrary.ssh_scp ssh_scp_new(SshLibrary.ssh_session session, int mode, String location);
	/**
	 * Original signature : <code>int ssh_scp_pull_request(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:358</i>
	 */
	@Mangling({"_Z20ssh_scp_pull_requestP14ssh_scp_struct", "?ssh_scp_pull_request@@YAHPA14ssh_scp_struct@Z"}) 
	int ssh_scp_pull_request(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_push_directory(ssh_scp, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:359</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_push_directory(ssh.SshLibrary.ssh_scp, java.lang.String, int)} and {@link #ssh_scp_push_directory(ssh.SshLibrary.ssh_scp, com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z22ssh_scp_push_directoryP14ssh_scp_structPKci", "?ssh_scp_push_directory@@YAHPA14ssh_scp_structPADH@Z"}) 
	@Deprecated 
	int ssh_scp_push_directory(SshLibrary.ssh_scp scp, Pointer dirname, int mode);
	/**
	 * Original signature : <code>int ssh_scp_push_directory(ssh_scp, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:359</i>
	 */
	@Mangling({"_Z22ssh_scp_push_directoryP14ssh_scp_structPKci", "?ssh_scp_push_directory@@YAHPA14ssh_scp_structPADH@Z"}) 
	int ssh_scp_push_directory(SshLibrary.ssh_scp scp, String dirname, int mode);
	/**
	 * Original signature : <code>int ssh_scp_push_file(ssh_scp, const char*, size_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:360</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_push_file(ssh.SshLibrary.ssh_scp, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} and {@link #ssh_scp_push_file(ssh.SshLibrary.ssh_scp, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} instead
	 */
	@Mangling({"_Z17ssh_scp_push_fileP14ssh_scp_structPKc6size_ti", "?ssh_scp_push_file@@YAHPA14ssh_scp_structPAD6size_tH@Z"}) 
	@Deprecated 
	int ssh_scp_push_file(SshLibrary.ssh_scp scp, Pointer filename, NativeSize size, int perms);
	/**
	 * Original signature : <code>int ssh_scp_push_file(ssh_scp, const char*, size_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:360</i>
	 */
	@Mangling({"_Z17ssh_scp_push_fileP14ssh_scp_structPKc6size_ti", "?ssh_scp_push_file@@YAHPA14ssh_scp_structPAD6size_tH@Z"}) 
	int ssh_scp_push_file(SshLibrary.ssh_scp scp, String filename, NativeSize size, int perms);
	/**
	 * Original signature : <code>int ssh_scp_read(ssh_scp, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:361</i>
	 */
	@Mangling({"_Z12ssh_scp_readP14ssh_scp_structPv6size_t", "?ssh_scp_read@@YAHPA14ssh_scp_structPAX6size_t@Z"}) 
	int ssh_scp_read(SshLibrary.ssh_scp scp, Pointer buffer, NativeSize size);
	/**
	 * Original signature : <code>char* ssh_scp_request_get_filename(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:362</i>
	 */
	@Mangling({"_Z28ssh_scp_request_get_filenameP14ssh_scp_struct", "?ssh_scp_request_get_filename@@YAQBDPA14ssh_scp_struct@Z"}) 
	String ssh_scp_request_get_filename(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_request_get_permissions(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:363</i>
	 */
	@Mangling({"_Z31ssh_scp_request_get_permissionsP14ssh_scp_struct", "?ssh_scp_request_get_permissions@@YAHPA14ssh_scp_struct@Z"}) 
	int ssh_scp_request_get_permissions(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>size_t ssh_scp_request_get_size(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:364</i>
	 */
	@Mangling({"_Z24ssh_scp_request_get_sizeP14ssh_scp_struct", "?ssh_scp_request_get_size@@YA6size_tPA14ssh_scp_struct@Z"}) 
	NativeSize ssh_scp_request_get_size(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>char* ssh_scp_request_get_warning(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:365</i>
	 */
	@Mangling({"_Z27ssh_scp_request_get_warningP14ssh_scp_struct", "?ssh_scp_request_get_warning@@YAQBDPA14ssh_scp_struct@Z"}) 
	String ssh_scp_request_get_warning(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_write(ssh_scp, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:366</i>
	 */
	@Mangling({"_Z13ssh_scp_writeP14ssh_scp_structPKv6size_t", "?ssh_scp_write@@YAHPA14ssh_scp_structPAX6size_t@Z"}) 
	int ssh_scp_write(SshLibrary.ssh_scp scp, Pointer buffer, NativeSize len);
	/**
	 * Original signature : <code>int ssh_select(ssh_channel*, ssh_channel*, socket_t, fd_set*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:367</i>
	 */
	@Mangling({"_Z10ssh_selectPP18ssh_channel_structPP18ssh_channel_struct6SOCKETP6fd_setP7timeval", "?ssh_select@@YAHPAPA18ssh_channel_structPAPA18ssh_channel_struct6SOCKETPAUfd_set@@PA7timeval@Z"}) 
	int ssh_select(PointerByReference channels, PointerByReference outchannels, SshLibrary.SOCKET maxfd, Pointer readfds, Pointer timeout);
	/**
	 * Original signature : <code>int ssh_service_request(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:369</i><br>
	 * @deprecated use the safer methods {@link #ssh_service_request(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_service_request(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z19ssh_service_requestP18ssh_session_structPKc", "?ssh_service_request@@YAHPA18ssh_session_structPAD@Z"}) 
	@Deprecated 
	int ssh_service_request(SshLibrary.ssh_session session, Pointer service);
	/**
	 * Original signature : <code>int ssh_service_request(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:369</i>
	 */
	@Mangling({"_Z19ssh_service_requestP18ssh_session_structPKc", "?ssh_service_request@@YAHPA18ssh_session_structPAD@Z"}) 
	int ssh_service_request(SshLibrary.ssh_session session, String service);
	/**
	 * Original signature : <code>void ssh_set_blocking(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:370</i>
	 */
	@Mangling({"_Z16ssh_set_blockingP18ssh_session_structi", "?ssh_set_blocking@@YAXPA18ssh_session_structH@Z"}) 
	void ssh_set_blocking(SshLibrary.ssh_session session, int blocking);
	/**
	 * Original signature : <code>void ssh_set_fd_except(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:371</i>
	 */
	@Mangling({"_Z17ssh_set_fd_exceptP18ssh_session_struct", "?ssh_set_fd_except@@YAXPA18ssh_session_struct@Z"}) 
	void ssh_set_fd_except(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_set_fd_toread(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:372</i>
	 */
	@Mangling({"_Z17ssh_set_fd_toreadP18ssh_session_struct", "?ssh_set_fd_toread@@YAXPA18ssh_session_struct@Z"}) 
	void ssh_set_fd_toread(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_set_fd_towrite(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:373</i>
	 */
	@Mangling({"_Z18ssh_set_fd_towriteP18ssh_session_struct", "?ssh_set_fd_towrite@@YAXPA18ssh_session_struct@Z"}) 
	void ssh_set_fd_towrite(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_silent_disconnect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:374</i>
	 */
	@Mangling({"_Z21ssh_silent_disconnectP18ssh_session_struct", "?ssh_silent_disconnect@@YAXPA18ssh_session_struct@Z"}) 
	void ssh_silent_disconnect(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_set_pcap_file(ssh_session, ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:375</i>
	 */
	@Mangling({"_Z17ssh_set_pcap_fileP18ssh_session_structP20ssh_pcap_file_struct", "?ssh_set_pcap_file@@YAHPA18ssh_session_structPA20ssh_pcap_file_struct@Z"}) 
	int ssh_set_pcap_file(SshLibrary.ssh_session session, SshLibrary.ssh_pcap_file pcapfile);
	/**
	 * Original signature : <code>int ssh_userauth_autopubkey(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:380</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_autopubkey(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_userauth_autopubkey(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z23ssh_userauth_autopubkeyP18ssh_session_structPKc", "?ssh_userauth_autopubkey@@YAHPA18ssh_session_structPAD@Z"}) 
	@Deprecated 
	int ssh_userauth_autopubkey(SshLibrary.ssh_session session, Pointer passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_autopubkey(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:380</i>
	 */
	@Mangling({"_Z23ssh_userauth_autopubkeyP18ssh_session_structPKc", "?ssh_userauth_autopubkey@@YAHPA18ssh_session_structPAD@Z"}) 
	int ssh_userauth_autopubkey(SshLibrary.ssh_session session, String passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:381</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint(ssh.SshLibrary.ssh_session, java.lang.String, java.lang.String)} and {@link #ssh_userauth_kbdint(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z19ssh_userauth_kbdintP18ssh_session_structPKcPKc", "?ssh_userauth_kbdint@@YAHPA18ssh_session_structPADPAD@Z"}) 
	@Deprecated 
	int ssh_userauth_kbdint(SshLibrary.ssh_session session, Pointer user, Pointer submethods);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:381</i>
	 */
	@Mangling({"_Z19ssh_userauth_kbdintP18ssh_session_structPKcPKc", "?ssh_userauth_kbdint@@YAHPA18ssh_session_structPADPAD@Z"}) 
	int ssh_userauth_kbdint(SshLibrary.ssh_session session, String user, String submethods);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getinstruction(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:382</i>
	 */
	@Mangling({"_Z34ssh_userauth_kbdint_getinstructionP18ssh_session_struct", "?ssh_userauth_kbdint_getinstruction@@YAQBDPA18ssh_session_struct@Z"}) 
	String ssh_userauth_kbdint_getinstruction(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getname(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:383</i>
	 */
	@Mangling({"_Z27ssh_userauth_kbdint_getnameP18ssh_session_struct", "?ssh_userauth_kbdint_getname@@YAQBDPA18ssh_session_struct@Z"}) 
	String ssh_userauth_kbdint_getname(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_getnprompts(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:384</i>
	 */
	@Mangling({"_Z31ssh_userauth_kbdint_getnpromptsP18ssh_session_struct", "?ssh_userauth_kbdint_getnprompts@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_userauth_kbdint_getnprompts(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getprompt(ssh_session, unsigned int, char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:385</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_getprompt(ssh.SshLibrary.ssh_session, int, java.nio.ByteBuffer)} and {@link #ssh_userauth_kbdint_getprompt(ssh.SshLibrary.ssh_session, int, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z29ssh_userauth_kbdint_getpromptP18ssh_session_structjPc", "?ssh_userauth_kbdint_getprompt@@YAQBDPA18ssh_session_structIPAD@Z"}) 
	@Deprecated 
	String ssh_userauth_kbdint_getprompt(SshLibrary.ssh_session session, int i, Pointer echo);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getprompt(ssh_session, unsigned int, char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:385</i>
	 */
	@Mangling({"_Z29ssh_userauth_kbdint_getpromptP18ssh_session_structjPc", "?ssh_userauth_kbdint_getprompt@@YAQBDPA18ssh_session_structIPAD@Z"}) 
	String ssh_userauth_kbdint_getprompt(SshLibrary.ssh_session session, int i, ByteBuffer echo);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_setanswer(ssh_session, unsigned int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:386</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_setanswer(ssh.SshLibrary.ssh_session, int, java.lang.String)} and {@link #ssh_userauth_kbdint_setanswer(ssh.SshLibrary.ssh_session, int, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z29ssh_userauth_kbdint_setanswerP18ssh_session_structjPKc", "?ssh_userauth_kbdint_setanswer@@YAHPA18ssh_session_structIPAD@Z"}) 
	@Deprecated 
	int ssh_userauth_kbdint_setanswer(SshLibrary.ssh_session session, int i, Pointer answer);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_setanswer(ssh_session, unsigned int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:386</i>
	 */
	@Mangling({"_Z29ssh_userauth_kbdint_setanswerP18ssh_session_structjPKc", "?ssh_userauth_kbdint_setanswer@@YAHPA18ssh_session_structIPAD@Z"}) 
	int ssh_userauth_kbdint_setanswer(SshLibrary.ssh_session session, int i, String answer);
	/**
	 * Original signature : <code>int ssh_userauth_list(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:388</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_list(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_userauth_list(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z17ssh_userauth_listP18ssh_session_structPKc", "?ssh_userauth_list@@YAHPA18ssh_session_structPAD@Z"}) 
	@Deprecated 
	int ssh_userauth_list(SshLibrary.ssh_session session, Pointer username);
	/**
	 * Original signature : <code>int ssh_userauth_list(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:388</i>
	 */
	@Mangling({"_Z17ssh_userauth_listP18ssh_session_structPKc", "?ssh_userauth_list@@YAHPA18ssh_session_structPAD@Z"}) 
	int ssh_userauth_list(SshLibrary.ssh_session session, String username);
	/**
	 * Original signature : <code>int ssh_userauth_none(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:389</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_none(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_userauth_none(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z17ssh_userauth_noneP18ssh_session_structPKc", "?ssh_userauth_none@@YAHPA18ssh_session_structPAD@Z"}) 
	@Deprecated 
	int ssh_userauth_none(SshLibrary.ssh_session session, Pointer username);
	/**
	 * Original signature : <code>int ssh_userauth_none(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:389</i>
	 */
	@Mangling({"_Z17ssh_userauth_noneP18ssh_session_structPKc", "?ssh_userauth_none@@YAHPA18ssh_session_structPAD@Z"}) 
	int ssh_userauth_none(SshLibrary.ssh_session session, String username);
	/**
	 * Original signature : <code>int ssh_userauth_offer_pubkey(ssh_session, const char*, int, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:390</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_offer_pubkey(ssh.SshLibrary.ssh_session, java.lang.String, int, ssh.SshLibrary.ssh_string)} and {@link #ssh_userauth_offer_pubkey(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, int, ssh.SshLibrary.ssh_string)} instead
	 */
	@Mangling({"_Z25ssh_userauth_offer_pubkeyP18ssh_session_structPKciP17ssh_string_struct", "?ssh_userauth_offer_pubkey@@YAHPA18ssh_session_structPADHPA17ssh_string_struct@Z"}) 
	@Deprecated 
	int ssh_userauth_offer_pubkey(SshLibrary.ssh_session session, Pointer username, int type, SshLibrary.ssh_string publickey);
	/**
	 * Original signature : <code>int ssh_userauth_offer_pubkey(ssh_session, const char*, int, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:390</i>
	 */
	@Mangling({"_Z25ssh_userauth_offer_pubkeyP18ssh_session_structPKciP17ssh_string_struct", "?ssh_userauth_offer_pubkey@@YAHPA18ssh_session_structPADHPA17ssh_string_struct@Z"}) 
	int ssh_userauth_offer_pubkey(SshLibrary.ssh_session session, String username, int type, SshLibrary.ssh_string publickey);
	/**
	 * Original signature : <code>int ssh_userauth_password(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:391</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_password(ssh.SshLibrary.ssh_session, java.lang.String, java.lang.String)} and {@link #ssh_userauth_password(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z21ssh_userauth_passwordP18ssh_session_structPKcPKc", "?ssh_userauth_password@@YAHPA18ssh_session_structPADPAD@Z"}) 
	@Deprecated 
	int ssh_userauth_password(SshLibrary.ssh_session session, Pointer username, Pointer password);
	/**
	 * Original signature : <code>int ssh_userauth_password(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:391</i>
	 */
	@Mangling({"_Z21ssh_userauth_passwordP18ssh_session_structPKcPKc", "?ssh_userauth_password@@YAHPA18ssh_session_structPADPAD@Z"}) 
	int ssh_userauth_password(SshLibrary.ssh_session session, String username, String password);
	/**
	 * Original signature : <code>int ssh_userauth_pubkey(ssh_session, const char*, ssh_string, ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:392</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_pubkey(ssh.SshLibrary.ssh_session, java.lang.String, ssh.SshLibrary.ssh_string, ssh.SshLibrary.ssh_private_key)} and {@link #ssh_userauth_pubkey(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, ssh.SshLibrary.ssh_string, ssh.SshLibrary.ssh_private_key)} instead
	 */
	@Mangling({"_Z19ssh_userauth_pubkeyP18ssh_session_structPKcP17ssh_string_structP22ssh_private_key_struct", "?ssh_userauth_pubkey@@YAHPA18ssh_session_structPADPA17ssh_string_structPA22ssh_private_key_struct@Z"}) 
	@Deprecated 
	int ssh_userauth_pubkey(SshLibrary.ssh_session session, Pointer username, SshLibrary.ssh_string publickey, SshLibrary.ssh_private_key privatekey);
	/**
	 * Original signature : <code>int ssh_userauth_pubkey(ssh_session, const char*, ssh_string, ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:392</i>
	 */
	@Mangling({"_Z19ssh_userauth_pubkeyP18ssh_session_structPKcP17ssh_string_structP22ssh_private_key_struct", "?ssh_userauth_pubkey@@YAHPA18ssh_session_structPADPA17ssh_string_structPA22ssh_private_key_struct@Z"}) 
	int ssh_userauth_pubkey(SshLibrary.ssh_session session, String username, SshLibrary.ssh_string publickey, SshLibrary.ssh_private_key privatekey);
	/**
	 * Original signature : <code>int ssh_userauth_privatekey_file(ssh_session, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:393</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_privatekey_file(ssh.SshLibrary.ssh_session, java.lang.String, java.lang.String, java.lang.String)} and {@link #ssh_userauth_privatekey_file(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z28ssh_userauth_privatekey_fileP18ssh_session_structPKcPKcPKc", "?ssh_userauth_privatekey_file@@YAHPA18ssh_session_structPADPADPAD@Z"}) 
	@Deprecated 
	int ssh_userauth_privatekey_file(SshLibrary.ssh_session session, Pointer username, Pointer filename, Pointer passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_privatekey_file(ssh_session, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:393</i>
	 */
	@Mangling({"_Z28ssh_userauth_privatekey_fileP18ssh_session_structPKcPKcPKc", "?ssh_userauth_privatekey_file@@YAHPA18ssh_session_structPADPADPAD@Z"}) 
	int ssh_userauth_privatekey_file(SshLibrary.ssh_session session, String username, String filename, String passphrase);
	/**
	 * Original signature : <code>char* ssh_version(int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:395</i>
	 */
	@Mangling({"_Z11ssh_versioni", "?ssh_version@@YAQBDH@Z"}) 
	String ssh_version(int req_version);
	/**
	 * Original signature : <code>int ssh_write_knownhost(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:396</i>
	 */
	@Mangling({"_Z19ssh_write_knownhostP18ssh_session_struct", "?ssh_write_knownhost@@YAHPA18ssh_session_struct@Z"}) 
	int ssh_write_knownhost(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_string_burn(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:398</i>
	 */
	@Mangling({"_Z15ssh_string_burnP17ssh_string_struct", "?ssh_string_burn@@YAXPA17ssh_string_struct@Z"}) 
	void ssh_string_burn(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string ssh_string_copy(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:399</i>
	 */
	@Mangling({"_Z15ssh_string_copyP17ssh_string_struct", "?ssh_string_copy@@YAPA17ssh_string_structPA17ssh_string_struct@Z"}) 
	SshLibrary.ssh_string ssh_string_copy(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>void* ssh_string_data(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:400</i>
	 */
	@Mangling({"_Z15ssh_string_dataP17ssh_string_struct", "?ssh_string_data@@YAPAXPA17ssh_string_struct@Z"}) 
	Pointer ssh_string_data(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>int ssh_string_fill(ssh_string, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:401</i>
	 */
	@Mangling({"_Z15ssh_string_fillP17ssh_string_structPKv6size_t", "?ssh_string_fill@@YAHPA17ssh_string_structPAX6size_t@Z"}) 
	int ssh_string_fill(SshLibrary.ssh_string str, Pointer data, NativeSize len);
	/**
	 * Original signature : <code>void ssh_string_free(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:402</i>
	 */
	@Mangling({"_Z15ssh_string_freeP17ssh_string_struct", "?ssh_string_free@@YAXPA17ssh_string_struct@Z"}) 
	void ssh_string_free(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string ssh_string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:403</i><br>
	 * @deprecated use the safer methods {@link #ssh_string_from_char(java.lang.String)} and {@link #ssh_string_from_char(com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z20ssh_string_from_charPKc", "?ssh_string_from_char@@YAPA17ssh_string_structPAD@Z"}) 
	@Deprecated 
	SshLibrary.ssh_string ssh_string_from_char(Pointer what);
	/**
	 * Original signature : <code>ssh_string ssh_string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:403</i>
	 */
	@Mangling({"_Z20ssh_string_from_charPKc", "?ssh_string_from_char@@YAPA17ssh_string_structPAD@Z"}) 
	SshLibrary.ssh_string ssh_string_from_char(String what);
	/**
	 * Original signature : <code>size_t ssh_string_len(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:404</i>
	 */
	@Mangling({"_Z14ssh_string_lenP17ssh_string_struct", "?ssh_string_len@@YA6size_tPA17ssh_string_struct@Z"}) 
	NativeSize ssh_string_len(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string ssh_string_new(size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:405</i>
	 */
	@Mangling({"_Z14ssh_string_new6size_t", "?ssh_string_new@@YAPA17ssh_string_struct6size_t@Z"}) 
	SshLibrary.ssh_string ssh_string_new(NativeSize size);
	/**
	 * Original signature : <code>char* ssh_string_to_char(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:406</i>
	 */
	@Mangling({"_Z18ssh_string_to_charP17ssh_string_struct", "?ssh_string_to_char@@YAPADPA17ssh_string_struct@Z"}) 
	Pointer ssh_string_to_char(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>void ssh_string_free_char(char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:407</i><br>
	 * @deprecated use the safer methods {@link #ssh_string_free_char(java.nio.ByteBuffer)} and {@link #ssh_string_free_char(com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z20ssh_string_free_charPc", "?ssh_string_free_char@@YAXPAD@Z"}) 
	@Deprecated 
	void ssh_string_free_char(Pointer s);
	/**
	 * Original signature : <code>void ssh_string_free_char(char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:407</i>
	 */
	@Mangling({"_Z20ssh_string_free_charPc", "?ssh_string_free_char@@YAXPAD@Z"}) 
	void ssh_string_free_char(ByteBuffer s);
	/**
	 * Original signature : <code>int ssh_getpass(const char*, char*, size_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:409</i><br>
	 * @deprecated use the safer methods {@link #ssh_getpass(java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, int)} and {@link #ssh_getpass(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, int)} instead
	 */
	@Mangling({"_Z11ssh_getpassPKcPc6size_tii", "?ssh_getpass@@YAHPADPAD6size_tHH@Z"}) 
	@Deprecated 
	int ssh_getpass(Pointer prompt, Pointer buf, NativeSize len, int echo, int verify);
	/**
	 * Original signature : <code>int ssh_getpass(const char*, char*, size_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:409</i>
	 */
	@Mangling({"_Z11ssh_getpassPKcPc6size_tii", "?ssh_getpass@@YAHPADPAD6size_tHH@Z"}) 
	int ssh_getpass(String prompt, ByteBuffer buf, NativeSize len, int echo, int verify);
	/**
	 * @brief Start a new sftp session.<br>
	 * * @param session       The ssh session to use.<br>
	 * * @return              A new sftp session or NULL on error.<br>
	 * Original signature : <code>sftp_session sftp_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:199</i>
	 */
	sftp_session_struct sftp_new(SshLibrary.ssh_session session);
	/**
	 * @brief Close and deallocate a sftp session.<br>
	 * * @param sftp          The sftp session handle to free.<br>
	 * Original signature : <code>void sftp_free(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:206</i>
	 */
	void sftp_free(sftp_session_struct sftp);
	/**
	 * @brief Initialize the sftp session with the server.<br>
	 * * @param sftp          The sftp session to initialize.<br>
	 * * @return              0 on success, < 0 on error with ssh error set.<br>
	 * Original signature : <code>int sftp_init(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:215</i>
	 */
	int sftp_init(sftp_session_struct sftp);
	/**
	 * @brief Get the last sftp error.<br>
	 * * Use this function to get the latest error set by a posix like sftp function.<br>
	 * * @param sftp          The sftp session where the error is saved.<br>
	 * * @return              The saved error (see server responses), < 0 if an error<br>
	 *                      in the function occured.<br>
	 * Original signature : <code>int sftp_get_error(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:227</i>
	 */
	int sftp_get_error(sftp_session_struct sftp);
	/**
	 * @brief Get the count of extensions provided by the server.<br>
	 * * @param  sftp         The sftp session to use.<br>
	 * * @return The count of extensions provided by the server, 0 on error or<br>
	 *         not available.<br>
	 * Original signature : <code>int sftp_extensions_get_count(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:237</i>
	 */
	int sftp_extensions_get_count(sftp_session_struct sftp);
	/**
	 * @brief Get the name of the extension provided by the server.<br>
	 * * @param  sftp         The sftp session to use.<br>
	 * * @param  indexn        The index number of the extension name you want.<br>
	 * * @return              The name of the extension.<br>
	 * Original signature : <code>char* sftp_extensions_get_name(sftp_session, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:248</i>
	 */
	String sftp_extensions_get_name(sftp_session_struct sftp, int indexn);
	/**
	 * @brief Get the data of the extension provided by the server.<br>
	 * * This is normally the version number of the extension.<br>
	 * * @param  sftp         The sftp session to use.<br>
	 * * @param  indexn        The index number of the extension data you want.<br>
	 * * @return              The data of the extension.<br>
	 * Original signature : <code>char* sftp_extensions_get_data(sftp_session, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:261</i>
	 */
	String sftp_extensions_get_data(sftp_session_struct sftp, int indexn);
	/**
	 * @brief Check if the given extension is supported.<br>
	 * * @param  sftp         The sftp session to use.<br>
	 * * @param  name         The name of the extension.<br>
	 * * @param  data         The data of the extension.<br>
	 * * @return 1 if supported, 0 if not.<br>
	 * * Example:<br>
	 * * @code<br>
	 * sftp_extension_supported(sftp, "statvfs@openssh.com", "2");<br>
	 * @endcode<br>
	 * Original signature : <code>int sftp_extension_supported(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:280</i><br>
	 * @deprecated use the safer methods {@link #sftp_extension_supported(ssh.sftp_session_struct, java.lang.String, java.lang.String)} and {@link #sftp_extension_supported(ssh.sftp_session_struct, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_extension_supported(sftp_session_struct sftp, Pointer name, Pointer data);
	/**
	 * @brief Check if the given extension is supported.<br>
	 * * @param  sftp         The sftp session to use.<br>
	 * * @param  name         The name of the extension.<br>
	 * * @param  data         The data of the extension.<br>
	 * * @return 1 if supported, 0 if not.<br>
	 * * Example:<br>
	 * * @code<br>
	 * sftp_extension_supported(sftp, "statvfs@openssh.com", "2");<br>
	 * @endcode<br>
	 * Original signature : <code>int sftp_extension_supported(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:280</i>
	 */
	int sftp_extension_supported(sftp_session_struct sftp, String name, String data);
	/**
	 * @brief Open a directory used to obtain directory entries.<br>
	 * @param session       The sftp session handle to open the directory.<br>
	 * @param path          The path of the directory to open.<br>
	 * * @return              A sftp directory handle or NULL on error with ssh and<br>
	 *                      sftp error set.<br>
	 * * @see                 sftp_readdir<br>
	 * @see                 sftp_closedir<br>
	 * Original signature : <code>sftp_dir sftp_opendir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:295</i><br>
	 * @deprecated use the safer methods {@link #sftp_opendir(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_opendir(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_dir_struct sftp_opendir(sftp_session_struct session, Pointer path);
	/**
	 * @brief Open a directory used to obtain directory entries.<br>
	 * @param session       The sftp session handle to open the directory.<br>
	 * @param path          The path of the directory to open.<br>
	 * * @return              A sftp directory handle or NULL on error with ssh and<br>
	 *                      sftp error set.<br>
	 * * @see                 sftp_readdir<br>
	 * @see                 sftp_closedir<br>
	 * Original signature : <code>sftp_dir sftp_opendir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:295</i>
	 */
	sftp_dir_struct sftp_opendir(sftp_session_struct session, String path);
	/**
	 * @brief Get a single file attributes structure of a directory.<br>
	 * * @param session      The sftp session handle to read the directory entry.<br>
	 * @param dir          The opened sftp directory handle to read from.<br>
	 * * @return             A file attribute structure or NULL at the end of the<br>
	 *                     directory.<br>
	 * * @see                sftp_opendir()<br>
	 * @see                sftp_attribute_free()<br>
	 * @see                sftp_closedir()<br>
	 * Original signature : <code>sftp_attributes sftp_readdir(sftp_session, sftp_dir)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:310</i>
	 */
	sftp_attributes_struct sftp_readdir(sftp_session_struct session, sftp_dir_struct dir);
	/**
	 * @brief Tell if the directory has reached EOF (End Of File).<br>
	 * * @param dir           The sftp directory handle.<br>
	 * * @return              1 if the directory is EOF, 0 if not.<br>
	 * * @see                 sftp_readdir()<br>
	 * Original signature : <code>int sftp_dir_eof(sftp_dir)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:321</i>
	 */
	int sftp_dir_eof(sftp_dir_struct dir);
	/**
	 * @brief Get information about a file or directory.<br>
	 * * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * Original signature : <code>sftp_attributes sftp_stat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:333</i><br>
	 * @deprecated use the safer methods {@link #sftp_stat(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_stat(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_attributes_struct sftp_stat(sftp_session_struct session, Pointer path);
	/**
	 * @brief Get information about a file or directory.<br>
	 * * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * Original signature : <code>sftp_attributes sftp_stat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:333</i>
	 */
	sftp_attributes_struct sftp_stat(sftp_session_struct session, String path);
	/**
	 * @brief Get information about a file or directory.<br>
	 * * Identical to sftp_stat, but if the file or directory is a symbolic link,<br>
	 * then the link itself is stated, not the file that it refers to.<br>
	 * * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * Original signature : <code>sftp_attributes sftp_lstat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:348</i><br>
	 * @deprecated use the safer methods {@link #sftp_lstat(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_lstat(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_attributes_struct sftp_lstat(sftp_session_struct session, Pointer path);
	/**
	 * @brief Get information about a file or directory.<br>
	 * * Identical to sftp_stat, but if the file or directory is a symbolic link,<br>
	 * then the link itself is stated, not the file that it refers to.<br>
	 * * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * Original signature : <code>sftp_attributes sftp_lstat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:348</i>
	 */
	sftp_attributes_struct sftp_lstat(sftp_session_struct session, String path);
	/**
	 * @brief Get information about a file or directory from a file handle.<br>
	 * * @param file          The sftp file handle to get the stat information.<br>
	 * * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * Original signature : <code>sftp_attributes sftp_fstat(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:358</i>
	 */
	sftp_attributes_struct sftp_fstat(sftp_file_struct file);
	/**
	 * @brief Free a sftp attribute structure.<br>
	 * * @param file          The sftp attribute structure to free.<br>
	 * Original signature : <code>void sftp_attributes_free(sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:365</i>
	 */
	void sftp_attributes_free(sftp_attributes_struct file);
	/**
	 * @brief Close a directory handle opened by sftp_opendir().<br>
	 * * @param dir           The sftp directory handle to close.<br>
	 * * @return              Returns SSH_NO_ERROR or SSH_ERROR if an error occured.<br>
	 * Original signature : <code>int sftp_closedir(sftp_dir)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:374</i>
	 */
	int sftp_closedir(sftp_dir_struct dir);
	/**
	 * @brief Close an open file handle.<br>
	 * * @param file          The open sftp file handle to close.<br>
	 * * @return              Returns SSH_NO_ERROR or SSH_ERROR if an error occured.<br>
	 * * @see                 sftp_open()<br>
	 * Original signature : <code>int sftp_close(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:385</i>
	 */
	int sftp_close(sftp_file_struct file);
	/**
	 * @brief Open a file on the server.<br>
	 * * @param session       The sftp session handle.<br>
	 * * @param file          The file to be opened.<br>
	 * * @param accesstype        Is one of O_RDONLY, O_WRONLY or O_RDWR which request<br>
	 *                      opening  the  file  read-only,write-only or read/write.<br>
	 *                      Acesss may also be bitwise-or'd with one or  more of<br>
	 *                      the following:<br>
	 *                      O_CREAT - If the file does not exist it will be<br>
	 *                      created.<br>
	 *                      O_EXCL - When  used with O_CREAT, if the file already<br>
	 *                      exists it is an error and the open will fail.<br>
	 *                      O_TRUNC - If the file already exists it will be<br>
	 *                      truncated.<br>
	 * * @param mode          Mode specifies the permissions to use if a new file is<br>
	 *                      created.  It  is  modified  by  the process's umask in<br>
	 *                      the usual way: The permissions of the created file are<br>
	 *                      (mode & ~umask)<br>
	 * * @return              A sftp file handle, NULL on error with ssh and sftp<br>
	 *                      error set.<br>
	 * Original signature : <code>sftp_file sftp_open(sftp_session, const char*, int, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:413</i><br>
	 * @deprecated use the safer methods {@link #sftp_open(ssh.sftp_session_struct, java.lang.String, int, int)} and {@link #sftp_open(ssh.sftp_session_struct, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	sftp_file_struct sftp_open(sftp_session_struct session, Pointer file, int accesstype, int mode);
	/**
	 * @brief Open a file on the server.<br>
	 * * @param session       The sftp session handle.<br>
	 * * @param file          The file to be opened.<br>
	 * * @param accesstype        Is one of O_RDONLY, O_WRONLY or O_RDWR which request<br>
	 *                      opening  the  file  read-only,write-only or read/write.<br>
	 *                      Acesss may also be bitwise-or'd with one or  more of<br>
	 *                      the following:<br>
	 *                      O_CREAT - If the file does not exist it will be<br>
	 *                      created.<br>
	 *                      O_EXCL - When  used with O_CREAT, if the file already<br>
	 *                      exists it is an error and the open will fail.<br>
	 *                      O_TRUNC - If the file already exists it will be<br>
	 *                      truncated.<br>
	 * * @param mode          Mode specifies the permissions to use if a new file is<br>
	 *                      created.  It  is  modified  by  the process's umask in<br>
	 *                      the usual way: The permissions of the created file are<br>
	 *                      (mode & ~umask)<br>
	 * * @return              A sftp file handle, NULL on error with ssh and sftp<br>
	 *                      error set.<br>
	 * Original signature : <code>sftp_file sftp_open(sftp_session, const char*, int, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:413</i>
	 */
	sftp_file_struct sftp_open(sftp_session_struct session, String file, int accesstype, int mode);
	/**
	 * Original signature : <code>void sftp_file_set_nonblocking(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:416</i>
	 */
	void sftp_file_set_nonblocking(sftp_file_struct handle);
	/**
	 * Original signature : <code>void sftp_file_set_blocking(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:418</i>
	 */
	void sftp_file_set_blocking(sftp_file_struct handle);
	/**
	 * @brief Read from a file using an opened sftp file handle.<br>
	 * * @param file          The opened sftp file handle to be read from.<br>
	 * * @param buf           Pointer to buffer to recieve read data.<br>
	 * * @param count         Size of the buffer in bytes.<br>
	 * * @return              Number of bytes written, < 0 on error with ssh and sftp<br>
	 *                      error set.<br>
	 * Original signature : <code>ssize_t sftp_read(sftp_file, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:432</i>
	 */
	int sftp_read(sftp_file_struct file, Pointer buf, NativeSize count);
	/**
	 * @brief Start an asynchronous read from a file using an opened sftp file handle.<br>
	 * * Its goal is to avoid the slowdowns related to the request/response pattern<br>
	 * of a synchronous read. To do so, you must call 2 functions:<br>
	 * * sftp_async_read_begin() and sftp_async_read().<br>
	 * * The first step is to call sftp_async_read_begin(). This function returns a<br>
	 * request identifier. The second step is to call sftp_async_read() using the<br>
	 * returned identifier.<br>
	 * * @param file          The opened sftp file handle to be read from.<br>
	 * * @param len           Size to read in bytes.<br>
	 * * @return              An identifier corresponding to the sent request, < 0 on<br>
	 *                      error.<br>
	 * * @warning             When calling this function, the internal offset is<br>
	 *                      updated corresponding to the len parameter.<br>
	 * * @warning             A call to sftp_async_read_begin() sends a request to<br>
	 *                      the server. When the server answers, libssh allocates<br>
	 *                      memory to store it until sftp_async_read() is called.<br>
	 *                      Not calling sftp_async_read() will lead to memory<br>
	 *                      leaks.<br>
	 * * @see                 sftp_async_read()<br>
	 * @see                 sftp_open()<br>
	 * Original signature : <code>int sftp_async_read_begin(sftp_file, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:465</i>
	 */
	int sftp_async_read_begin(sftp_file_struct file, int len);
	/**
	 * @brief Wait for an asynchronous read to complete and save the data.<br>
	 * * @param file          The opened sftp file handle to be read from.<br>
	 * * @param data          Pointer to buffer to recieve read data.<br>
	 * * @param len           Size of the buffer in bytes. It should be bigger or<br>
	 *                      equal to the length parameter of the<br>
	 *                      sftp_async_read_begin() call.<br>
	 * * @param id            The identifier returned by the sftp_async_read_begin()<br>
	 *                      function.<br>
	 * * @return              Number of bytes read, 0 on EOF, SSH_ERROR if an error<br>
	 *                      occured, SSH_AGAIN if the file is opened in nonblocking<br>
	 *                      mode and the request hasn't been executed yet.<br>
	 * * @warning             A call to this function with an invalid identifier<br>
	 *                      will never return.<br>
	 * * @see sftp_async_read_begin()<br>
	 * Original signature : <code>int sftp_async_read(sftp_file, void*, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:490</i>
	 */
	int sftp_async_read(sftp_file_struct file, Pointer data, int len, int id);
	/**
	 * @brief Write to a file using an opened sftp file handle.<br>
	 * * @param file          Open sftp file handle to write to.<br>
	 * * @param buf           Pointer to buffer to write data.<br>
	 * * @param count         Size of buffer in bytes.<br>
	 * * @return              Number of bytes written, < 0 on error with ssh and sftp<br>
	 *                      error set.<br>
	 * * @see                 sftp_open()<br>
	 * @see                 sftp_read()<br>
	 * @see                 sftp_close()<br>
	 * Original signature : <code>ssize_t sftp_write(sftp_file, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:508</i>
	 */
	int sftp_write(sftp_file_struct file, Pointer buf, NativeSize count);
	/**
	 * @brief Seek to a specific location in a file.<br>
	 * * @param file         Open sftp file handle to seek in.<br>
	 * * @param new_offset   Offset in bytes to seek.<br>
	 * * @return             0 on success, < 0 on error.<br>
	 * Original signature : <code>int sftp_seek(sftp_file, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:519</i>
	 */
	int sftp_seek(sftp_file_struct file, int new_offset);
	/**
	 * @brief Seek to a specific location in a file. This is the<br>
	 * 64bit version.<br>
	 * * @param file         Open sftp file handle to seek in.<br>
	 * * @param new_offset   Offset in bytes to seek.<br>
	 * * @return             0 on success, < 0 on error.<br>
	 * Original signature : <code>int sftp_seek64(sftp_file, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:531</i>
	 */
	int sftp_seek64(sftp_file_struct file, long new_offset);
	/**
	 * @brief Report current byte position in file.<br>
	 * * @param file          Open sftp file handle.<br>
	 * * @return              The offset of the current byte relative to the beginning<br>
	 *                      of the file associated with the file descriptor. < 0 on<br>
	 *                      error.<br>
	 * Original signature : <code>sftp_tell(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:542</i>
	 */
	int sftp_tell(sftp_file_struct file);
	/**
	 * @brief Report current byte position in file.<br>
	 * * @param file          Open sftp file handle.<br>
	 * * @return              The offset of the current byte relative to the beginning<br>
	 *                      of the file associated with the file descriptor. < 0 on<br>
	 *                      error.<br>
	 * Original signature : <code>uint64_t sftp_tell64(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:553</i>
	 */
	long sftp_tell64(sftp_file_struct file);
	/**
	 * @brief Rewinds the position of the file pointer to the beginning of the<br>
	 * file.<br>
	 * * @param file          Open sftp file handle.<br>
	 * Original signature : <code>void sftp_rewind(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:561</i>
	 */
	void sftp_rewind(sftp_file_struct file);
	/**
	 * @brief Unlink (delete) a file.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file to unlink/delete.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_unlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:572</i><br>
	 * @deprecated use the safer methods {@link #sftp_unlink(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_unlink(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_unlink(sftp_session_struct sftp, Pointer file);
	/**
	 * @brief Unlink (delete) a file.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file to unlink/delete.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_unlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:572</i>
	 */
	int sftp_unlink(sftp_session_struct sftp, String file);
	/**
	 * @brief Remove a directoy.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param directory     The directory to remove.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_rmdir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:583</i><br>
	 * @deprecated use the safer methods {@link #sftp_rmdir(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_rmdir(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_rmdir(sftp_session_struct sftp, Pointer directory);
	/**
	 * @brief Remove a directoy.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param directory     The directory to remove.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_rmdir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:583</i>
	 */
	int sftp_rmdir(sftp_session_struct sftp, String directory);
	/**
	 * @brief Create a directory.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param directory     The directory to create.<br>
	 * * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_mkdir(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:598</i><br>
	 * @deprecated use the safer methods {@link #sftp_mkdir(ssh.sftp_session_struct, java.lang.String, int)} and {@link #sftp_mkdir(ssh.sftp_session_struct, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int sftp_mkdir(sftp_session_struct sftp, Pointer directory, int mode);
	/**
	 * @brief Create a directory.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param directory     The directory to create.<br>
	 * * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_mkdir(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:598</i>
	 */
	int sftp_mkdir(sftp_session_struct sftp, String directory, int mode);
	/**
	 * @brief Rename or move a file or directory.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param original      The original url (source url) of file or directory to<br>
	 *                      be moved.<br>
	 * * @param newname       The new url (destination url) of the file or directory<br>
	 *                      after the move.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_rename(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:613</i><br>
	 * @deprecated use the safer methods {@link #sftp_rename(ssh.sftp_session_struct, java.lang.String, java.lang.String)} and {@link #sftp_rename(ssh.sftp_session_struct, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_rename(sftp_session_struct sftp, Pointer original, Pointer newname);
	/**
	 * @brief Rename or move a file or directory.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param original      The original url (source url) of file or directory to<br>
	 *                      be moved.<br>
	 * * @param newname       The new url (destination url) of the file or directory<br>
	 *                      after the move.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_rename(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:613</i>
	 */
	int sftp_rename(sftp_session_struct sftp, String original, String newname);
	/**
	 * @brief Set file attributes on a file, directory or symbolic link.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which attributes should be changed.<br>
	 * * @param attr          The file attributes structure with the attributes set<br>
	 *                      which should be changed.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_setstat(sftp_session, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:627</i><br>
	 * @deprecated use the safer methods {@link #sftp_setstat(ssh.sftp_session_struct, java.lang.String, ssh.sftp_attributes_struct)} and {@link #sftp_setstat(ssh.sftp_session_struct, com.sun.jna.Pointer, ssh.sftp_attributes_struct)} instead
	 */
	@Deprecated 
	int sftp_setstat(sftp_session_struct sftp, Pointer file, sftp_attributes_struct attr);
	/**
	 * @brief Set file attributes on a file, directory or symbolic link.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which attributes should be changed.<br>
	 * * @param attr          The file attributes structure with the attributes set<br>
	 *                      which should be changed.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_setstat(sftp_session, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:627</i>
	 */
	int sftp_setstat(sftp_session_struct sftp, String file, sftp_attributes_struct attr);
	/**
	 * @brief Change the file owner and group<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which owner and group should be changed.<br>
	 * * @param owner         The new owner which should be set.<br>
	 * * @param group         The new group which should be set.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_chown(sftp_session, const char*, uid_t, gid_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:642</i><br>
	 * @deprecated use the safer methods {@link #sftp_chown(ssh.sftp_session_struct, java.lang.String, int, int)} and {@link #sftp_chown(ssh.sftp_session_struct, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int sftp_chown(sftp_session_struct sftp, Pointer file, int owner, int group);
	/**
	 * @brief Change the file owner and group<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which owner and group should be changed.<br>
	 * * @param owner         The new owner which should be set.<br>
	 * * @param group         The new group which should be set.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_chown(sftp_session, const char*, uid_t, gid_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:642</i>
	 */
	int sftp_chown(sftp_session_struct sftp, String file, int owner, int group);
	/**
	 * @brief Change permissions of a file<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which owner and group should be changed.<br>
	 * * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_chmod(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:657</i><br>
	 * @deprecated use the safer methods {@link #sftp_chmod(ssh.sftp_session_struct, java.lang.String, int)} and {@link #sftp_chmod(ssh.sftp_session_struct, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int sftp_chmod(sftp_session_struct sftp, Pointer file, int mode);
	/**
	 * @brief Change permissions of a file<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which owner and group should be changed.<br>
	 * * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_chmod(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:657</i>
	 */
	int sftp_chmod(sftp_session_struct sftp, String file, int mode);
	/**
	 * @brief Change the last modification and access time of a file.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which owner and group should be changed.<br>
	 * * @param times         A timeval structure which contains the desired access<br>
	 *                      and modification time.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_utimes(sftp_session, const char*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:671</i><br>
	 * @deprecated use the safer methods {@link #sftp_utimes(ssh.sftp_session_struct, java.lang.String, com.sun.jna.Pointer)} and {@link #sftp_utimes(ssh.sftp_session_struct, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_utimes(sftp_session_struct sftp, Pointer file, Pointer times);
	/**
	 * @brief Change the last modification and access time of a file.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param file          The file which owner and group should be changed.<br>
	 * * @param times         A timeval structure which contains the desired access<br>
	 *                      and modification time.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_utimes(sftp_session, const char*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:671</i>
	 */
	int sftp_utimes(sftp_session_struct sftp, String file, Pointer times);
	/**
	 * @brief Create a symbolic link.<br>
	 * * @param  sftp         The sftp session handle.<br>
	 * * @param  target       Specifies the target of the symlink.<br>
	 * * @param  dest         Specifies the path name of the symlink to be created.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_symlink(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:684</i><br>
	 * @deprecated use the safer methods {@link #sftp_symlink(ssh.sftp_session_struct, java.lang.String, java.lang.String)} and {@link #sftp_symlink(ssh.sftp_session_struct, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_symlink(sftp_session_struct sftp, Pointer target, Pointer dest);
	/**
	 * @brief Create a symbolic link.<br>
	 * * @param  sftp         The sftp session handle.<br>
	 * * @param  target       Specifies the target of the symlink.<br>
	 * * @param  dest         Specifies the path name of the symlink to be created.<br>
	 * * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_symlink(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:684</i>
	 */
	int sftp_symlink(sftp_session_struct sftp, String target, String dest);
	/**
	 * @brief Read the value of a symbolic link.<br>
	 * * @param  sftp         The sftp session handle.<br>
	 * * @param  path         Specifies the path name of the symlink to be read.<br>
	 * * @return              The target of the link, NULL on error.<br>
	 * Original signature : <code>char* sftp_readlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:695</i><br>
	 * @deprecated use the safer methods {@link #sftp_readlink(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_readlink(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer sftp_readlink(sftp_session_struct sftp, Pointer path);
	/**
	 * @brief Read the value of a symbolic link.<br>
	 * * @param  sftp         The sftp session handle.<br>
	 * * @param  path         Specifies the path name of the symlink to be read.<br>
	 * * @return              The target of the link, NULL on error.<br>
	 * Original signature : <code>char* sftp_readlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:695</i>
	 */
	Pointer sftp_readlink(sftp_session_struct sftp, String path);
	/**
	 * @brief Get information about a mounted file system.<br>
	 * * @param  sftp         The sftp session handle.<br>
	 * * @param  path         The pathname of any file within the mounted file system.<br>
	 * * @return A statvfs structure or NULL on error.<br>
	 * Original signature : <code>sftp_statvfs_t sftp_statvfs(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:706</i><br>
	 * @deprecated use the safer methods {@link #sftp_statvfs(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_statvfs(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_statvfs_struct sftp_statvfs(sftp_session_struct sftp, Pointer path);
	/**
	 * @brief Get information about a mounted file system.<br>
	 * * @param  sftp         The sftp session handle.<br>
	 * * @param  path         The pathname of any file within the mounted file system.<br>
	 * * @return A statvfs structure or NULL on error.<br>
	 * Original signature : <code>sftp_statvfs_t sftp_statvfs(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:706</i>
	 */
	sftp_statvfs_struct sftp_statvfs(sftp_session_struct sftp, String path);
	/**
	 * @brief Get information about a mounted file system.<br>
	 * * @param  file         An opened file.<br>
	 * * @return A statvfs structure or NULL on error.<br>
	 * Original signature : <code>sftp_statvfs_t sftp_fstatvfs(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:715</i>
	 */
	sftp_statvfs_struct sftp_fstatvfs(sftp_file_struct file);
	/**
	 * @brief Free the memory of an allocated statvfs.<br>
	 * * @param  statvfs_o      The statvfs to free.<br>
	 * Original signature : <code>void sftp_statvfs_free(sftp_statvfs_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:722</i>
	 */
	void sftp_statvfs_free(sftp_statvfs_struct statvfs_o);
	/**
	 * @brief Canonicalize a sftp path.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param path          The path to be canonicalized.<br>
	 * * @return              The canonicalize path, NULL on error.<br>
	 * Original signature : <code>char* sftp_canonicalize_path(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:733</i><br>
	 * @deprecated use the safer methods {@link #sftp_canonicalize_path(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_canonicalize_path(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer sftp_canonicalize_path(sftp_session_struct sftp, Pointer path);
	/**
	 * @brief Canonicalize a sftp path.<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @param path          The path to be canonicalized.<br>
	 * * @return              The canonicalize path, NULL on error.<br>
	 * Original signature : <code>char* sftp_canonicalize_path(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:733</i>
	 */
	Pointer sftp_canonicalize_path(sftp_session_struct sftp, String path);
	/**
	 * @brief Get the version of the SFTP protocol supported by the server<br>
	 * * @param sftp          The sftp session handle.<br>
	 * * @return              The server version.<br>
	 * Original signature : <code>int sftp_server_version(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:742</i>
	 */
	int sftp_server_version(sftp_session_struct sftp);
	/**
	 * Original signature : <code>sftp_packet sftp_packet_read(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:768</i>
	 */
	sftp_packet_struct sftp_packet_read(sftp_session_struct sftp);
	/**
	 * Original signature : <code>int sftp_packet_write(sftp_session, uint8_t, ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:769</i>
	 */
	int sftp_packet_write(sftp_session_struct sftp, byte type, SshLibrary.ssh_buffer payload);
	/**
	 * Original signature : <code>void sftp_packet_free(sftp_packet)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:770</i>
	 */
	void sftp_packet_free(sftp_packet_struct packet);
	/**
	 * Original signature : <code>int buffer_add_attributes(ssh_buffer, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:771</i>
	 */
	int buffer_add_attributes(SshLibrary.ssh_buffer buffer, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>sftp_attributes sftp_parse_attr(sftp_session, ssh_buffer, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:772</i>
	 */
	sftp_attributes_struct sftp_parse_attr(sftp_session_struct session, SshLibrary.ssh_buffer buf, int expectname);
	/**
	 * Original signature : <code>sftp_client_message sftp_get_client_message(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:775</i>
	 */
	sftp_client_message_struct sftp_get_client_message(sftp_session_struct sftp);
	/**
	 * Original signature : <code>void sftp_client_message_free(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:776</i>
	 */
	void sftp_client_message_free(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>int sftp_reply_name(sftp_client_message, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:777</i><br>
	 * @deprecated use the safer methods {@link #sftp_reply_name(ssh.sftp_client_message_struct, java.lang.String, ssh.sftp_attributes_struct)} and {@link #sftp_reply_name(ssh.sftp_client_message_struct, com.sun.jna.Pointer, ssh.sftp_attributes_struct)} instead
	 */
	@Deprecated 
	int sftp_reply_name(sftp_client_message_struct msg, Pointer name, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_name(sftp_client_message, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:777</i>
	 */
	int sftp_reply_name(sftp_client_message_struct msg, String name, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_handle(sftp_client_message, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:779</i>
	 */
	int sftp_reply_handle(sftp_client_message_struct msg, SshLibrary.ssh_string handle);
	/**
	 * Original signature : <code>ssh_string sftp_handle_alloc(sftp_session, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:780</i>
	 */
	SshLibrary.ssh_string sftp_handle_alloc(sftp_session_struct sftp, Pointer info);
	/**
	 * Original signature : <code>int sftp_reply_attr(sftp_client_message, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:781</i>
	 */
	int sftp_reply_attr(sftp_client_message_struct msg, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>void* sftp_handle(sftp_session, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:782</i>
	 */
	Pointer sftp_handle(sftp_session_struct sftp, SshLibrary.ssh_string handle);
	/**
	 * Original signature : <code>int sftp_reply_status(sftp_client_message, uint32_t, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:783</i><br>
	 * @deprecated use the safer methods {@link #sftp_reply_status(ssh.sftp_client_message_struct, int, java.lang.String)} and {@link #sftp_reply_status(ssh.sftp_client_message_struct, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_reply_status(sftp_client_message_struct msg, int status, Pointer message);
	/**
	 * Original signature : <code>int sftp_reply_status(sftp_client_message, uint32_t, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:783</i>
	 */
	int sftp_reply_status(sftp_client_message_struct msg, int status, String message);
	/**
	 * Original signature : <code>int sftp_reply_names_add(sftp_client_message, const char*, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:784</i><br>
	 * @deprecated use the safer methods {@link #sftp_reply_names_add(ssh.sftp_client_message_struct, java.lang.String, java.lang.String, ssh.sftp_attributes_struct)} and {@link #sftp_reply_names_add(ssh.sftp_client_message_struct, com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.sftp_attributes_struct)} instead
	 */
	@Deprecated 
	int sftp_reply_names_add(sftp_client_message_struct msg, Pointer file, Pointer longname, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_names_add(sftp_client_message, const char*, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:784</i>
	 */
	int sftp_reply_names_add(sftp_client_message_struct msg, String file, String longname, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_names(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:786</i>
	 */
	int sftp_reply_names(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>int sftp_reply_data(sftp_client_message, const void*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:787</i>
	 */
	int sftp_reply_data(sftp_client_message_struct msg, Pointer data, int len);
	/**
	 * Original signature : <code>void sftp_handle_remove(sftp_session, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:788</i>
	 */
	void sftp_handle_remove(sftp_session_struct sftp, Pointer handle);
	/**
	 * @brief Set the session callback functions.<br>
	 * * This functions sets the callback structure to use your own callback<br>
	 * functions for auth, logging and status.<br>
	 * * @code<br>
	 * struct ssh_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .auth_function = my_auth_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * * @param  session      The session to set the callback structure.<br>
	 * * @param  cb           The callback structure itself.<br>
	 * * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_set_callbacks(ssh_session, ssh_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:271</i>
	 */
	int ssh_set_callbacks(SshLibrary.ssh_session session, ssh_callbacks_struct cb);
	/**
	 * @brief Set the channel callback functions.<br>
	 * * This functions sets the callback structure to use your own callback<br>
	 * functions for channel data and exceptions<br>
	 * * @code<br>
	 * struct ssh_channel_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .channel_data = my_channel_data_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_channel_callbacks(channel, &cb);<br>
	 * @endcode<br>
	 * * @param  channel      The channel to set the callback structure.<br>
	 * * @param  cb           The callback structure itself.<br>
	 * * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_set_channel_callbacks(ssh_channel, ssh_channel_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:405</i>
	 */
	int ssh_set_channel_callbacks(SshLibrary.ssh_channel channel, ssh_channel_callbacks_struct cb);
	/**
	 * @brief sets the thread callbacks necessary if your program is using<br>
	 * libssh in a multithreaded fashion. This function must be called first,<br>
	 * outside of any threading context (in your main() for instance), before<br>
	 * ssh_init().<br>
	 * @param cb pointer to a ssh_threads_callbacks_struct structure, which contains<br>
	 * the different callbacks to be set.<br>
	 * @see ssh_threads_callbacks_struct<br>
	 * @see SSH_THREADS_PTHREAD<br>
	 * Original signature : <code>int ssh_threads_set_callbacks(ssh_threads_callbacks_struct*)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:436</i>
	 */
	int ssh_threads_set_callbacks(ssh_threads_callbacks_struct cb);
	/**
	 * @brief returns a pointer on the pthread threads callbacks, to be used with<br>
	 * ssh_threads_set_callbacks.<br>
	 * @warning you have to link with the library ssh_threads.<br>
	 * @see ssh_threads_set_callbacks<br>
	 * Original signature : <code>ssh_threads_callbacks_struct* ssh_threads_get_pthread()</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:445</i>
	 */
	ssh_threads_callbacks_struct ssh_threads_get_pthread();
	/**
	 * @brief returns a pointer on the noop threads callbacks, to be used with<br>
	 * ssh_threads_set_callbacks. These callbacks do nothing and are being used by<br>
	 * default.<br>
	 * @see ssh_threads_set_callbacks<br>
	 * Original signature : <code>ssh_threads_callbacks_struct* ssh_threads_get_noop()</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:453</i>
	 */
	ssh_threads_callbacks_struct ssh_threads_get_noop();
	/**
	 * Original signature : <code>void buffer_free(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:34</i>
	 */
	@Mangling({"_Z11buffer_freeP17ssh_buffer_struct", "?buffer_free@@YAXPA17ssh_buffer_struct@Z"}) 
	void buffer_free(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>void* buffer_get(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:35</i>
	 */
	@Mangling({"_Z10buffer_getP17ssh_buffer_struct", "?buffer_get@@YAPAXPA17ssh_buffer_struct@Z"}) 
	Pointer buffer_get(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>uint32_t buffer_get_len(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:36</i>
	 */
	@Mangling({"_Z14buffer_get_lenP17ssh_buffer_struct", "?buffer_get_len@@YA8uint32_tPA17ssh_buffer_struct@Z"}) 
	int buffer_get_len(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>ssh_buffer buffer_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:37</i>
	 */
	@Mangling({"_Z10buffer_newv", "?buffer_new@@YAPA17ssh_buffer_structXZ"}) 
	SshLibrary.ssh_buffer buffer_new();
	/**
	 * Original signature : <code>ssh_channel channel_accept_x11(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:39</i>
	 */
	@Mangling({"_Z18channel_accept_x11P18ssh_channel_structi", "?channel_accept_x11@@YAPA18ssh_channel_structPA18ssh_channel_structH@Z"}) 
	SshLibrary.ssh_channel channel_accept_x11(SshLibrary.ssh_channel channel, int timeout_ms);
	/**
	 * Original signature : <code>int channel_change_pty_size(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:40</i>
	 */
	@Mangling({"_Z23channel_change_pty_sizeP18ssh_channel_structii", "?channel_change_pty_size@@YAHPA18ssh_channel_structHH@Z"}) 
	int channel_change_pty_size(SshLibrary.ssh_channel channel, int cols, int rows);
	/**
	 * Original signature : <code>ssh_channel channel_forward_accept(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:41</i>
	 */
	@Mangling({"_Z22channel_forward_acceptP18ssh_session_structi", "?channel_forward_accept@@YAPA18ssh_channel_structPA18ssh_session_structH@Z"}) 
	SshLibrary.ssh_channel channel_forward_accept(SshLibrary.ssh_session session, int timeout_ms);
	/**
	 * Original signature : <code>int channel_close(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:42</i>
	 */
	@Mangling({"_Z13channel_closeP18ssh_channel_struct", "?channel_close@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_close(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:43</i><br>
	 * @deprecated use the safer methods {@link #channel_forward_cancel(ssh.SshLibrary.ssh_session, java.lang.String, int)} and {@link #channel_forward_cancel(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z22channel_forward_cancelP18ssh_session_structPKci", "?channel_forward_cancel@@YAHPA18ssh_session_structPADH@Z"}) 
	@Deprecated 
	int channel_forward_cancel(SshLibrary.ssh_session session, Pointer address, int port);
	/**
	 * Original signature : <code>int channel_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:43</i>
	 */
	@Mangling({"_Z22channel_forward_cancelP18ssh_session_structPKci", "?channel_forward_cancel@@YAHPA18ssh_session_structPADH@Z"}) 
	int channel_forward_cancel(SshLibrary.ssh_session session, String address, int port);
	/**
	 * Original signature : <code>int channel_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:44</i><br>
	 * @deprecated use the safer methods {@link #channel_forward_listen(ssh.SshLibrary.ssh_session, java.lang.String, int, java.nio.IntBuffer)} and {@link #channel_forward_listen(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Mangling({"_Z22channel_forward_listenP18ssh_session_structPKciPi", "?channel_forward_listen@@YAHPA18ssh_session_structPADHPAH@Z"}) 
	@Deprecated 
	int channel_forward_listen(SshLibrary.ssh_session session, Pointer address, int port, IntByReference bound_port);
	/**
	 * Original signature : <code>int channel_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:44</i>
	 */
	@Mangling({"_Z22channel_forward_listenP18ssh_session_structPKciPi", "?channel_forward_listen@@YAHPA18ssh_session_structPADHPAH@Z"}) 
	int channel_forward_listen(SshLibrary.ssh_session session, String address, int port, IntBuffer bound_port);
	/**
	 * Original signature : <code>void channel_free(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:45</i>
	 */
	@Mangling({"_Z12channel_freeP18ssh_channel_struct", "?channel_free@@YAXPA18ssh_channel_struct@Z"}) 
	void channel_free(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_get_exit_status(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:46</i>
	 */
	@Mangling({"_Z23channel_get_exit_statusP18ssh_channel_struct", "?channel_get_exit_status@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_get_exit_status(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_session channel_get_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:47</i>
	 */
	@Mangling({"_Z19channel_get_sessionP18ssh_channel_struct", "?channel_get_session@@YAPA18ssh_session_structPA18ssh_channel_struct@Z"}) 
	SshLibrary.ssh_session channel_get_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_is_closed(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:48</i>
	 */
	@Mangling({"_Z17channel_is_closedP18ssh_channel_struct", "?channel_is_closed@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_is_closed(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_is_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:49</i>
	 */
	@Mangling({"_Z14channel_is_eofP18ssh_channel_struct", "?channel_is_eof@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_is_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_is_open(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:50</i>
	 */
	@Mangling({"_Z15channel_is_openP18ssh_channel_struct", "?channel_is_open@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_is_open(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_channel channel_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:51</i>
	 */
	@Mangling({"_Z11channel_newP18ssh_session_struct", "?channel_new@@YAPA18ssh_channel_structPA18ssh_session_struct@Z"}) 
	SshLibrary.ssh_channel channel_new(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:52</i><br>
	 * @deprecated use the safer methods {@link #channel_open_forward(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, int)} and {@link #channel_open_forward(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z20channel_open_forwardP18ssh_channel_structPKciPKci", "?channel_open_forward@@YAHPA18ssh_channel_structPADHPADH@Z"}) 
	@Deprecated 
	int channel_open_forward(SshLibrary.ssh_channel channel, Pointer remotehost, int remoteport, Pointer sourcehost, int localport);
	/**
	 * Original signature : <code>int channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:52</i>
	 */
	@Mangling({"_Z20channel_open_forwardP18ssh_channel_structPKciPKci", "?channel_open_forward@@YAHPA18ssh_channel_structPADHPADH@Z"}) 
	int channel_open_forward(SshLibrary.ssh_channel channel, String remotehost, int remoteport, String sourcehost, int localport);
	/**
	 * Original signature : <code>int channel_open_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:54</i>
	 */
	@Mangling({"_Z20channel_open_sessionP18ssh_channel_struct", "?channel_open_session@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_open_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_poll(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:55</i>
	 */
	@Mangling({"_Z12channel_pollP18ssh_channel_structi", "?channel_poll@@YAHPA18ssh_channel_structH@Z"}) 
	int channel_poll(SshLibrary.ssh_channel channel, int is_stderr);
	/**
	 * Original signature : <code>int channel_read(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:56</i>
	 */
	@Mangling({"_Z12channel_readP18ssh_channel_structPv8uint32_ti", "?channel_read@@YAHPA18ssh_channel_structPAX8uint32_tH@Z"}) 
	int channel_read(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_read_buffer(ssh_channel, ssh_buffer, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:58</i>
	 */
	@Mangling({"_Z19channel_read_bufferP18ssh_channel_structP17ssh_buffer_struct8uint32_ti", "?channel_read_buffer@@YAHPA18ssh_channel_structPA17ssh_buffer_struct8uint32_tH@Z"}) 
	int channel_read_buffer(SshLibrary.ssh_channel channel, SshLibrary.ssh_buffer buffer, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_read_nonblocking(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:61</i>
	 */
	@Mangling({"_Z24channel_read_nonblockingP18ssh_channel_structPv8uint32_ti", "?channel_read_nonblocking@@YAHPA18ssh_channel_structPAX8uint32_tH@Z"}) 
	int channel_read_nonblocking(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:63</i><br>
	 * @deprecated use the safer methods {@link #channel_request_env(ssh.SshLibrary.ssh_channel, java.lang.String, java.lang.String)} and {@link #channel_request_env(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z19channel_request_envP18ssh_channel_structPKcPKc", "?channel_request_env@@YAHPA18ssh_channel_structPADPAD@Z"}) 
	@Deprecated 
	int channel_request_env(SshLibrary.ssh_channel channel, Pointer name, Pointer value);
	/**
	 * Original signature : <code>int channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:63</i>
	 */
	@Mangling({"_Z19channel_request_envP18ssh_channel_structPKcPKc", "?channel_request_env@@YAHPA18ssh_channel_structPADPAD@Z"}) 
	int channel_request_env(SshLibrary.ssh_channel channel, String name, String value);
	/**
	 * Original signature : <code>int channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:64</i><br>
	 * @deprecated use the safer methods {@link #channel_request_exec(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #channel_request_exec(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z20channel_request_execP18ssh_channel_structPKc", "?channel_request_exec@@YAHPA18ssh_channel_structPAD@Z"}) 
	@Deprecated 
	int channel_request_exec(SshLibrary.ssh_channel channel, Pointer cmd);
	/**
	 * Original signature : <code>int channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:64</i>
	 */
	@Mangling({"_Z20channel_request_execP18ssh_channel_structPKc", "?channel_request_exec@@YAHPA18ssh_channel_structPAD@Z"}) 
	int channel_request_exec(SshLibrary.ssh_channel channel, String cmd);
	/**
	 * Original signature : <code>int channel_request_pty(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:65</i>
	 */
	@Mangling({"_Z19channel_request_ptyP18ssh_channel_struct", "?channel_request_pty@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_request_pty(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:66</i><br>
	 * @deprecated use the safer methods {@link #channel_request_pty_size(ssh.SshLibrary.ssh_channel, java.lang.String, int, int)} and {@link #channel_request_pty_size(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, int)} instead
	 */
	@Mangling({"_Z24channel_request_pty_sizeP18ssh_channel_structPKcii", "?channel_request_pty_size@@YAHPA18ssh_channel_structPADHH@Z"}) 
	@Deprecated 
	int channel_request_pty_size(SshLibrary.ssh_channel channel, Pointer term, int cols, int rows);
	/**
	 * Original signature : <code>int channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:66</i>
	 */
	@Mangling({"_Z24channel_request_pty_sizeP18ssh_channel_structPKcii", "?channel_request_pty_size@@YAHPA18ssh_channel_structPADHH@Z"}) 
	int channel_request_pty_size(SshLibrary.ssh_channel channel, String term, int cols, int rows);
	/**
	 * Original signature : <code>int channel_request_shell(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:68</i>
	 */
	@Mangling({"_Z21channel_request_shellP18ssh_channel_struct", "?channel_request_shell@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_request_shell(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:69</i><br>
	 * @deprecated use the safer methods {@link #channel_request_send_signal(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #channel_request_send_signal(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z27channel_request_send_signalP18ssh_channel_structPKc", "?channel_request_send_signal@@YAHPA18ssh_channel_structPAD@Z"}) 
	@Deprecated 
	int channel_request_send_signal(SshLibrary.ssh_channel channel, Pointer signum);
	/**
	 * Original signature : <code>int channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:69</i>
	 */
	@Mangling({"_Z27channel_request_send_signalP18ssh_channel_structPKc", "?channel_request_send_signal@@YAHPA18ssh_channel_structPAD@Z"}) 
	int channel_request_send_signal(SshLibrary.ssh_channel channel, String signum);
	/**
	 * Original signature : <code>int channel_request_sftp(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:70</i>
	 */
	@Mangling({"_Z20channel_request_sftpP18ssh_channel_struct", "?channel_request_sftp@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_request_sftp(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:71</i><br>
	 * @deprecated use the safer methods {@link #channel_request_subsystem(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #channel_request_subsystem(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z25channel_request_subsystemP18ssh_channel_structPKc", "?channel_request_subsystem@@YAHPA18ssh_channel_structPAD@Z"}) 
	@Deprecated 
	int channel_request_subsystem(SshLibrary.ssh_channel channel, Pointer subsystem);
	/**
	 * Original signature : <code>int channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:71</i>
	 */
	@Mangling({"_Z25channel_request_subsystemP18ssh_channel_structPKc", "?channel_request_subsystem@@YAHPA18ssh_channel_structPAD@Z"}) 
	int channel_request_subsystem(SshLibrary.ssh_channel channel, String subsystem);
	/**
	 * Original signature : <code>int channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:72</i><br>
	 * @deprecated use the safer methods {@link #channel_request_x11(ssh.SshLibrary.ssh_channel, int, java.lang.String, java.lang.String, int)} and {@link #channel_request_x11(ssh.SshLibrary.ssh_channel, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Mangling({"_Z19channel_request_x11P18ssh_channel_structiPKcPKci", "?channel_request_x11@@YAHPA18ssh_channel_structHPADPADH@Z"}) 
	@Deprecated 
	int channel_request_x11(SshLibrary.ssh_channel channel, int single_connection, Pointer protocol, Pointer cookie, int screen_number);
	/**
	 * Original signature : <code>int channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:72</i>
	 */
	@Mangling({"_Z19channel_request_x11P18ssh_channel_structiPKcPKci", "?channel_request_x11@@YAHPA18ssh_channel_structHPADPADH@Z"}) 
	int channel_request_x11(SshLibrary.ssh_channel channel, int single_connection, String protocol, String cookie, int screen_number);
	/**
	 * Original signature : <code>int channel_send_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:74</i>
	 */
	@Mangling({"_Z16channel_send_eofP18ssh_channel_struct", "?channel_send_eof@@YAHPA18ssh_channel_struct@Z"}) 
	int channel_send_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_select(ssh_channel*, ssh_channel*, ssh_channel*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:75</i>
	 */
	@Mangling({"_Z14channel_selectPP18ssh_channel_structPP18ssh_channel_structPP18ssh_channel_structP7timeval", "?channel_select@@YAHPAPA18ssh_channel_structPAPA18ssh_channel_structPAPA18ssh_channel_structPA7timeval@Z"}) 
	int channel_select(PointerByReference readchans, PointerByReference writechans, PointerByReference exceptchans, Pointer timeout);
	/**
	 * Original signature : <code>void channel_set_blocking(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:77</i>
	 */
	@Mangling({"_Z20channel_set_blockingP18ssh_channel_structi", "?channel_set_blocking@@YAXPA18ssh_channel_structH@Z"}) 
	void channel_set_blocking(SshLibrary.ssh_channel channel, int blocking);
	/**
	 * Original signature : <code>int channel_write(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:78</i>
	 */
	@Mangling({"_Z13channel_writeP18ssh_channel_structPKv8uint32_t", "?channel_write@@YAHPA18ssh_channel_structPAX8uint32_t@Z"}) 
	int channel_write(SshLibrary.ssh_channel channel, Pointer data, int len);
	/**
	 * Original signature : <code>void privatekey_free(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:80</i>
	 */
	@Mangling({"_Z15privatekey_freeP22ssh_private_key_struct", "?privatekey_free@@YAXPA22ssh_private_key_struct@Z"}) 
	void privatekey_free(SshLibrary.ssh_private_key prv);
	/**
	 * Original signature : <code>ssh_private_key privatekey_from_file(ssh_session, const char*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:81</i><br>
	 * @deprecated use the safer methods {@link #privatekey_from_file(ssh.SshLibrary.ssh_session, java.lang.String, int, java.lang.String)} and {@link #privatekey_from_file(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z20privatekey_from_fileP18ssh_session_structPKciPKc", "?privatekey_from_file@@YAPA22ssh_private_key_structPA18ssh_session_structPADHPAD@Z"}) 
	@Deprecated 
	SshLibrary.ssh_private_key privatekey_from_file(SshLibrary.ssh_session session, Pointer filename, int type, Pointer passphrase);
	/**
	 * Original signature : <code>ssh_private_key privatekey_from_file(ssh_session, const char*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:81</i>
	 */
	@Mangling({"_Z20privatekey_from_fileP18ssh_session_structPKciPKc", "?privatekey_from_file@@YAPA22ssh_private_key_structPA18ssh_session_structPADHPAD@Z"}) 
	SshLibrary.ssh_private_key privatekey_from_file(SshLibrary.ssh_session session, String filename, int type, String passphrase);
	/**
	 * Original signature : <code>void publickey_free(ssh_public_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:83</i>
	 */
	@Mangling({"_Z14publickey_freeP21ssh_public_key_struct", "?publickey_free@@YAXPA21ssh_public_key_struct@Z"}) 
	void publickey_free(SshLibrary.ssh_public_key key);
	/**
	 * Original signature : <code>int ssh_publickey_to_file(ssh_session, const char*, ssh_string, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:84</i><br>
	 * @deprecated use the safer methods {@link #ssh_publickey_to_file(ssh.SshLibrary.ssh_session, java.lang.String, ssh.SshLibrary.ssh_string, int)} and {@link #ssh_publickey_to_file(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, ssh.SshLibrary.ssh_string, int)} instead
	 */
	@Mangling({"_Z21ssh_publickey_to_fileP18ssh_session_structPKcP17ssh_string_structi", "?ssh_publickey_to_file@@YAHPA18ssh_session_structPADPA17ssh_string_structH@Z"}) 
	@Deprecated 
	int ssh_publickey_to_file(SshLibrary.ssh_session session, Pointer file, SshLibrary.ssh_string pubkey, int type);
	/**
	 * Original signature : <code>int ssh_publickey_to_file(ssh_session, const char*, ssh_string, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:84</i>
	 */
	@Mangling({"_Z21ssh_publickey_to_fileP18ssh_session_structPKcP17ssh_string_structi", "?ssh_publickey_to_file@@YAHPA18ssh_session_structPADPA17ssh_string_structH@Z"}) 
	int ssh_publickey_to_file(SshLibrary.ssh_session session, String file, SshLibrary.ssh_string pubkey, int type);
	/**
	 * Original signature : <code>ssh_string publickey_from_file(ssh_session, const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:86</i><br>
	 * @deprecated use the safer methods {@link #publickey_from_file(ssh.SshLibrary.ssh_session, java.lang.String, java.nio.IntBuffer)} and {@link #publickey_from_file(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Mangling({"_Z19publickey_from_fileP18ssh_session_structPKcPi", "?publickey_from_file@@YAPA17ssh_string_structPA18ssh_session_structPADPAH@Z"}) 
	@Deprecated 
	SshLibrary.ssh_string publickey_from_file(SshLibrary.ssh_session session, Pointer filename, IntByReference type);
	/**
	 * Original signature : <code>ssh_string publickey_from_file(ssh_session, const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:86</i>
	 */
	@Mangling({"_Z19publickey_from_fileP18ssh_session_structPKcPi", "?publickey_from_file@@YAPA17ssh_string_structPA18ssh_session_structPADPAH@Z"}) 
	SshLibrary.ssh_string publickey_from_file(SshLibrary.ssh_session session, String filename, IntBuffer type);
	/**
	 * Original signature : <code>ssh_public_key publickey_from_privatekey(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:88</i>
	 */
	@Mangling({"_Z25publickey_from_privatekeyP22ssh_private_key_struct", "?publickey_from_privatekey@@YAPA21ssh_public_key_structPA22ssh_private_key_struct@Z"}) 
	SshLibrary.ssh_public_key publickey_from_privatekey(SshLibrary.ssh_private_key prv);
	/**
	 * Original signature : <code>ssh_string publickey_to_string(ssh_public_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:89</i>
	 */
	@Mangling({"_Z19publickey_to_stringP21ssh_public_key_struct", "?publickey_to_string@@YAPA17ssh_string_structPA21ssh_public_key_struct@Z"}) 
	SshLibrary.ssh_string publickey_to_string(SshLibrary.ssh_public_key key);
	/**
	 * Original signature : <code>ssh_message ssh_message_retrieve(ssh_session, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:90</i>
	 */
	@Mangling({"_Z20ssh_message_retrieveP18ssh_session_struct8uint32_t", "?ssh_message_retrieve@@YAPA18ssh_message_structPA18ssh_session_struct8uint32_t@Z"}) 
	SshLibrary.ssh_message ssh_message_retrieve(SshLibrary.ssh_session session, int packettype);
	/**
	 * Original signature : <code>void string_burn(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:91</i>
	 */
	@Mangling({"_Z11string_burnP17ssh_string_struct", "?string_burn@@YAXPA17ssh_string_struct@Z"}) 
	void string_burn(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string string_copy(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:92</i>
	 */
	@Mangling({"_Z11string_copyP17ssh_string_struct", "?string_copy@@YAPA17ssh_string_structPA17ssh_string_struct@Z"}) 
	SshLibrary.ssh_string string_copy(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>void* string_data(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:93</i>
	 */
	@Mangling({"_Z11string_dataP17ssh_string_struct", "?string_data@@YAPAXPA17ssh_string_struct@Z"}) 
	Pointer string_data(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>int string_fill(ssh_string, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:94</i>
	 */
	@Mangling({"_Z11string_fillP17ssh_string_structPKv6size_t", "?string_fill@@YAHPA17ssh_string_structPAX6size_t@Z"}) 
	int string_fill(SshLibrary.ssh_string str, Pointer data, NativeSize len);
	/**
	 * Original signature : <code>void string_free(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:95</i>
	 */
	@Mangling({"_Z11string_freeP17ssh_string_struct", "?string_free@@YAXPA17ssh_string_struct@Z"}) 
	void string_free(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:96</i><br>
	 * @deprecated use the safer methods {@link #string_from_char(java.lang.String)} and {@link #string_from_char(com.sun.jna.Pointer)} instead
	 */
	@Mangling({"_Z16string_from_charPKc", "?string_from_char@@YAPA17ssh_string_structPAD@Z"}) 
	@Deprecated 
	SshLibrary.ssh_string string_from_char(Pointer what);
	/**
	 * Original signature : <code>ssh_string string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:96</i>
	 */
	@Mangling({"_Z16string_from_charPKc", "?string_from_char@@YAPA17ssh_string_structPAD@Z"}) 
	SshLibrary.ssh_string string_from_char(String what);
	/**
	 * Original signature : <code>size_t string_len(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:97</i>
	 */
	@Mangling({"_Z10string_lenP17ssh_string_struct", "?string_len@@YA6size_tPA17ssh_string_struct@Z"}) 
	NativeSize string_len(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string string_new(size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:98</i>
	 */
	@Mangling({"_Z10string_new6size_t", "?string_new@@YAPA17ssh_string_struct6size_t@Z"}) 
	SshLibrary.ssh_string string_new(NativeSize size);
	/**
	 * Original signature : <code>char* string_to_char(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:99</i>
	 */
	@Mangling({"_Z14string_to_charP17ssh_string_struct", "?string_to_char@@YAPADPA17ssh_string_struct@Z"}) 
	Pointer string_to_char(SshLibrary.ssh_string str);
	/**
	 * @brief Creates a new SSH server bind.<br>
	 * * @return A newly allocated ssh_bind session pointer.<br>
	 * Original signature : <code>ssh_bind ssh_bind_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:82</i>
	 */
	SshLibrary.ssh_bind ssh_bind_new();
	/**
	 * @brief Set the options for the current SSH server bind.<br>
	 * * @param  sshbind     The ssh server bind to configure.<br>
	 * * @param  type The option type to set. This could be one of the<br>
	 *              following:<br>
	 * *              - SSH_BIND_OPTIONS_BINDADDR<br>
	 *                The ip address to bind (const char *).<br>
	 * *              - SSH_BIND_OPTIONS_BINDPORT<br>
	 *                The port to bind (unsigned int).<br>
	 * *              - SSH_BIND_OPTIONS_BINDPORT_STR<br>
	 *                The port to bind (const char *).<br>
	 * *              - SSH_BIND_OPTIONS_HOSTKEY<br>
	 *                This specifies the file containing the private host key used<br>
	 *                by SSHv1. (const char *).<br>
	 * *              - SSH_BIND_OPTIONS_DSAKEY<br>
	 *                This specifies the file containing the private host dsa key<br>
	 *                used by SSHv2. (const char *).<br>
	 * *              - SSH_BIND_OPTIONS_RSAKEY<br>
	 *                This specifies the file containing the private host dsa key<br>
	 *                used by SSHv2. (const char *).<br>
	 * *              - SSH_BIND_OPTIONS_BANNER<br>
	 *                That the server banner (version string) for SSH.<br>
	 *                (const char *).<br>
	 * *              - SSH_BIND_OPTIONS_LOG_VERBOSITY<br>
	 *                Set the session logging verbosity (int).\n<br>
	 *                \n<br>
	 *                The verbosity of the messages. Every log smaller or<br>
	 *                equal to verbosity will be shown.<br>
	 *                - SSH_LOG_NOLOG: No logging<br>
	 *                - SSH_LOG_RARE: Rare conditions or warnings<br>
	 *                - SSH_LOG_ENTRY: API-accessible entrypoints<br>
	 *                - SSH_LOG_PACKET: Packet id and size<br>
	 *                - SSH_LOG_FUNCTIONS: Function entering and leaving<br>
	 * *              - SSH_BIND_OPTIONS_LOG_VERBOSITY_STR<br>
	 *                Set the session logging verbosity (const char *).\n<br>
	 *                \n<br>
	 *                The verbosity of the messages. Every log smaller or<br>
	 *                equal to verbosity will be shown.<br>
	 *                - SSH_LOG_NOLOG: No logging<br>
	 *                - SSH_LOG_RARE: Rare conditions or warnings<br>
	 *                - SSH_LOG_ENTRY: API-accessible entrypoints<br>
	 *                - SSH_LOG_PACKET: Packet id and size<br>
	 *                - SSH_LOG_FUNCTIONS: Function entering and leaving<br>
	 *                \n<br>
	 *                See the corresponding numbers in libssh.h.<br>
	 * * @param  value The value to set. This is a generic pointer and the<br>
	 *               datatype which is used should be set according to the<br>
	 *               type set.<br>
	 * * @returns     SSH_OK on success, SSH_ERROR on invalid option or parameter.<br>
	 * Original signature : <code>int ssh_bind_options_set(ssh_bind, ssh_bind_options_e, const void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:147</i><br>
	 * @param type @see ssh_bind_options_e
	 */
	int ssh_bind_options_set(SshLibrary.ssh_bind sshbind, int type, Pointer value);
	/**
	 * @brief Start listening to the socket.<br>
	 * * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * * @return 0 on success, < 0 on error.<br>
	 * Original signature : <code>int ssh_bind_listen(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:157</i>
	 */
	int ssh_bind_listen(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * @brief Set the callback for this bind.<br>
	 * * @param[in] sshbind   The bind to set the callback on.<br>
	 * * @param[in] callbacks An already set up ssh_bind_callbacks instance.<br>
	 * * @param[in] userdata  A pointer to private data to pass to the callbacks.<br>
	 * * @return              SSH_OK on success, SSH_ERROR if an error occured.<br>
	 * * @code<br>
	 *     struct ssh_callbacks_struct cb = {<br>
	 *         .userdata = data,<br>
	 *         .auth_function = my_auth_function<br>
	 *     };<br>
	 *     ssh_callbacks_init(&cb);<br>
	 *     ssh_bind_set_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * Original signature : <code>int ssh_bind_set_callbacks(ssh_bind, ssh_bind_callbacks, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:179</i>
	 */
	int ssh_bind_set_callbacks(SshLibrary.ssh_bind sshbind, ssh_bind_callbacks_struct callbacks, Pointer userdata);
	/**
	 * @brief  Set the session to blocking/nonblocking mode.<br>
	 * * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * * @param  blocking     Zero for nonblocking mode.<br>
	 * Original signature : <code>void ssh_bind_set_blocking(ssh_bind, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:189</i>
	 */
	void ssh_bind_set_blocking(SshLibrary.ssh_bind ssh_bind_o, int blocking);
	/**
	 * @brief Recover the file descriptor from the session.<br>
	 * * @param  ssh_bind_o     The ssh server bind to get the fd from.<br>
	 * * @return The file descriptor.<br>
	 * Original signature : <code>socket_t ssh_bind_get_fd(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:198</i>
	 */
	SshLibrary.SOCKET ssh_bind_get_fd(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * @brief Set the file descriptor for a session.<br>
	 * * @param  ssh_bind_o     The ssh server bind to set the fd.<br>
	 * * @param  fd           The file descriptssh_bind B<br>
	 * Original signature : <code>void ssh_bind_set_fd(ssh_bind, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:207</i>
	 */
	void ssh_bind_set_fd(SshLibrary.ssh_bind ssh_bind_o, SshLibrary.SOCKET fd);
	/**
	 * @brief Allow the file descriptor to accept new sessions.<br>
	 * * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * Original signature : <code>void ssh_bind_fd_toaccept(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:214</i>
	 */
	void ssh_bind_fd_toaccept(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * @brief Accept an incoming ssh connection and initialize the session.<br>
	 * * @param  ssh_bind_o     The ssh server bind to accept a connection.<br>
	 * @param  session			A preallocated ssh session<br>
	 * @see ssh_new<br>
	 * @return SSH_OK when a connection is established<br>
	 * Original signature : <code>int ssh_bind_accept(ssh_bind, ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:224</i>
	 */
	int ssh_bind_accept(SshLibrary.ssh_bind ssh_bind_o, SshLibrary.ssh_session session);
	/**
	 * @brief Handles the key exchange and set up encryption<br>
	 * * @param  session			A connected ssh session<br>
	 * @see ssh_bind_accept<br>
	 * @return SSH_OK if the key exchange was successful<br>
	 * Original signature : <code>int ssh_handle_key_exchange(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:233</i>
	 */
	int ssh_handle_key_exchange(SshLibrary.ssh_session session);
	/**
	 * @brief Free a ssh servers bind.<br>
	 * * @param  ssh_bind_o     The ssh server bind to free.<br>
	 * Original signature : <code>void ssh_bind_free(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:240</i>
	 */
	void ssh_bind_free(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * messages.c<br>
	 * Original signature : <code>int ssh_message_reply_default(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:243</i>
	 */
	int ssh_message_reply_default(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_auth_user(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:245</i>
	 */
	Pointer ssh_message_auth_user(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_auth_password(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:246</i>
	 */
	Pointer ssh_message_auth_password(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>ssh_public_key ssh_message_auth_publickey(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:247</i>
	 */
	SshLibrary.ssh_public_key ssh_message_auth_publickey(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>ssh_publickey_state_e ssh_message_auth_publickey_state(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:248</i>
	 */
	/**
	 * @see ssh_publickey_state_e
	 */int ssh_message_auth_publickey_state(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_success(ssh_message, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:249</i>
	 */
	int ssh_message_auth_reply_success(SshLibrary.ssh_message msg, int partial);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_pk_ok(ssh_message, ssh_string, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:250</i>
	 */
	int ssh_message_auth_reply_pk_ok(SshLibrary.ssh_message msg, SshLibrary.ssh_string algo, SshLibrary.ssh_string pubkey);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_pk_ok_simple(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:251</i>
	 */
	int ssh_message_auth_reply_pk_ok_simple(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_auth_set_methods(ssh_message, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:253</i>
	 */
	int ssh_message_auth_set_methods(SshLibrary.ssh_message msg, int methods);
	/**
	 * Original signature : <code>int ssh_message_service_reply_success(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:255</i>
	 */
	int ssh_message_service_reply_success(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_service_service(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:256</i>
	 */
	Pointer ssh_message_service_service(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_global_request_reply_success(ssh_message, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:258</i>
	 */
	int ssh_message_global_request_reply_success(SshLibrary.ssh_message msg, short bound_port);
	/**
	 * Original signature : <code>void ssh_set_message_callback(ssh_session, ssh_set_message_callback_arg1_ssh_bind_message_callback_callback, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:261</i>
	 */
	void ssh_set_message_callback(SshLibrary.ssh_session session, SshLibrary.ssh_set_message_callback_arg1_ssh_bind_message_callback_callback arg1, Pointer data);
	/**
	 * Original signature : <code>int ssh_execute_message_callbacks(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:264</i>
	 */
	int ssh_execute_message_callbacks(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_open_originator(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:266</i>
	 */
	Pointer ssh_message_channel_request_open_originator(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_open_originator_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:267</i>
	 */
	int ssh_message_channel_request_open_originator_port(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_open_destination(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:268</i>
	 */
	Pointer ssh_message_channel_request_open_destination(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_open_destination_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:269</i>
	 */
	int ssh_message_channel_request_open_destination_port(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>ssh_channel ssh_message_channel_request_channel(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:271</i>
	 */
	SshLibrary.ssh_channel ssh_message_channel_request_channel(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_pty_term(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:273</i>
	 */
	Pointer ssh_message_channel_request_pty_term(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_width(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:274</i>
	 */
	int ssh_message_channel_request_pty_width(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_height(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:275</i>
	 */
	int ssh_message_channel_request_pty_height(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_pxwidth(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:276</i>
	 */
	int ssh_message_channel_request_pty_pxwidth(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_pxheight(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:277</i>
	 */
	int ssh_message_channel_request_pty_pxheight(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_env_name(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:279</i>
	 */
	Pointer ssh_message_channel_request_env_name(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_env_value(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:280</i>
	 */
	Pointer ssh_message_channel_request_env_value(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_command(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:282</i>
	 */
	Pointer ssh_message_channel_request_command(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_subsystem(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:284</i>
	 */
	Pointer ssh_message_channel_request_subsystem(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_global_request_address(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:286</i>
	 */
	Pointer ssh_message_global_request_address(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_global_request_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:287</i>
	 */
	int ssh_message_global_request_port(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_channel_open_reverse_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:289</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_open_reverse_forward(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, int)} and {@link #ssh_channel_open_reverse_forward(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_open_reverse_forward(SshLibrary.ssh_channel channel, Pointer remotehost, int remoteport, Pointer sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_open_reverse_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:289</i>
	 */
	int ssh_channel_open_reverse_forward(SshLibrary.ssh_channel channel, String remotehost, int remoteport, String sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_request_send_exit_status(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:292</i>
	 */
	int ssh_channel_request_send_exit_status(SshLibrary.ssh_channel channel, int exit_status);
	/**
	 * Original signature : <code>int ssh_channel_request_send_exit_signal(ssh_channel, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:294</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_send_exit_signal(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, java.lang.String)} and {@link #ssh_channel_request_send_exit_signal(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_send_exit_signal(SshLibrary.ssh_channel channel, Pointer signum, int core, Pointer errmsg, Pointer lang);
	/**
	 * Original signature : <code>int ssh_channel_request_send_exit_signal(ssh_channel, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:294</i>
	 */
	int ssh_channel_request_send_exit_signal(SshLibrary.ssh_channel channel, String signum, int core, String errmsg, String lang);
	/**
	 * Original signature : <code>int ssh_channel_write_stderr(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:299</i>
	 */
	int ssh_channel_write_stderr(SshLibrary.ssh_channel channel, Pointer data, int len);
	/**
	 * deprecated functions<br>
	 * Original signature : <code>int ssh_accept(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:304</i>
	 */
	int ssh_accept(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int channel_write_stderr(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:305</i>
	 */
	int channel_write_stderr(SshLibrary.ssh_channel channel, Pointer data, int len);
	/// Undefined type
	public static interface ssh_string_struct {
		
	};
	/// Undefined type
	public static interface ssh_private_key_struct {
		
	};
	/// Undefined type
	public static interface ssh_channel_struct {
		
	};
	/// Undefined type
	public static interface ssh_buffer_struct {
		
	};
	/// Undefined type
	public static interface ssh_session_struct {
		
	};
	/// Undefined type
	public static interface ssh_scp_struct {
		
	};
	/// Undefined type
	public static interface ssh_public_key_struct {
		
	};
	/// Undefined type
	public static interface ssh_bind_struct {
		
	};
	/// Undefined type
	public static interface SOCKET {
		
	};
	/// Undefined type
	public static interface sftp_ext_struct {
		
	};
	/// Undefined type
	public static interface ssh_message_struct {
		
	};
	/// Undefined type
	public static interface ssh_pcap_file_struct {
		
	};
	/// Undefined type
	public static interface timeval {
		
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_scp extends PointerType {
		public ssh_scp(Pointer address) {
			super(address);
		}
		public ssh_scp() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_channel extends PointerType {
		public ssh_channel(Pointer address) {
			super(address);
		}
		public ssh_channel() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_private_key extends PointerType {
		public ssh_private_key(Pointer address) {
			super(address);
		}
		public ssh_private_key() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_pcap_file extends PointerType {
		public ssh_pcap_file(Pointer address) {
			super(address);
		}
		public ssh_pcap_file() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_string extends PointerType {
		public ssh_string(Pointer address) {
			super(address);
		}
		public ssh_string() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_buffer extends PointerType {
		public ssh_buffer(Pointer address) {
			super(address);
		}
		public ssh_buffer() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_session extends PointerType {
		public ssh_session(Pointer address) {
			super(address);
		}
		public ssh_session() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_bind extends PointerType {
		public ssh_bind(Pointer address) {
			super(address);
		}
		public ssh_bind() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_public_key extends PointerType {
		public ssh_public_key(Pointer address) {
			super(address);
		}
		public ssh_public_key() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class sftp_ext extends PointerType {
		public sftp_ext(Pointer address) {
			super(address);
		}
		public sftp_ext() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class ssh_message extends PointerType {
		public ssh_message(Pointer address) {
			super(address);
		}
		public ssh_message() {
			super();
		}
	};
}
