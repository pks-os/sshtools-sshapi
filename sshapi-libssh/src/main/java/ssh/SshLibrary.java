package ssh;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>ssh</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SshLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "ssh";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(SshLibrary.JNA_LIBRARY_NAME);
	public static final SshLibrary INSTANCE = Native.loadLibrary(SshLibrary.JNA_LIBRARY_NAME, SshLibrary.class);
	/**
	 * the offsets of methods<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:33</i><br>
	 * enum values
	 */
	public static interface ssh_kex_types_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:23</i> */
		public static final int SSH_KEX = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:24</i> */
		public static final int SSH_HOSTKEYS = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:25</i> */
		public static final int SSH_CRYPT_C_S = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:26</i> */
		public static final int SSH_CRYPT_S_C = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:27</i> */
		public static final int SSH_MAC_C_S = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:28</i> */
		public static final int SSH_MAC_S_C = 5;
		/** <i>native declaration : /usr/include/libssh/libssh.h:29</i> */
		public static final int SSH_COMP_C_S = 6;
		/** <i>native declaration : /usr/include/libssh/libssh.h:30</i> */
		public static final int SSH_COMP_S_C = 7;
		/** <i>native declaration : /usr/include/libssh/libssh.h:31</i> */
		public static final int SSH_LANG_C_S = 8;
		/** <i>native declaration : /usr/include/libssh/libssh.h:32</i> */
		public static final int SSH_LANG_S_C = 9;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:41</i><br>
	 * enum values
	 */
	public static interface ssh_auth_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:35</i> */
		public static final int SSH_AUTH_SUCCESS = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:36</i> */
		public static final int SSH_AUTH_DENIED = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:37</i> */
		public static final int SSH_AUTH_PARTIAL = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:38</i> */
		public static final int SSH_AUTH_INFO = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:39</i> */
		public static final int SSH_AUTH_AGAIN = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:40</i> */
		public static final int SSH_AUTH_ERROR = -1;
	};
	/**
	 * messages<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:49</i><br>
	 * enum values
	 */
	public static interface ssh_requests_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:44</i> */
		public static final int SSH_REQUEST_AUTH = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:45</i> */
		public static final int SSH_REQUEST_CHANNEL_OPEN = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:46</i> */
		public static final int SSH_REQUEST_CHANNEL = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:47</i> */
		public static final int SSH_REQUEST_SERVICE = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:48</i> */
		public static final int SSH_REQUEST_GLOBAL = 5;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:57</i><br>
	 * enum values
	 */
	public static interface ssh_channel_type_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:51</i> */
		public static final int SSH_CHANNEL_UNKNOWN = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:52</i> */
		public static final int SSH_CHANNEL_SESSION = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:53</i> */
		public static final int SSH_CHANNEL_DIRECT_TCPIP = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:54</i> */
		public static final int SSH_CHANNEL_FORWARDED_TCPIP = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:55</i> */
		public static final int SSH_CHANNEL_X11 = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:56</i> */
		public static final int SSH_CHANNEL_AUTH_AGENT = 5;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:67</i><br>
	 * enum values
	 */
	public static interface ssh_channel_requests_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:59</i> */
		public static final int SSH_CHANNEL_REQUEST_UNKNOWN = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:60</i> */
		public static final int SSH_CHANNEL_REQUEST_PTY = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:61</i> */
		public static final int SSH_CHANNEL_REQUEST_EXEC = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:62</i> */
		public static final int SSH_CHANNEL_REQUEST_SHELL = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:63</i> */
		public static final int SSH_CHANNEL_REQUEST_ENV = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:64</i> */
		public static final int SSH_CHANNEL_REQUEST_SUBSYSTEM = 5;
		/** <i>native declaration : /usr/include/libssh/libssh.h:65</i> */
		public static final int SSH_CHANNEL_REQUEST_WINDOW_CHANGE = 6;
		/** <i>native declaration : /usr/include/libssh/libssh.h:66</i> */
		public static final int SSH_CHANNEL_REQUEST_X11 = 7;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:73</i><br>
	 * enum values
	 */
	public static interface ssh_global_requests_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:69</i> */
		public static final int SSH_GLOBAL_REQUEST_UNKNOWN = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:70</i> */
		public static final int SSH_GLOBAL_REQUEST_TCPIP_FORWARD = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:71</i> */
		public static final int SSH_GLOBAL_REQUEST_CANCEL_TCPIP_FORWARD = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:72</i> */
		public static final int SSH_GLOBAL_REQUEST_KEEPALIVE = 3;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:79</i><br>
	 * enum values
	 */
	public static interface ssh_publickey_state_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:75</i> */
		public static final int SSH_PUBLICKEY_STATE_ERROR = -1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:76</i> */
		public static final int SSH_PUBLICKEY_STATE_NONE = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:77</i> */
		public static final int SSH_PUBLICKEY_STATE_VALID = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:78</i> */
		public static final int SSH_PUBLICKEY_STATE_WRONG = 2;
	};
	/**
	 * Output buffer not empty<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:88</i><br>
	 * enum values
	 */
	public static interface ssh_server_known_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:82</i> */
		public static final int SSH_SERVER_ERROR = -1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:83</i> */
		public static final int SSH_SERVER_NOT_KNOWN = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:84</i> */
		public static final int SSH_SERVER_KNOWN_OK = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:85</i> */
		public static final int SSH_SERVER_KNOWN_CHANGED = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:86</i> */
		public static final int SSH_SERVER_FOUND_OTHER = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:87</i> */
		public static final int SSH_SERVER_FILE_NOT_FOUND = 4;
	};
	/**
	 * errors<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:95</i><br>
	 * enum values
	 */
	public static interface ssh_error_types_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:91</i> */
		public static final int SSH_NO_ERROR = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:92</i> */
		public static final int SSH_REQUEST_DENIED = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:93</i> */
		public static final int SSH_FATAL = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:94</i> */
		public static final int SSH_EINTR = 3;
	};
	/**
	 * some types for keys<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:106</i><br>
	 * enum values
	 */
	public static interface ssh_keytypes_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:98</i> */
		public static final int SSH_KEYTYPE_UNKNOWN = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:99</i> */
		public static final int SSH_KEYTYPE_DSS = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:100</i> */
		public static final int SSH_KEYTYPE_RSA = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:101</i> */
		public static final int SSH_KEYTYPE_RSA1 = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:102</i> */
		public static final int SSH_KEYTYPE_ECDSA = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:103</i> */
		public static final int SSH_KEYTYPE_ED25519 = 5;
		/** <i>native declaration : /usr/include/libssh/libssh.h:104</i> */
		public static final int SSH_KEYTYPE_DSS_CERT01 = 6;
		/** <i>native declaration : /usr/include/libssh/libssh.h:105</i> */
		public static final int SSH_KEYTYPE_RSA_CERT01 = 7;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:110</i><br>
	 * enum values
	 */
	public static interface ssh_keycmp_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:108</i> */
		public static final int SSH_KEY_CMP_PUBLIC = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:109</i> */
		public static final int SSH_KEY_CMP_PRIVATE = 1;
	};
	public static final int SSH_LOG_NOLOG = 0;
	public static final int SSH_LOG_WARNING = 1;
	public static final int SSH_LOG_PROTOCOL = 2;
	public static final int SSH_LOG_PACKET = 3;
	public static final int SSH_LOG_FUNCTIONS = 4;
	/**
	 * @}<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:155</i><br>
	 * enum values
	 */
	public static interface ssh_options_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:124</i> */
		public static final int SSH_OPTIONS_HOST = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:125</i> */
		public static final int SSH_OPTIONS_PORT = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:126</i> */
		public static final int SSH_OPTIONS_PORT_STR = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:127</i> */
		public static final int SSH_OPTIONS_FD = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:128</i> */
		public static final int SSH_OPTIONS_USER = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:129</i> */
		public static final int SSH_OPTIONS_SSH_DIR = 5;
		/** <i>native declaration : /usr/include/libssh/libssh.h:130</i> */
		public static final int SSH_OPTIONS_IDENTITY = 6;
		/** <i>native declaration : /usr/include/libssh/libssh.h:131</i> */
		public static final int SSH_OPTIONS_ADD_IDENTITY = 7;
		/** <i>native declaration : /usr/include/libssh/libssh.h:132</i> */
		public static final int SSH_OPTIONS_KNOWNHOSTS = 8;
		/** <i>native declaration : /usr/include/libssh/libssh.h:133</i> */
		public static final int SSH_OPTIONS_TIMEOUT = 9;
		/** <i>native declaration : /usr/include/libssh/libssh.h:134</i> */
		public static final int SSH_OPTIONS_TIMEOUT_USEC = 10;
		/** <i>native declaration : /usr/include/libssh/libssh.h:135</i> */
		public static final int SSH_OPTIONS_SSH1 = 11;
		/** <i>native declaration : /usr/include/libssh/libssh.h:136</i> */
		public static final int SSH_OPTIONS_SSH2 = 12;
		/** <i>native declaration : /usr/include/libssh/libssh.h:137</i> */
		public static final int SSH_OPTIONS_LOG_VERBOSITY = 13;
		/** <i>native declaration : /usr/include/libssh/libssh.h:138</i> */
		public static final int SSH_OPTIONS_LOG_VERBOSITY_STR = 14;
		/** <i>native declaration : /usr/include/libssh/libssh.h:139</i> */
		public static final int SSH_OPTIONS_CIPHERS_C_S = 15;
		/** <i>native declaration : /usr/include/libssh/libssh.h:140</i> */
		public static final int SSH_OPTIONS_CIPHERS_S_C = 16;
		/** <i>native declaration : /usr/include/libssh/libssh.h:141</i> */
		public static final int SSH_OPTIONS_COMPRESSION_C_S = 17;
		/** <i>native declaration : /usr/include/libssh/libssh.h:142</i> */
		public static final int SSH_OPTIONS_COMPRESSION_S_C = 18;
		/** <i>native declaration : /usr/include/libssh/libssh.h:143</i> */
		public static final int SSH_OPTIONS_PROXYCOMMAND = 19;
		/** <i>native declaration : /usr/include/libssh/libssh.h:144</i> */
		public static final int SSH_OPTIONS_BINDADDR = 20;
		/** <i>native declaration : /usr/include/libssh/libssh.h:145</i> */
		public static final int SSH_OPTIONS_STRICTHOSTKEYCHECK = 21;
		/** <i>native declaration : /usr/include/libssh/libssh.h:146</i> */
		public static final int SSH_OPTIONS_COMPRESSION = 22;
		/** <i>native declaration : /usr/include/libssh/libssh.h:147</i> */
		public static final int SSH_OPTIONS_COMPRESSION_LEVEL = 23;
		/** <i>native declaration : /usr/include/libssh/libssh.h:148</i> */
		public static final int SSH_OPTIONS_KEY_EXCHANGE = 24;
		/** <i>native declaration : /usr/include/libssh/libssh.h:149</i> */
		public static final int SSH_OPTIONS_HOSTKEYS = 25;
		/** <i>native declaration : /usr/include/libssh/libssh.h:150</i> */
		public static final int SSH_OPTIONS_GSSAPI_SERVER_IDENTITY = 26;
		/** <i>native declaration : /usr/include/libssh/libssh.h:151</i> */
		public static final int SSH_OPTIONS_GSSAPI_CLIENT_IDENTITY = 27;
		/** <i>native declaration : /usr/include/libssh/libssh.h:152</i> */
		public static final int SSH_OPTIONS_GSSAPI_DELEGATE_CREDENTIALS = 28;
		/** <i>native declaration : /usr/include/libssh/libssh.h:153</i> */
		public static final int SSH_OPTIONS_HMAC_C_S = 29;
		/** <i>native declaration : /usr/include/libssh/libssh.h:154</i> */
		public static final int SSH_OPTIONS_HMAC_S_C = 30;
	};
	public static final int SSH_SCP_WRITE = 0;
	public static final int SSH_SCP_READ = 1;
	public static final int SSH_SCP_RECURSIVE = 0x10;
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:167</i><br>
	 * enum values
	 */
	public static interface ssh_scp_request_types {
		/** <i>native declaration : /usr/include/libssh/libssh.h:162</i> */
		public static final int SSH_SCP_REQUEST_NEWDIR = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:163</i> */
		public static final int SSH_SCP_REQUEST_NEWFILE = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:164</i> */
		public static final int SSH_SCP_REQUEST_EOF = 3;
		/** <i>native declaration : /usr/include/libssh/libssh.h:165</i> */
		public static final int SSH_SCP_REQUEST_ENDDIR = 4;
		/** <i>native declaration : /usr/include/libssh/libssh.h:166</i> */
		public static final int SSH_SCP_REQUEST_WARNING = 5;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:172</i><br>
	 * enum values
	 */
	public static interface ssh_connector_flags_e {
		/** <i>native declaration : /usr/include/libssh/libssh.h:169</i> */
		public static final int SSH_CONNECTOR_STDOUT = 1;
		/** <i>native declaration : /usr/include/libssh/libssh.h:170</i> */
		public static final int SSH_CONNECTOR_STDERR = 2;
		/** <i>native declaration : /usr/include/libssh/libssh.h:171</i> */
		public static final int SSH_CONNECTOR_BOTH = 3;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/libssh.h:303</i><br>
	 * enum values
	 */
	public static interface ssh_publickey_hash_type {
		/** <i>native declaration : /usr/include/libssh/libssh.h:301</i> */
		public static final int SSH_PUBLICKEY_HASH_SHA1 = 0;
		/** <i>native declaration : /usr/include/libssh/libssh.h:302</i> */
		public static final int SSH_PUBLICKEY_HASH_MD5 = 1;
	};
	/**
	 * <i>native declaration : /usr/include/libssh/server.h:13</i><br>
	 * enum values
	 */
	public static interface ssh_bind_options_e {
		/** <i>native declaration : /usr/include/libssh/server.h:2</i> */
		public static final int SSH_BIND_OPTIONS_BINDADDR = 0;
		/** <i>native declaration : /usr/include/libssh/server.h:3</i> */
		public static final int SSH_BIND_OPTIONS_BINDPORT = 1;
		/** <i>native declaration : /usr/include/libssh/server.h:4</i> */
		public static final int SSH_BIND_OPTIONS_BINDPORT_STR = 2;
		/** <i>native declaration : /usr/include/libssh/server.h:5</i> */
		public static final int SSH_BIND_OPTIONS_HOSTKEY = 3;
		/** <i>native declaration : /usr/include/libssh/server.h:6</i> */
		public static final int SSH_BIND_OPTIONS_DSAKEY = 4;
		/** <i>native declaration : /usr/include/libssh/server.h:7</i> */
		public static final int SSH_BIND_OPTIONS_RSAKEY = 5;
		/** <i>native declaration : /usr/include/libssh/server.h:8</i> */
		public static final int SSH_BIND_OPTIONS_BANNER = 6;
		/** <i>native declaration : /usr/include/libssh/server.h:9</i> */
		public static final int SSH_BIND_OPTIONS_LOG_VERBOSITY = 7;
		/** <i>native declaration : /usr/include/libssh/server.h:10</i> */
		public static final int SSH_BIND_OPTIONS_LOG_VERBOSITY_STR = 8;
		/** <i>native declaration : /usr/include/libssh/server.h:11</i> */
		public static final int SSH_BIND_OPTIONS_ECDSAKEY = 9;
		/** <i>native declaration : /usr/include/libssh/server.h:12</i> */
		public static final int SSH_BIND_OPTIONS_IMPORT_KEY = 10;
	};
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int LIBSSH_VERSION_MAJOR = 0;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int LIBSSH_VERSION_MINOR = 7;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int LIBSSH_VERSION_MICRO = 0;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int LIBSSH_VERSION_INT = (0) << 16 | (7) << 8 | (0);
	/**
	 * define<br>
	 * Conversion Error : 0.7.<br>
	 * SKIPPED:<br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:0</i><br>
	 * 0.7.
	 */
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_CRYPT = 2;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_MAC = 3;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_COMP = 4;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_LANG = 5;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AUTH_METHOD_UNKNOWN = 0;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AUTH_METHOD_NONE = 0x0001;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AUTH_METHOD_PASSWORD = 0x0002;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AUTH_METHOD_PUBLICKEY = 0x0004;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AUTH_METHOD_HOSTBASED = 0x0008;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AUTH_METHOD_INTERACTIVE = 0x0010;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AUTH_METHOD_GSSAPI_MIC = 0x0020;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_CLOSED = 0x01;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_READ_PENDING = 0x02;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_CLOSED_ERROR = 0x04;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_WRITE_PENDING = 0x08;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int MD5_DIGEST_LEN = 16;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_OK = 0;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_ERROR = -1;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_AGAIN = -2;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_EOF = -127;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_LOG_NONE = 0;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_LOG_WARN = 1;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_LOG_INFO = 2;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_LOG_DEBUG = 3;
	/** <i>native declaration : /usr/include/libssh/libssh.h</i> */
	public static final int SSH_LOG_TRACE = 4;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int LIBSFTP_VERSION = 3;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_HANDLES = 256;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_INIT = 1;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_VERSION = 2;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_OPEN = 3;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_CLOSE = 4;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_READ = 5;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_WRITE = 6;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_LSTAT = 7;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_FSTAT = 8;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_SETSTAT = 9;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_FSETSTAT = 10;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_OPENDIR = 11;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_READDIR = 12;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_REMOVE = 13;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_MKDIR = 14;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_RMDIR = 15;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_REALPATH = 16;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_STAT = 17;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_RENAME = 18;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_READLINK = 19;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_SYMLINK = 20;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_STATUS = 101;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_HANDLE = 102;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_DATA = 103;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_NAME = 104;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_ATTRS = 105;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_EXTENDED = 200;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXP_EXTENDED_REPLY = 201;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_SIZE = 0x00000001;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_PERMISSIONS = 0x00000004;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_ACCESSTIME = 0x00000008;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_ACMODTIME = 0x00000008;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_CREATETIME = 0x00000010;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_MODIFYTIME = 0x00000020;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_ACL = 0x00000040;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_OWNERGROUP = 0x00000080;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_SUBSECOND_TIMES = 0x00000100;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_EXTENDED = 0x80000000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_ATTR_UIDGID = 0x00000002;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_TYPE_REGULAR = 1;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_TYPE_DIRECTORY = 2;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_TYPE_SYMLINK = 3;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_TYPE_SPECIAL = 4;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FILEXFER_TYPE_UNKNOWN = 5;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_OK = 0;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_EOF = 1;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_NO_SUCH_FILE = 2;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_PERMISSION_DENIED = 3;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_FAILURE = 4;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_BAD_MESSAGE = 5;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_NO_CONNECTION = 6;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_CONNECTION_LOST = 7;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_OP_UNSUPPORTED = 8;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_INVALID_HANDLE = 9;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_NO_SUCH_PATH = 10;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_FILE_ALREADY_EXISTS = 11;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_WRITE_PROTECT = 12;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FX_NO_MEDIA = 13;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_READ = 0x01;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_WRITE = 0x02;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_APPEND = 0x04;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_CREAT = 0x08;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_TRUNC = 0x10;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_EXCL = 0x20;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_TEXT = 0x40;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFMT = 0170000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFSOCK = 140000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFLNK = 120000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFREG = 100000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFBLK = 060000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFDIR = 040000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFCHR = 020000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_S_IFIFO = 010000;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_RENAME_OVERWRITE = 0x00000001;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_RENAME_ATOMIC = 0x00000002;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXF_RENAME_NATIVE = 0x00000004;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_OPEN = 3;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_CLOSE = 4;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_READ = 5;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_WRITE = 6;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_LSTAT = 7;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_FSTAT = 8;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_SETSTAT = 9;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_FSETSTAT = 10;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_OPENDIR = 11;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_READDIR = 12;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_REMOVE = 13;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_MKDIR = 14;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_RMDIR = 15;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_REALPATH = 16;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_STAT = 17;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_RENAME = 18;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_READLINK = 19;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SFTP_SYMLINK = 20;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXE_STATVFS_ST_RDONLY = 0x1;
	/** <i>native declaration : /usr/include/libssh/sftp.h</i> */
	public static final int SSH_FXE_STATVFS_ST_NOSUID = 0x2;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_SOCKET_FLOW_WRITEWILLBLOCK = 1;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_SOCKET_FLOW_WRITEWONTBLOCK = 2;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_SOCKET_EXCEPTION_EOF = 1;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_SOCKET_EXCEPTION_ERROR = 2;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_SOCKET_CONNECTED_OK = 1;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_SOCKET_CONNECTED_ERROR = 2;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_SOCKET_CONNECTED_TIMEOUT = 3;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_PACKET_USED = 1;
	/** <i>native declaration : /usr/include/libssh/callbacks.h</i> */
	public static final int SSH_PACKET_NOT_USED = 2;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_DISCONNECT = 1;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_IGNORE = 2;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_UNIMPLEMENTED = 3;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_DEBUG = 4;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_SERVICE_REQUEST = 5;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_SERVICE_ACCEPT = 6;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEXINIT = 20;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_NEWKEYS = 21;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEXDH_INIT = 30;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEXDH_REPLY = 31;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEX_ECDH_INIT = 30;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEX_ECDH_REPLY = 31;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_ECMQV_INIT = 30;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_ECMQV_REPLY = 31;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEX_DH_GEX_REQUEST_OLD = 30;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEX_DH_GEX_GROUP = 31;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEX_DH_GEX_INIT = 32;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEX_DH_GEX_REPLY = 33;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_KEX_DH_GEX_REQUEST = 34;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_REQUEST = 50;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_FAILURE = 51;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_SUCCESS = 52;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_BANNER = 53;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_PK_OK = 60;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_PASSWD_CHANGEREQ = 60;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_INFO_REQUEST = 60;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_GSSAPI_RESPONSE = 60;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_INFO_RESPONSE = 61;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_GSSAPI_TOKEN = 61;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE = 63;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_GSSAPI_ERROR = 64;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_GSSAPI_ERRTOK = 65;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_USERAUTH_GSSAPI_MIC = 66;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_GLOBAL_REQUEST = 80;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_REQUEST_SUCCESS = 81;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_REQUEST_FAILURE = 82;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_OPEN = 90;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_OPEN_CONFIRMATION = 91;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_OPEN_FAILURE = 92;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_WINDOW_ADJUST = 93;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_DATA = 94;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_EXTENDED_DATA = 95;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_EOF = 96;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_CLOSE = 97;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_REQUEST = 98;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_SUCCESS = 99;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_MSG_CHANNEL_FAILURE = 100;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT = 1;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_PROTOCOL_ERROR = 2;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_KEY_EXCHANGE_FAILED = 3;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_HOST_AUTHENTICATION_FAILED = 4;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_RESERVED = 4;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_MAC_ERROR = 5;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_COMPRESSION_ERROR = 6;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_SERVICE_NOT_AVAILABLE = 7;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED = 8;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_HOST_KEY_NOT_VERIFIABLE = 9;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_CONNECTION_LOST = 10;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_BY_APPLICATION = 11;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_TOO_MANY_CONNECTIONS = 12;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_AUTH_CANCELLED_BY_USER = 13;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE = 14;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_DISCONNECT_ILLEGAL_USER_NAME = 15;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_OPEN_ADMINISTRATIVELY_PROHIBITED = 1;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_OPEN_CONNECT_FAILED = 2;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_OPEN_UNKNOWN_CHANNEL_TYPE = 3;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_OPEN_RESOURCE_SHORTAGE = 4;
	/** <i>native declaration : /usr/include/libssh/ssh2.h</i> */
	public static final int SSH2_EXTENDED_DATA_STDERR = 1;
	/** <i>native declaration : /usr/include/libssh/libssh.h:400</i> */
	public interface ssh_auth_callback extends Callback {
		int apply(Pointer prompt, Pointer buf, NativeSize len, int echo, int verify, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/libssh.h:572</i> */
	public interface ssh_event_callback extends Callback {
		int apply(Pointer fd, int revents, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:7</i> */
	public interface ssh_callback_int extends Callback {
		void apply(int code, Pointer user);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:17</i> */
	public interface ssh_callback_data extends Callback {
		int apply(Pointer data, NativeSize len, Pointer user);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:18</i> */
	public interface ssh_callback_int_int extends Callback {
		void apply(int code, int errno_code, Pointer user);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:19</i> */
	public interface ssh_message_callback extends Callback {
		int apply(Pointer message, Pointer user);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:20</i> */
	public interface ssh_channel_callback_int extends Callback {
		int apply(Pointer channel, int code, Pointer user);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:21</i> */
	public interface ssh_channel_callback_data extends Callback {
		int apply(Pointer channel, int code, Pointer data, NativeSize len, Pointer user);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:29</i> */
	public interface ssh_log_callback extends Callback {
		void apply(Pointer session, int priority, Pointer message, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:38</i> */
	public interface ssh_logging_callback extends Callback {
		void apply(int priority, Pointer function, Pointer buffer, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:46</i> */
	public interface ssh_status_callback extends Callback {
		void apply(Pointer session, float status, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:54</i> */
	public interface ssh_global_request_callback extends Callback {
		void apply(Pointer session, Pointer message, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:64</i> */
	public interface ssh_channel_open_request_x11_callback extends Callback {
		SshLibrary.ssh_channel apply(Pointer session, Pointer originator_address, int originator_port, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:74</i> */
	public interface ssh_channel_open_request_auth_agent_callback extends Callback {
		SshLibrary.ssh_channel apply(Pointer session, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:98</i> */
	public interface ssh_auth_password_callback extends Callback {
		int apply(Pointer session, Pointer user, Pointer password, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:109</i> */
	public interface ssh_auth_none_callback extends Callback {
		int apply(Pointer session, Pointer user, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:122</i> */
	public interface ssh_auth_gssapi_mic_callback extends Callback {
		int apply(Pointer session, Pointer user, Pointer principal, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:136</i> */
	public interface ssh_auth_pubkey_callback extends Callback {
		int apply(Pointer session, Pointer user, SshLibrary.ssh_key_struct pubkey, byte signature_state, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:145</i> */
	public interface ssh_service_request_callback extends Callback {
		int apply(Pointer session, Pointer service, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:154</i> */
	public interface ssh_channel_open_request_session_callback extends Callback {
		SshLibrary.ssh_channel apply(Pointer session, Pointer userdata);
	};
	/**
	 * @brief handle the beginning of a GSSAPI authentication, server side.<br>
	 * @param session current session handler<br>
	 * @param user the username of the client<br>
	 * @param n_oid number of available oids<br>
	 * @param oids OIDs provided by the client<br>
	 * @returns an ssh_string containing the chosen OID, that's supported by both<br>
	 * client and server.<br>
	 * @warning It is not necessary to fill this callback in if libssh is linked<br>
	 * with libgssapi.<br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:166</i>
	 */
	public interface ssh_string extends Callback {
		SshLibrary.ssh_string_callback apply(Pointer ssh_gssapi_select_oid_callback);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:179</i> */
	public interface ssh_gssapi_accept_sec_ctx_callback extends Callback {
		int apply(Pointer session, SshLibrary.ssh_string input_token, SshLibrary.ssh_string output_token, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:191</i> */
	public interface ssh_gssapi_verify_mic_callback extends Callback {
		int apply(Pointer session, SshLibrary.ssh_string mic, Pointer mic_buffer, NativeSize mic_buffer_size, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:247</i> */
	public interface ssh_packet_callback extends Callback {
		int apply(Pointer session, byte type, Pointer packet, Pointer user);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:292</i> */
	public interface ssh_channel_data_callback extends Callback {
		int apply(Pointer session, Pointer channel, Pointer data, int len, int is_stderr, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:299</i> */
	public interface ssh_channel_eof_callback extends Callback {
		void apply(Pointer session, Pointer channel, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:306</i> */
	public interface ssh_channel_close_callback extends Callback {
		void apply(Pointer session, Pointer channel, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:314</i> */
	public interface ssh_channel_signal_callback extends Callback {
		void apply(Pointer session, Pointer channel, Pointer signal, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:321</i> */
	public interface ssh_channel_exit_status_callback extends Callback {
		void apply(Pointer session, Pointer channel, int exit_status, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:332</i> */
	public interface ssh_channel_exit_signal_callback extends Callback {
		void apply(Pointer session, Pointer channel, Pointer signal, int core, Pointer errmsg, Pointer lang, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:345</i> */
	public interface ssh_channel_pty_request_callback extends Callback {
		int apply(Pointer session, Pointer channel, Pointer term, int width, int height, int pxwidth, int pwheight, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:353</i> */
	public interface ssh_channel_shell_request_callback extends Callback {
		int apply(Pointer session, Pointer channel, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:361</i> */
	public interface ssh_channel_auth_agent_req_callback extends Callback {
		void apply(Pointer session, Pointer channel, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:369</i> */
	public interface ssh_channel_x11_req_callback extends Callback {
		void apply(Pointer session, Pointer channel, int single_connection, Pointer auth_protocol, Pointer auth_cookie, int screen_number, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:381</i> */
	public interface ssh_channel_pty_window_change_callback extends Callback {
		int apply(Pointer session, Pointer channel, int width, int height, int pxwidth, int pwheight, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:390</i> */
	public interface ssh_channel_exec_request_callback extends Callback {
		int apply(Pointer session, Pointer channel, Pointer command, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:402</i> */
	public interface ssh_channel_env_request_callback extends Callback {
		int apply(Pointer session, Pointer channel, Pointer env_name, Pointer env_value, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:411</i> */
	public interface ssh_channel_subsystem_request_callback extends Callback {
		int apply(Pointer session, Pointer channel, Pointer subsystem, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:420</i> */
	public interface ssh_channel_write_wontblock_callback extends Callback {
		int apply(Pointer session, Pointer channel, NativeSize bytes, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:488</i> */
	public interface ssh_thread_callback extends Callback {
		int apply(PointerByReference lock);
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:489</i> */
	public interface ssh_thread_id_callback extends Callback {
		NativeLong apply();
	};
	/** <i>native declaration : /usr/include/libssh/callbacks.h:543</i> */
	public interface ssh_string_callback extends Callback {
		int apply(Pointer session, Pointer user, int n_oid, SshLibrary.ssh_string oids, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/server.h:21</i> */
	public interface ssh_bind_incoming_connection_callback extends Callback {
		void apply(Pointer sshbind, Pointer userdata);
	};
	/** <i>native declaration : /usr/include/libssh/server.h:268</i> */
	public interface ssh_set_message_callback_ssh_bind_message_callback_callback extends Callback {
		int apply(Pointer session, Pointer msg, Pointer data);
	};
	/**
	 * Original signature : <code>int ssh_blocking_flush(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:174</i><br>
	 * @deprecated use the safer methods {@link #ssh_blocking_flush(ssh.SshLibrary.ssh_session, int)} and {@link #ssh_blocking_flush(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_blocking_flush(Pointer session, int timeout);
	/**
	 * Original signature : <code>int ssh_blocking_flush(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:174</i>
	 */
	int ssh_blocking_flush(SshLibrary.ssh_session session, int timeout);
	/**
	 * Original signature : <code>ssh_channel ssh_channel_accept_x11(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:176</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_accept_x11(ssh.SshLibrary.ssh_channel, int)} and {@link #ssh_channel_accept_x11(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel ssh_channel_accept_x11(Pointer channel, int timeout_ms);
	/**
	 * Original signature : <code>ssh_channel ssh_channel_accept_x11(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:176</i>
	 */
	SshLibrary.ssh_channel ssh_channel_accept_x11(SshLibrary.ssh_channel channel, int timeout_ms);
	/**
	 * Original signature : <code>int ssh_channel_change_pty_size(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:178</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_change_pty_size(ssh.SshLibrary.ssh_channel, int, int)} and {@link #ssh_channel_change_pty_size(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int ssh_channel_change_pty_size(Pointer channel, int cols, int rows);
	/**
	 * Original signature : <code>int ssh_channel_change_pty_size(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:178</i>
	 */
	int ssh_channel_change_pty_size(SshLibrary.ssh_channel channel, int cols, int rows);
	/**
	 * Original signature : <code>int ssh_channel_close(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:180</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_close(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_close(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_close(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_close(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:180</i>
	 */
	int ssh_channel_close(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>void ssh_channel_free(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:182</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_free(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_channel_free(Pointer channel);
	/**
	 * Original signature : <code>void ssh_channel_free(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:182</i>
	 */
	void ssh_channel_free(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_get_exit_status(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:184</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_get_exit_status(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_get_exit_status(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_get_exit_status(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_get_exit_status(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:184</i>
	 */
	int ssh_channel_get_exit_status(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_session ssh_channel_get_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:186</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_get_session(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_get_session(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_session ssh_channel_get_session(Pointer channel);
	/**
	 * Original signature : <code>ssh_session ssh_channel_get_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:186</i>
	 */
	SshLibrary.ssh_session ssh_channel_get_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_is_closed(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:188</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_is_closed(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_is_closed(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_is_closed(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_is_closed(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:188</i>
	 */
	int ssh_channel_is_closed(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_is_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:190</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_is_eof(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_is_eof(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_is_eof(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_is_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:190</i>
	 */
	int ssh_channel_is_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_is_open(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:192</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_is_open(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_is_open(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_is_open(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_is_open(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:192</i>
	 */
	int ssh_channel_is_open(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_channel ssh_channel_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:194</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_new(ssh.SshLibrary.ssh_session)} and {@link #ssh_channel_new(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel ssh_channel_new(Pointer session);
	/**
	 * Original signature : <code>ssh_channel ssh_channel_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:194</i>
	 */
	SshLibrary.ssh_channel ssh_channel_new(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_channel_open_auth_agent(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:196</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_open_auth_agent(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_open_auth_agent(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_open_auth_agent(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_open_auth_agent(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:196</i>
	 */
	int ssh_channel_open_auth_agent(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:198</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_open_forward(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, int)} and {@link #ssh_channel_open_forward(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_open_forward(Pointer channel, Pointer remotehost, int remoteport, Pointer sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:198</i>
	 */
	int ssh_channel_open_forward(SshLibrary.ssh_channel channel, String remotehost, int remoteport, String sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_open_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:200</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_open_session(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_open_session(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_open_session(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_open_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:200</i>
	 */
	int ssh_channel_open_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_open_x11(ssh_channel, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:202</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_open_x11(ssh.SshLibrary.ssh_channel, java.lang.String, int)} and {@link #ssh_channel_open_x11(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_open_x11(Pointer channel, Pointer orig_addr, int orig_port);
	/**
	 * Original signature : <code>int ssh_channel_open_x11(ssh_channel, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:202</i>
	 */
	int ssh_channel_open_x11(SshLibrary.ssh_channel channel, String orig_addr, int orig_port);
	/**
	 * Original signature : <code>int ssh_channel_poll(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:204</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_poll(ssh.SshLibrary.ssh_channel, int)} and {@link #ssh_channel_poll(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_poll(Pointer channel, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_poll(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:204</i>
	 */
	int ssh_channel_poll(SshLibrary.ssh_channel channel, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_poll_timeout(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:206</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_poll_timeout(ssh.SshLibrary.ssh_channel, int, int)} and {@link #ssh_channel_poll_timeout(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int ssh_channel_poll_timeout(Pointer channel, int timeout, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_poll_timeout(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:206</i>
	 */
	int ssh_channel_poll_timeout(SshLibrary.ssh_channel channel, int timeout, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_read(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:208</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_read(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, int)} and {@link #ssh_channel_read(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int ssh_channel_read(Pointer channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_read(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:208</i>
	 */
	int ssh_channel_read(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_read_timeout(ssh_channel, void*, uint32_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:210</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_read_timeout(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, int, int)} and {@link #ssh_channel_read_timeout(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int ssh_channel_read_timeout(Pointer channel, Pointer dest, int count, int is_stderr, int timeout_ms);
	/**
	 * Original signature : <code>int ssh_channel_read_timeout(ssh_channel, void*, uint32_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:210</i>
	 */
	int ssh_channel_read_timeout(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr, int timeout_ms);
	/**
	 * Original signature : <code>int ssh_channel_read_nonblocking(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:212</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_read_nonblocking(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, int)} and {@link #ssh_channel_read_nonblocking(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int ssh_channel_read_nonblocking(Pointer channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_read_nonblocking(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:212</i>
	 */
	int ssh_channel_read_nonblocking(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int ssh_channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:214</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_env(ssh.SshLibrary.ssh_channel, java.lang.String, java.lang.String)} and {@link #ssh_channel_request_env(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_env(Pointer channel, Pointer name, Pointer value);
	/**
	 * Original signature : <code>int ssh_channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:214</i>
	 */
	int ssh_channel_request_env(SshLibrary.ssh_channel channel, String name, String value);
	/**
	 * Original signature : <code>int ssh_channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:216</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_exec(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #ssh_channel_request_exec(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_exec(Pointer channel, Pointer cmd);
	/**
	 * Original signature : <code>int ssh_channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:216</i>
	 */
	int ssh_channel_request_exec(SshLibrary.ssh_channel channel, String cmd);
	/**
	 * Original signature : <code>int ssh_channel_request_pty(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:218</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_pty(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_request_pty(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_pty(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_request_pty(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:218</i>
	 */
	int ssh_channel_request_pty(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:220</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_pty_size(ssh.SshLibrary.ssh_channel, java.lang.String, int, int)} and {@link #ssh_channel_request_pty_size(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int ssh_channel_request_pty_size(Pointer channel, Pointer term, int cols, int rows);
	/**
	 * Original signature : <code>int ssh_channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:220</i>
	 */
	int ssh_channel_request_pty_size(SshLibrary.ssh_channel channel, String term, int cols, int rows);
	/**
	 * Original signature : <code>int ssh_channel_request_shell(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:222</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_shell(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_request_shell(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_shell(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_request_shell(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:222</i>
	 */
	int ssh_channel_request_shell(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:224</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_send_signal(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #ssh_channel_request_send_signal(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_send_signal(Pointer channel, Pointer signum);
	/**
	 * Original signature : <code>int ssh_channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:224</i>
	 */
	int ssh_channel_request_send_signal(SshLibrary.ssh_channel channel, String signum);
	/**
	 * Original signature : <code>int ssh_channel_request_sftp(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:226</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_sftp(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_request_sftp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_sftp(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_request_sftp(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:226</i>
	 */
	int ssh_channel_request_sftp(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:228</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_subsystem(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #ssh_channel_request_subsystem(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_subsystem(Pointer channel, Pointer subsystem);
	/**
	 * Original signature : <code>int ssh_channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:228</i>
	 */
	int ssh_channel_request_subsystem(SshLibrary.ssh_channel channel, String subsystem);
	/**
	 * Original signature : <code>int ssh_channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:230</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_x11(ssh.SshLibrary.ssh_channel, int, java.lang.String, java.lang.String, int)} and {@link #ssh_channel_request_x11(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_request_x11(Pointer channel, int single_connection, Pointer protocol, Pointer cookie, int screen_number);
	/**
	 * Original signature : <code>int ssh_channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:230</i>
	 */
	int ssh_channel_request_x11(SshLibrary.ssh_channel channel, int single_connection, String protocol, String cookie, int screen_number);
	/**
	 * Original signature : <code>int ssh_channel_request_auth_agent(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:232</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_auth_agent(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_request_auth_agent(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_auth_agent(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_request_auth_agent(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:232</i>
	 */
	int ssh_channel_request_auth_agent(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_send_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:234</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_send_eof(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_send_eof(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_send_eof(Pointer channel);
	/**
	 * Original signature : <code>int ssh_channel_send_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:234</i>
	 */
	int ssh_channel_send_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_channel_select(ssh_channel*, ssh_channel*, ssh_channel*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:236</i><br>
	 * @deprecated use the safer method {@link #ssh_channel_select(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, ssh.SshLibrary.timeval)} instead
	 */
	@Deprecated 
	int ssh_channel_select(Pointer readchans, Pointer writechans, Pointer exceptchans, SshLibrary.timeval timeout);
	/**
	 * Original signature : <code>int ssh_channel_select(ssh_channel*, ssh_channel*, ssh_channel*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:236</i>
	 */
	int ssh_channel_select(PointerByReference readchans, PointerByReference writechans, PointerByReference exceptchans, SshLibrary.timeval timeout);
	/**
	 * Original signature : <code>void ssh_channel_set_blocking(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:238</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_set_blocking(ssh.SshLibrary.ssh_channel, int)} and {@link #ssh_channel_set_blocking(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void ssh_channel_set_blocking(Pointer channel, int blocking);
	/**
	 * Original signature : <code>void ssh_channel_set_blocking(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:238</i>
	 */
	void ssh_channel_set_blocking(SshLibrary.ssh_channel channel, int blocking);
	/**
	 * Original signature : <code>void ssh_channel_set_counter(ssh_channel, ssh_counter)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:240</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_set_counter(ssh.SshLibrary.ssh_channel, ssh.ssh_counter_struct)} and {@link #ssh_channel_set_counter(com.sun.jna.Pointer, ssh.ssh_counter_struct)} instead
	 */
	@Deprecated 
	void ssh_channel_set_counter(Pointer channel, ssh_counter_struct counter);
	/**
	 * Original signature : <code>void ssh_channel_set_counter(ssh_channel, ssh_counter)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:240</i>
	 */
	void ssh_channel_set_counter(SshLibrary.ssh_channel channel, ssh_counter_struct counter);
	/**
	 * Original signature : <code>int ssh_channel_write(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:242</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_write(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int)} and {@link #ssh_channel_write(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_write(Pointer channel, Pointer data, int len);
	/**
	 * Original signature : <code>int ssh_channel_write(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:242</i>
	 */
	int ssh_channel_write(SshLibrary.ssh_channel channel, Pointer data, int len);
	/**
	 * Original signature : <code>int ssh_channel_write_stderr(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:244</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_write_stderr(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int)} and {@link #ssh_channel_write_stderr(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_write_stderr(Pointer channel, Pointer data, int len);
	/**
	 * Original signature : <code>int ssh_channel_write_stderr(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:244</i>
	 */
	int ssh_channel_write_stderr(SshLibrary.ssh_channel channel, Pointer data, int len);
	/**
	 * Original signature : <code>uint32_t ssh_channel_window_size(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:246</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_window_size(ssh.SshLibrary.ssh_channel)} and {@link #ssh_channel_window_size(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_window_size(Pointer channel);
	/**
	 * Original signature : <code>uint32_t ssh_channel_window_size(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:246</i>
	 */
	int ssh_channel_window_size(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>char* ssh_basename(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:248</i><br>
	 * @deprecated use the safer methods {@link #ssh_basename(java.lang.String)} and {@link #ssh_basename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ssh_basename(Pointer path);
	/**
	 * Original signature : <code>char* ssh_basename(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:248</i>
	 */
	Pointer ssh_basename(String path);
	/**
	 * Original signature : <code>void ssh_clean_pubkey_hash(unsigned char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:250</i>
	 */
	void ssh_clean_pubkey_hash(PointerByReference hash);
	/**
	 * Original signature : <code>int ssh_connect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:252</i><br>
	 * @deprecated use the safer methods {@link #ssh_connect(ssh.SshLibrary.ssh_session)} and {@link #ssh_connect(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_connect(Pointer session);
	/**
	 * Original signature : <code>int ssh_connect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:252</i>
	 */
	int ssh_connect(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>ssh_connector ssh_connector_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:254</i><br>
	 * @deprecated use the safer methods {@link #ssh_connector_new(ssh.SshLibrary.ssh_session)} and {@link #ssh_connector_new(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_connector ssh_connector_new(Pointer session);
	/**
	 * Original signature : <code>ssh_connector ssh_connector_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:254</i>
	 */
	SshLibrary.ssh_connector ssh_connector_new(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_connector_free(ssh_connector)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:256</i><br>
	 * @deprecated use the safer methods {@link #ssh_connector_free(ssh.SshLibrary.ssh_connector)} and {@link #ssh_connector_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_connector_free(Pointer connector);
	/**
	 * Original signature : <code>void ssh_connector_free(ssh_connector)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:256</i>
	 */
	void ssh_connector_free(SshLibrary.ssh_connector connector);
	/**
	 * Original signature : <code>int ssh_connector_set_in_channel(ssh_connector, ssh_channel, ssh_connector_flags_e)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:258</i><br>
	 * @deprecated use the safer methods {@link #ssh_connector_set_in_channel(ssh.SshLibrary.ssh_connector, ssh.SshLibrary.ssh_channel, int)} and {@link #ssh_connector_set_in_channel(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_connector_set_in_channel(Pointer connector, Pointer channel, int flags);
	/**
	 * Original signature : <code>int ssh_connector_set_in_channel(ssh_connector, ssh_channel, ssh_connector_flags_e)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:258</i>
	 */
	int ssh_connector_set_in_channel(SshLibrary.ssh_connector connector, SshLibrary.ssh_channel channel, int flags);
	/**
	 * Original signature : <code>int ssh_connector_set_out_channel(ssh_connector, ssh_channel, ssh_connector_flags_e)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:260</i><br>
	 * @deprecated use the safer methods {@link #ssh_connector_set_out_channel(ssh.SshLibrary.ssh_connector, ssh.SshLibrary.ssh_channel, int)} and {@link #ssh_connector_set_out_channel(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_connector_set_out_channel(Pointer connector, Pointer channel, int flags);
	/**
	 * Original signature : <code>int ssh_connector_set_out_channel(ssh_connector, ssh_channel, ssh_connector_flags_e)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:260</i>
	 */
	int ssh_connector_set_out_channel(SshLibrary.ssh_connector connector, SshLibrary.ssh_channel channel, int flags);
	/**
	 * Original signature : <code>void ssh_connector_set_in_fd(ssh_connector, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:262</i><br>
	 * @deprecated use the safer methods {@link #ssh_connector_set_in_fd(ssh.SshLibrary.ssh_connector, ssh.SshLibrary.socket_t)} and {@link #ssh_connector_set_in_fd(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_connector_set_in_fd(Pointer connector, Pointer fd);
	/**
	 * Original signature : <code>void ssh_connector_set_in_fd(ssh_connector, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:262</i>
	 */
	void ssh_connector_set_in_fd(SshLibrary.ssh_connector connector, SshLibrary.socket_t fd);
	/**
	 * Original signature : <code>void ssh_connector_set_out_fd(ssh_connector, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:264</i><br>
	 * @deprecated use the safer methods {@link #ssh_connector_set_out_fd(ssh.SshLibrary.ssh_connector, ssh.SshLibrary.socket_t)} and {@link #ssh_connector_set_out_fd(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_connector_set_out_fd(Pointer connector, Pointer fd);
	/**
	 * Original signature : <code>void ssh_connector_set_out_fd(ssh_connector, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:264</i>
	 */
	void ssh_connector_set_out_fd(SshLibrary.ssh_connector connector, SshLibrary.socket_t fd);
	/**
	 * Original signature : <code>char* ssh_copyright()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:266</i>
	 */
	String ssh_copyright();
	/**
	 * Original signature : <code>void ssh_disconnect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:268</i><br>
	 * @deprecated use the safer methods {@link #ssh_disconnect(ssh.SshLibrary.ssh_session)} and {@link #ssh_disconnect(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_disconnect(Pointer session);
	/**
	 * Original signature : <code>void ssh_disconnect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:268</i>
	 */
	void ssh_disconnect(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_dirname(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:270</i><br>
	 * @deprecated use the safer methods {@link #ssh_dirname(java.lang.String)} and {@link #ssh_dirname(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ssh_dirname(Pointer path);
	/**
	 * Original signature : <code>char* ssh_dirname(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:270</i>
	 */
	Pointer ssh_dirname(String path);
	/**
	 * Original signature : <code>int ssh_finalize()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:272</i>
	 */
	int ssh_finalize();
	/**
	 * REVERSE PORT FORWARDING<br>
	 * Original signature : <code>ssh_channel ssh_channel_accept_forward(ssh_session, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:277</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_accept_forward(ssh.SshLibrary.ssh_session, int, java.nio.IntBuffer)} and {@link #ssh_channel_accept_forward(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel ssh_channel_accept_forward(Pointer session, int timeout_ms, IntByReference destination_port);
	/**
	 * REVERSE PORT FORWARDING<br>
	 * Original signature : <code>ssh_channel ssh_channel_accept_forward(ssh_session, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:277</i>
	 */
	SshLibrary.ssh_channel ssh_channel_accept_forward(SshLibrary.ssh_session session, int timeout_ms, IntBuffer destination_port);
	/**
	 * Original signature : <code>int ssh_channel_cancel_forward(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:279</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_cancel_forward(ssh.SshLibrary.ssh_session, java.lang.String, int)} and {@link #ssh_channel_cancel_forward(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_cancel_forward(Pointer session, Pointer address, int port);
	/**
	 * Original signature : <code>int ssh_channel_cancel_forward(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:279</i>
	 */
	int ssh_channel_cancel_forward(SshLibrary.ssh_session session, String address, int port);
	/**
	 * Original signature : <code>int ssh_channel_listen_forward(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:281</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_listen_forward(ssh.SshLibrary.ssh_session, java.lang.String, int, java.nio.IntBuffer)} and {@link #ssh_channel_listen_forward(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ssh_channel_listen_forward(Pointer session, Pointer address, int port, IntByReference bound_port);
	/**
	 * Original signature : <code>int ssh_channel_listen_forward(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:281</i>
	 */
	int ssh_channel_listen_forward(SshLibrary.ssh_session session, String address, int port, IntBuffer bound_port);
	/**
	 * Original signature : <code>void ssh_free(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:283</i><br>
	 * @deprecated use the safer methods {@link #ssh_free(ssh.SshLibrary.ssh_session)} and {@link #ssh_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_free(Pointer session);
	/**
	 * Original signature : <code>void ssh_free(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:283</i>
	 */
	void ssh_free(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_disconnect_message(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:285</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_disconnect_message(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_disconnect_message(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_disconnect_message(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_disconnect_message(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:285</i>
	 */
	String ssh_get_disconnect_message(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_error(void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:287</i>
	 */
	String ssh_get_error(Pointer error);
	/**
	 * Original signature : <code>int ssh_get_error_code(void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:289</i>
	 */
	int ssh_get_error_code(Pointer error);
	/**
	 * Original signature : <code>socket_t ssh_get_fd(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:291</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_fd(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_fd(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.socket_t ssh_get_fd(Pointer session);
	/**
	 * Original signature : <code>socket_t ssh_get_fd(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:291</i>
	 */
	SshLibrary.socket_t ssh_get_fd(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_hexa(const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:293</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_hexa(byte[], com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ssh_get_hexa(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer ssh_get_hexa(Pointer what, NativeSize len);
	/**
	 * Original signature : <code>char* ssh_get_hexa(const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:293</i>
	 */
	Pointer ssh_get_hexa(byte what[], NativeSize len);
	/**
	 * Original signature : <code>char* ssh_get_issue_banner(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:295</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_issue_banner(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_issue_banner(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ssh_get_issue_banner(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_issue_banner(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:295</i>
	 */
	Pointer ssh_get_issue_banner(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_get_openssh_version(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:297</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_openssh_version(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_openssh_version(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_get_openssh_version(Pointer session);
	/**
	 * Original signature : <code>int ssh_get_openssh_version(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:297</i>
	 */
	int ssh_get_openssh_version(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_get_server_publickey(ssh_session, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:299</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_server_publickey(ssh.SshLibrary.ssh_session, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_get_server_publickey(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_get_server_publickey(Pointer session, Pointer key);
	/**
	 * Original signature : <code>int ssh_get_server_publickey(ssh_session, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:299</i>
	 */
	int ssh_get_server_publickey(SshLibrary.ssh_session session, PointerByReference key);
	/**
	 * Original signature : <code>int ssh_get_server_publickey(ssh_session, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:299</i>
	 */
	int ssh_get_server_publickey(Pointer session, PointerByReference key);
	/**
	 * Original signature : <code>int ssh_get_publickey_hash(const ssh_key, ssh_publickey_hash_type, unsigned char**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:305</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_publickey_hash(ssh.SshLibrary.ssh_key, int, com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link #ssh_get_publickey_hash(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} instead
	 */
	@Deprecated 
	int ssh_get_publickey_hash(Pointer key, int type, PointerByReference hash, NativeSizeByReference hlen);
	/**
	 * Original signature : <code>int ssh_get_publickey_hash(const ssh_key, ssh_publickey_hash_type, unsigned char**, size_t*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:305</i>
	 */
	int ssh_get_publickey_hash(SshLibrary.ssh_key key, int type, PointerByReference hash, NativeSizeByReference hlen);
	/**
	 * DEPRECATED FUNCTIONS<br>
	 * Original signature : <code>int ssh_get_pubkey_hash(ssh_session, unsigned char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:310</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_pubkey_hash(ssh.SshLibrary.ssh_session, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_get_pubkey_hash(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_get_pubkey_hash(Pointer session, PointerByReference hash);
	/**
	 * DEPRECATED FUNCTIONS<br>
	 * Original signature : <code>int ssh_get_pubkey_hash(ssh_session, unsigned char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:310</i>
	 */
	int ssh_get_pubkey_hash(SshLibrary.ssh_session session, PointerByReference hash);
	/**
	 * Original signature : <code>ssh_channel ssh_forward_accept(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:312</i><br>
	 * @deprecated use the safer methods {@link #ssh_forward_accept(ssh.SshLibrary.ssh_session, int)} and {@link #ssh_forward_accept(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel ssh_forward_accept(Pointer session, int timeout_ms);
	/**
	 * Original signature : <code>ssh_channel ssh_forward_accept(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:312</i>
	 */
	SshLibrary.ssh_channel ssh_forward_accept(SshLibrary.ssh_session session, int timeout_ms);
	/**
	 * Original signature : <code>int ssh_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:314</i><br>
	 * @deprecated use the safer methods {@link #ssh_forward_cancel(ssh.SshLibrary.ssh_session, java.lang.String, int)} and {@link #ssh_forward_cancel(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_forward_cancel(Pointer session, Pointer address, int port);
	/**
	 * Original signature : <code>int ssh_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:314</i>
	 */
	int ssh_forward_cancel(SshLibrary.ssh_session session, String address, int port);
	/**
	 * Original signature : <code>int ssh_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:316</i><br>
	 * @deprecated use the safer methods {@link #ssh_forward_listen(ssh.SshLibrary.ssh_session, java.lang.String, int, java.nio.IntBuffer)} and {@link #ssh_forward_listen(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ssh_forward_listen(Pointer session, Pointer address, int port, IntByReference bound_port);
	/**
	 * Original signature : <code>int ssh_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:316</i>
	 */
	int ssh_forward_listen(SshLibrary.ssh_session session, String address, int port, IntBuffer bound_port);
	/**
	 * Original signature : <code>int ssh_get_publickey(ssh_session, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:318</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_publickey(ssh.SshLibrary.ssh_session, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_get_publickey(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_get_publickey(Pointer session, Pointer key);
	/**
	 * Original signature : <code>int ssh_get_publickey(ssh_session, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:318</i>
	 */
	int ssh_get_publickey(SshLibrary.ssh_session session, PointerByReference key);
	/**
	 * Original signature : <code>int ssh_get_publickey(ssh_session, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:318</i>
	 */
	int ssh_get_publickey(Pointer session, PointerByReference key);
	/**
	 * Original signature : <code>int ssh_get_random(void*, int, strong int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:320</i>
	 */
	int ssh_get_random(Pointer where, int len, int int1);
	/**
	 * Original signature : <code>int ssh_get_version(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:322</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_version(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_version(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_get_version(Pointer session);
	/**
	 * Original signature : <code>int ssh_get_version(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:322</i>
	 */
	int ssh_get_version(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_get_status(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:324</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_status(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_status(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_get_status(Pointer session);
	/**
	 * Original signature : <code>int ssh_get_status(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:324</i>
	 */
	int ssh_get_status(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_get_poll_flags(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:326</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_poll_flags(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_poll_flags(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_get_poll_flags(Pointer session);
	/**
	 * Original signature : <code>int ssh_get_poll_flags(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:326</i>
	 */
	int ssh_get_poll_flags(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_init()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:328</i>
	 */
	int ssh_init();
	/**
	 * Original signature : <code>int ssh_is_blocking(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:330</i><br>
	 * @deprecated use the safer methods {@link #ssh_is_blocking(ssh.SshLibrary.ssh_session)} and {@link #ssh_is_blocking(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_is_blocking(Pointer session);
	/**
	 * Original signature : <code>int ssh_is_blocking(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:330</i>
	 */
	int ssh_is_blocking(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_is_connected(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:332</i><br>
	 * @deprecated use the safer methods {@link #ssh_is_connected(ssh.SshLibrary.ssh_session)} and {@link #ssh_is_connected(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_is_connected(Pointer session);
	/**
	 * Original signature : <code>int ssh_is_connected(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:332</i>
	 */
	int ssh_is_connected(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_is_server_known(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:334</i><br>
	 * @deprecated use the safer methods {@link #ssh_is_server_known(ssh.SshLibrary.ssh_session)} and {@link #ssh_is_server_known(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_is_server_known(Pointer session);
	/**
	 * Original signature : <code>int ssh_is_server_known(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:334</i>
	 */
	int ssh_is_server_known(SshLibrary.ssh_session session);
	/**
	 * LOGGING<br>
	 * Original signature : <code>int ssh_set_log_level(int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:339</i>
	 */
	int ssh_set_log_level(int level);
	/**
	 * Original signature : <code>int ssh_get_log_level()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:341</i>
	 */
	int ssh_get_log_level();
	/**
	 * Original signature : <code>void* ssh_get_log_userdata()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:343</i>
	 */
	Pointer ssh_get_log_userdata();
	/**
	 * Original signature : <code>int ssh_set_log_userdata(void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:345</i>
	 */
	int ssh_set_log_userdata(Pointer data);
	/**
	 * Original signature : <code>void _ssh_log(int, const char*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:347</i><br>
	 * @deprecated use the safer methods {@link #_ssh_log(int, java.lang.String, java.lang.String, java.lang.Object)} and {@link #_ssh_log(int, com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void _ssh_log(int verbosity, Pointer function, Pointer format, Object... varArgs1);
	/**
	 * Original signature : <code>void _ssh_log(int, const char*, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:347</i>
	 */
	void _ssh_log(int verbosity, String function, String format, Object... varArgs1);
	/**
	 * legacy<br>
	 * Original signature : <code>void ssh_log(ssh_session, int, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:352</i><br>
	 * @deprecated use the safer methods {@link #ssh_log(ssh.SshLibrary.ssh_session, int, java.lang.String, java.lang.Object)} and {@link #ssh_log(com.sun.jna.Pointer, int, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void ssh_log(Pointer session, int prioriry, Pointer format, Object... varArgs1);
	/**
	 * legacy<br>
	 * Original signature : <code>void ssh_log(ssh_session, int, const char*, null)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:352</i>
	 */
	void ssh_log(SshLibrary.ssh_session session, int prioriry, String format, Object... varArgs1);
	/**
	 * Original signature : <code>ssh_channel ssh_message_channel_request_open_reply_accept(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:354</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_open_reply_accept(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_open_reply_accept(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel ssh_message_channel_request_open_reply_accept(Pointer msg);
	/**
	 * Original signature : <code>ssh_channel ssh_message_channel_request_open_reply_accept(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:354</i>
	 */
	SshLibrary.ssh_channel ssh_message_channel_request_open_reply_accept(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_reply_success(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:356</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_reply_success(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_reply_success(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_reply_success(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_reply_success(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:356</i>
	 */
	int ssh_message_channel_request_reply_success(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>void ssh_message_free(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:358</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_free(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_message_free(Pointer msg);
	/**
	 * Original signature : <code>void ssh_message_free(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:358</i>
	 */
	void ssh_message_free(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>ssh_message ssh_message_get(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:360</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_get(ssh.SshLibrary.ssh_session)} and {@link #ssh_message_get(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_message ssh_message_get(Pointer session);
	/**
	 * Original signature : <code>ssh_message ssh_message_get(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:360</i>
	 */
	SshLibrary.ssh_message ssh_message_get(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_message_subtype(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:362</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_subtype(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_subtype(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_subtype(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_subtype(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:362</i>
	 */
	int ssh_message_subtype(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_type(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:364</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_type(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_type(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_type(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_type(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:364</i>
	 */
	int ssh_message_type(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_mkdir(const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:366</i><br>
	 * @deprecated use the safer methods {@link #ssh_mkdir(java.lang.String, int)} and {@link #ssh_mkdir(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_mkdir(Pointer pathname, int mode);
	/**
	 * Original signature : <code>int ssh_mkdir(const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:366</i>
	 */
	int ssh_mkdir(String pathname, int mode);
	/**
	 * Original signature : <code>ssh_session ssh_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:368</i>
	 */
	SshLibrary.ssh_session ssh_new();
	/**
	 * Original signature : <code>int ssh_options_copy(ssh_session, ssh_session*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:370</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_copy(ssh.SshLibrary.ssh_session, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_options_copy(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_options_copy(Pointer src, Pointer dest);
	/**
	 * Original signature : <code>int ssh_options_copy(ssh_session, ssh_session*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:370</i>
	 */
	int ssh_options_copy(SshLibrary.ssh_session src, PointerByReference dest);
	/**
	 * Original signature : <code>int ssh_options_copy(ssh_session, ssh_session*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:370</i>
	 */
	int ssh_options_copy(Pointer src, PointerByReference dest);
	/**
	 * Original signature : <code>int ssh_options_getopt(ssh_session, int*, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:372</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_getopt(ssh.SshLibrary.ssh_session, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_options_getopt(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_options_getopt(Pointer session, IntByReference argcptr, PointerByReference argv);
	/**
	 * Original signature : <code>int ssh_options_getopt(ssh_session, int*, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:372</i>
	 */
	int ssh_options_getopt(SshLibrary.ssh_session session, IntBuffer argcptr, PointerByReference argv);
	/**
	 * Original signature : <code>int ssh_options_parse_config(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:374</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_parse_config(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_options_parse_config(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_options_parse_config(Pointer session, Pointer filename);
	/**
	 * Original signature : <code>int ssh_options_parse_config(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:374</i>
	 */
	int ssh_options_parse_config(SshLibrary.ssh_session session, String filename);
	/**
	 * Original signature : <code>int ssh_options_set(ssh_session, ssh_options_e, const void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:376</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_set(ssh.SshLibrary.ssh_session, int, com.sun.jna.Pointer)} and {@link #ssh_options_set(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_options_set(Pointer session, int type, Pointer value);
	/**
	 * Original signature : <code>int ssh_options_set(ssh_session, ssh_options_e, const void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:376</i>
	 */
	int ssh_options_set(SshLibrary.ssh_session session, int type, Pointer value);
	/**
	 * Original signature : <code>int ssh_options_get(ssh_session, ssh_options_e, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:378</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_get(ssh.SshLibrary.ssh_session, int, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_options_get(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_options_get(Pointer session, int type, PointerByReference value);
	/**
	 * Original signature : <code>int ssh_options_get(ssh_session, ssh_options_e, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:378</i>
	 */
	int ssh_options_get(SshLibrary.ssh_session session, int type, PointerByReference value);
	/**
	 * Original signature : <code>int ssh_options_get_port(ssh_session, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:380</i><br>
	 * @deprecated use the safer methods {@link #ssh_options_get_port(ssh.SshLibrary.ssh_session, java.nio.IntBuffer)} and {@link #ssh_options_get_port(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ssh_options_get_port(Pointer session, IntByReference port_target);
	/**
	 * Original signature : <code>int ssh_options_get_port(ssh_session, unsigned int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:380</i>
	 */
	int ssh_options_get_port(SshLibrary.ssh_session session, IntBuffer port_target);
	/**
	 * Original signature : <code>int ssh_pcap_file_close(ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:382</i><br>
	 * @deprecated use the safer methods {@link #ssh_pcap_file_close(ssh.SshLibrary.ssh_pcap_file)} and {@link #ssh_pcap_file_close(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_pcap_file_close(Pointer pcap);
	/**
	 * Original signature : <code>int ssh_pcap_file_close(ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:382</i>
	 */
	int ssh_pcap_file_close(SshLibrary.ssh_pcap_file pcap);
	/**
	 * Original signature : <code>void ssh_pcap_file_free(ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:384</i><br>
	 * @deprecated use the safer methods {@link #ssh_pcap_file_free(ssh.SshLibrary.ssh_pcap_file)} and {@link #ssh_pcap_file_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_pcap_file_free(Pointer pcap);
	/**
	 * Original signature : <code>void ssh_pcap_file_free(ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:384</i>
	 */
	void ssh_pcap_file_free(SshLibrary.ssh_pcap_file pcap);
	/**
	 * Original signature : <code>ssh_pcap_file ssh_pcap_file_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:386</i>
	 */
	SshLibrary.ssh_pcap_file ssh_pcap_file_new();
	/**
	 * Original signature : <code>int ssh_pcap_file_open(ssh_pcap_file, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:388</i><br>
	 * @deprecated use the safer methods {@link #ssh_pcap_file_open(ssh.SshLibrary.ssh_pcap_file, java.lang.String)} and {@link #ssh_pcap_file_open(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_pcap_file_open(Pointer pcap, Pointer filename);
	/**
	 * Original signature : <code>int ssh_pcap_file_open(ssh_pcap_file, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:388</i>
	 */
	int ssh_pcap_file_open(SshLibrary.ssh_pcap_file pcap, String filename);
	/**
	 * Original signature : <code>ssh_key ssh_key_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:402</i>
	 */
	SshLibrary.ssh_key ssh_key_new();
	/**
	 * Original signature : <code>void ssh_key_free(ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:404</i><br>
	 * @deprecated use the safer methods {@link #ssh_key_free(ssh.SshLibrary.ssh_key)} and {@link #ssh_key_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_key_free(Pointer key);
	/**
	 * Original signature : <code>void ssh_key_free(ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:404</i>
	 */
	void ssh_key_free(SshLibrary.ssh_key key);
	/**
	 * Original signature : <code>ssh_keytypes_e ssh_key_type(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:406</i><br>
	 * @deprecated use the safer methods {@link #ssh_key_type(ssh.SshLibrary.ssh_key)} and {@link #ssh_key_type(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_key_type(Pointer key);
	/**
	 * Original signature : <code>ssh_keytypes_e ssh_key_type(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:406</i>
	 */
	int ssh_key_type(SshLibrary.ssh_key key);
	/**
	 * Original signature : <code>char* ssh_key_type_to_char(ssh_keytypes_e)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:408</i>
	 */
	String ssh_key_type_to_char(int type);
	/**
	 * Original signature : <code>ssh_keytypes_e ssh_key_type_from_name(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:410</i><br>
	 * @deprecated use the safer methods {@link #ssh_key_type_from_name(java.lang.String)} and {@link #ssh_key_type_from_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_key_type_from_name(Pointer name);
	/**
	 * Original signature : <code>ssh_keytypes_e ssh_key_type_from_name(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:410</i>
	 */
	int ssh_key_type_from_name(String name);
	/**
	 * Original signature : <code>int ssh_key_is_public(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:412</i><br>
	 * @deprecated use the safer methods {@link #ssh_key_is_public(ssh.SshLibrary.ssh_key)} and {@link #ssh_key_is_public(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_key_is_public(Pointer k);
	/**
	 * Original signature : <code>int ssh_key_is_public(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:412</i>
	 */
	int ssh_key_is_public(SshLibrary.ssh_key k);
	/**
	 * Original signature : <code>int ssh_key_is_private(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:414</i><br>
	 * @deprecated use the safer methods {@link #ssh_key_is_private(ssh.SshLibrary.ssh_key)} and {@link #ssh_key_is_private(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_key_is_private(Pointer k);
	/**
	 * Original signature : <code>int ssh_key_is_private(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:414</i>
	 */
	int ssh_key_is_private(SshLibrary.ssh_key k);
	/**
	 * Original signature : <code>int ssh_key_cmp(const ssh_key, const ssh_key, ssh_keycmp_e)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:416</i><br>
	 * @deprecated use the safer methods {@link #ssh_key_cmp(ssh.SshLibrary.ssh_key, ssh.SshLibrary.ssh_key, int)} and {@link #ssh_key_cmp(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_key_cmp(Pointer k1, Pointer k2, int what);
	/**
	 * Original signature : <code>int ssh_key_cmp(const ssh_key, const ssh_key, ssh_keycmp_e)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:416</i>
	 */
	int ssh_key_cmp(SshLibrary.ssh_key k1, SshLibrary.ssh_key k2, int what);
	/**
	 * Original signature : <code>int ssh_pki_generate(ssh_keytypes_e, int, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:418</i><br>
	 * @deprecated use the safer method {@link #ssh_pki_generate(int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_generate(int type, int parameter, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_generate(ssh_keytypes_e, int, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:418</i>
	 */
	int ssh_pki_generate(int type, int parameter, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_privkey_base64(const char*, const char*, ssh_auth_callback, void*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:420</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_import_privkey_base64(java.lang.String, java.lang.String, ssh.SshLibrary.ssh_auth_callback, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_import_privkey_base64(com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.SshLibrary.ssh_auth_callback, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_import_privkey_base64(Pointer b64_key, Pointer passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_privkey_base64(const char*, const char*, ssh_auth_callback, void*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:420</i>
	 */
	int ssh_pki_import_privkey_base64(String b64_key, String passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_privkey_base64(const char*, const char*, ssh_auth_callback, void*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:420</i>
	 */
	int ssh_pki_import_privkey_base64(Pointer b64_key, Pointer passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_privkey_file(const char*, const char*, ssh_auth_callback, void*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:422</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_import_privkey_file(java.lang.String, java.lang.String, ssh.SshLibrary.ssh_auth_callback, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_import_privkey_file(com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.SshLibrary.ssh_auth_callback, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_import_privkey_file(Pointer filename, Pointer passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_privkey_file(const char*, const char*, ssh_auth_callback, void*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:422</i>
	 */
	int ssh_pki_import_privkey_file(String filename, String passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_privkey_file(const char*, const char*, ssh_auth_callback, void*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:422</i>
	 */
	int ssh_pki_import_privkey_file(Pointer filename, Pointer passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_export_privkey_file(const ssh_key, const char*, ssh_auth_callback, void*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:424</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_export_privkey_file(ssh.SshLibrary.ssh_key, java.lang.String, ssh.SshLibrary.ssh_auth_callback, com.sun.jna.Pointer, java.lang.String)} and {@link #ssh_pki_export_privkey_file(com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.SshLibrary.ssh_auth_callback, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_pki_export_privkey_file(Pointer privkey, Pointer passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, Pointer filename);
	/**
	 * Original signature : <code>int ssh_pki_export_privkey_file(const ssh_key, const char*, ssh_auth_callback, void*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:424</i>
	 */
	int ssh_pki_export_privkey_file(SshLibrary.ssh_key privkey, String passphrase, SshLibrary.ssh_auth_callback auth_fn, Pointer auth_data, String filename);
	/**
	 * Original signature : <code>int ssh_pki_copy_cert_to_privkey(const ssh_key, ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:426</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_copy_cert_to_privkey(ssh.SshLibrary.ssh_key, ssh.SshLibrary.ssh_key)} and {@link #ssh_pki_copy_cert_to_privkey(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_pki_copy_cert_to_privkey(Pointer cert_key, Pointer privkey);
	/**
	 * Original signature : <code>int ssh_pki_copy_cert_to_privkey(const ssh_key, ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:426</i>
	 */
	int ssh_pki_copy_cert_to_privkey(SshLibrary.ssh_key cert_key, SshLibrary.ssh_key privkey);
	/**
	 * Original signature : <code>int ssh_pki_import_pubkey_base64(const char*, ssh_keytypes_e, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:428</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_import_pubkey_base64(java.lang.String, int, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_import_pubkey_base64(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_import_pubkey_base64(Pointer b64_key, int type, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_pubkey_base64(const char*, ssh_keytypes_e, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:428</i>
	 */
	int ssh_pki_import_pubkey_base64(String b64_key, int type, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_pubkey_base64(const char*, ssh_keytypes_e, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:428</i>
	 */
	int ssh_pki_import_pubkey_base64(Pointer b64_key, int type, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_pubkey_file(const char*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:430</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_import_pubkey_file(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_import_pubkey_file(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_import_pubkey_file(Pointer filename, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_pubkey_file(const char*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:430</i>
	 */
	int ssh_pki_import_pubkey_file(String filename, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_pubkey_file(const char*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:430</i>
	 */
	int ssh_pki_import_pubkey_file(Pointer filename, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_cert_base64(const char*, ssh_keytypes_e, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:432</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_import_cert_base64(java.lang.String, int, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_import_cert_base64(com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_import_cert_base64(Pointer b64_cert, int type, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_cert_base64(const char*, ssh_keytypes_e, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:432</i>
	 */
	int ssh_pki_import_cert_base64(String b64_cert, int type, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_cert_base64(const char*, ssh_keytypes_e, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:432</i>
	 */
	int ssh_pki_import_cert_base64(Pointer b64_cert, int type, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_cert_file(const char*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:434</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_import_cert_file(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_import_cert_file(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_import_cert_file(Pointer filename, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_cert_file(const char*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:434</i>
	 */
	int ssh_pki_import_cert_file(String filename, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_import_cert_file(const char*, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:434</i>
	 */
	int ssh_pki_import_cert_file(Pointer filename, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_export_privkey_to_pubkey(const ssh_key, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:436</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_export_privkey_to_pubkey(ssh.SshLibrary.ssh_key, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_export_privkey_to_pubkey(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_export_privkey_to_pubkey(Pointer privkey, Pointer pkey);
	/**
	 * Original signature : <code>int ssh_pki_export_privkey_to_pubkey(const ssh_key, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:436</i>
	 */
	int ssh_pki_export_privkey_to_pubkey(SshLibrary.ssh_key privkey, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_export_privkey_to_pubkey(const ssh_key, ssh_key*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:436</i>
	 */
	int ssh_pki_export_privkey_to_pubkey(Pointer privkey, PointerByReference pkey);
	/**
	 * Original signature : <code>int ssh_pki_export_pubkey_base64(const ssh_key, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:438</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_export_pubkey_base64(ssh.SshLibrary.ssh_key, com.sun.jna.ptr.PointerByReference)} and {@link #ssh_pki_export_pubkey_base64(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int ssh_pki_export_pubkey_base64(Pointer key, PointerByReference b64_key);
	/**
	 * Original signature : <code>int ssh_pki_export_pubkey_base64(const ssh_key, char**)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:438</i>
	 */
	int ssh_pki_export_pubkey_base64(SshLibrary.ssh_key key, PointerByReference b64_key);
	/**
	 * Original signature : <code>int ssh_pki_export_pubkey_file(const ssh_key, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:440</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_export_pubkey_file(ssh.SshLibrary.ssh_key, java.lang.String)} and {@link #ssh_pki_export_pubkey_file(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_pki_export_pubkey_file(Pointer key, Pointer filename);
	/**
	 * Original signature : <code>int ssh_pki_export_pubkey_file(const ssh_key, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:440</i>
	 */
	int ssh_pki_export_pubkey_file(SshLibrary.ssh_key key, String filename);
	/**
	 * Original signature : <code>char* ssh_pki_key_ecdsa_name(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:442</i><br>
	 * @deprecated use the safer methods {@link #ssh_pki_key_ecdsa_name(ssh.SshLibrary.ssh_key)} and {@link #ssh_pki_key_ecdsa_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_pki_key_ecdsa_name(Pointer key);
	/**
	 * Original signature : <code>char* ssh_pki_key_ecdsa_name(const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:442</i>
	 */
	String ssh_pki_key_ecdsa_name(SshLibrary.ssh_key key);
	/**
	 * Original signature : <code>void ssh_print_hexa(const char*, const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:444</i><br>
	 * @deprecated use the safer methods {@link #ssh_print_hexa(java.lang.String, byte[], com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ssh_print_hexa(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	void ssh_print_hexa(Pointer descr, Pointer what, NativeSize len);
	/**
	 * Original signature : <code>void ssh_print_hexa(const char*, const unsigned char*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:444</i>
	 */
	void ssh_print_hexa(String descr, byte what[], NativeSize len);
	/**
	 * Original signature : <code>int ssh_send_ignore(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:446</i><br>
	 * @deprecated use the safer methods {@link #ssh_send_ignore(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_send_ignore(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_send_ignore(Pointer session, Pointer data);
	/**
	 * Original signature : <code>int ssh_send_ignore(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:446</i>
	 */
	int ssh_send_ignore(SshLibrary.ssh_session session, String data);
	/**
	 * Original signature : <code>int ssh_send_debug(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:448</i><br>
	 * @deprecated use the safer methods {@link #ssh_send_debug(ssh.SshLibrary.ssh_session, java.lang.String, int)} and {@link #ssh_send_debug(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_send_debug(Pointer session, Pointer message, int always_display);
	/**
	 * Original signature : <code>int ssh_send_debug(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:448</i>
	 */
	int ssh_send_debug(SshLibrary.ssh_session session, String message, int always_display);
	/**
	 * Original signature : <code>void ssh_gssapi_set_creds(ssh_session, const ssh_gssapi_creds)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:450</i><br>
	 * @deprecated use the safer methods {@link #ssh_gssapi_set_creds(ssh.SshLibrary.ssh_session, com.sun.jna.Pointer)} and {@link #ssh_gssapi_set_creds(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_gssapi_set_creds(Pointer session, Pointer creds);
	/**
	 * Original signature : <code>void ssh_gssapi_set_creds(ssh_session, const ssh_gssapi_creds)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:450</i>
	 */
	void ssh_gssapi_set_creds(SshLibrary.ssh_session session, Pointer creds);
	/**
	 * Original signature : <code>int ssh_scp_accept_request(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:452</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_accept_request(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_accept_request(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_scp_accept_request(Pointer scp);
	/**
	 * Original signature : <code>int ssh_scp_accept_request(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:452</i>
	 */
	int ssh_scp_accept_request(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_close(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:454</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_close(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_close(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_scp_close(Pointer scp);
	/**
	 * Original signature : <code>int ssh_scp_close(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:454</i>
	 */
	int ssh_scp_close(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_deny_request(ssh_scp, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:456</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_deny_request(ssh.SshLibrary.ssh_scp, java.lang.String)} and {@link #ssh_scp_deny_request(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_scp_deny_request(Pointer scp, Pointer reason);
	/**
	 * Original signature : <code>int ssh_scp_deny_request(ssh_scp, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:456</i>
	 */
	int ssh_scp_deny_request(SshLibrary.ssh_scp scp, String reason);
	/**
	 * Original signature : <code>void ssh_scp_free(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:458</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_free(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_scp_free(Pointer scp);
	/**
	 * Original signature : <code>void ssh_scp_free(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:458</i>
	 */
	void ssh_scp_free(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_init(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:460</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_init(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_init(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_scp_init(Pointer scp);
	/**
	 * Original signature : <code>int ssh_scp_init(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:460</i>
	 */
	int ssh_scp_init(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_leave_directory(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:462</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_leave_directory(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_leave_directory(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_scp_leave_directory(Pointer scp);
	/**
	 * Original signature : <code>int ssh_scp_leave_directory(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:462</i>
	 */
	int ssh_scp_leave_directory(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>ssh_scp ssh_scp_new(ssh_session, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:464</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_new(ssh.SshLibrary.ssh_session, int, java.lang.String)} and {@link #ssh_scp_new(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_scp ssh_scp_new(Pointer session, int mode, Pointer location);
	/**
	 * Original signature : <code>ssh_scp ssh_scp_new(ssh_session, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:464</i>
	 */
	SshLibrary.ssh_scp ssh_scp_new(SshLibrary.ssh_session session, int mode, String location);
	/**
	 * Original signature : <code>int ssh_scp_pull_request(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:466</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_pull_request(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_pull_request(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_scp_pull_request(Pointer scp);
	/**
	 * Original signature : <code>int ssh_scp_pull_request(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:466</i>
	 */
	int ssh_scp_pull_request(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_push_directory(ssh_scp, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:468</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_push_directory(ssh.SshLibrary.ssh_scp, java.lang.String, int)} and {@link #ssh_scp_push_directory(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_scp_push_directory(Pointer scp, Pointer dirname, int mode);
	/**
	 * Original signature : <code>int ssh_scp_push_directory(ssh_scp, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:468</i>
	 */
	int ssh_scp_push_directory(SshLibrary.ssh_scp scp, String dirname, int mode);
	/**
	 * Original signature : <code>int ssh_scp_push_file(ssh_scp, const char*, size_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:470</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_push_file(ssh.SshLibrary.ssh_scp, java.lang.String, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} and {@link #ssh_scp_push_file(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} instead
	 */
	@Deprecated 
	int ssh_scp_push_file(Pointer scp, Pointer filename, NativeSize size, int perms);
	/**
	 * Original signature : <code>int ssh_scp_push_file(ssh_scp, const char*, size_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:470</i>
	 */
	int ssh_scp_push_file(SshLibrary.ssh_scp scp, String filename, NativeSize size, int perms);
	/**
	 * Original signature : <code>int ssh_scp_push_file64(ssh_scp, const char*, uint64_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:472</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_push_file64(ssh.SshLibrary.ssh_scp, java.lang.String, long, int)} and {@link #ssh_scp_push_file64(com.sun.jna.Pointer, com.sun.jna.Pointer, long, int)} instead
	 */
	@Deprecated 
	int ssh_scp_push_file64(Pointer scp, Pointer filename, long size, int perms);
	/**
	 * Original signature : <code>int ssh_scp_push_file64(ssh_scp, const char*, uint64_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:472</i>
	 */
	int ssh_scp_push_file64(SshLibrary.ssh_scp scp, String filename, long size, int perms);
	/**
	 * Original signature : <code>int ssh_scp_read(ssh_scp, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:474</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_read(ssh.SshLibrary.ssh_scp, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ssh_scp_read(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int ssh_scp_read(Pointer scp, Pointer buffer, NativeSize size);
	/**
	 * Original signature : <code>int ssh_scp_read(ssh_scp, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:474</i>
	 */
	int ssh_scp_read(SshLibrary.ssh_scp scp, Pointer buffer, NativeSize size);
	/**
	 * Original signature : <code>char* ssh_scp_request_get_filename(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:476</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_request_get_filename(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_request_get_filename(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_scp_request_get_filename(Pointer scp);
	/**
	 * Original signature : <code>char* ssh_scp_request_get_filename(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:476</i>
	 */
	String ssh_scp_request_get_filename(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_request_get_permissions(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:478</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_request_get_permissions(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_request_get_permissions(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_scp_request_get_permissions(Pointer scp);
	/**
	 * Original signature : <code>int ssh_scp_request_get_permissions(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:478</i>
	 */
	int ssh_scp_request_get_permissions(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>size_t ssh_scp_request_get_size(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:480</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_request_get_size(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_request_get_size(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	NativeSize ssh_scp_request_get_size(Pointer scp);
	/**
	 * Original signature : <code>size_t ssh_scp_request_get_size(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:480</i>
	 */
	NativeSize ssh_scp_request_get_size(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>uint64_t ssh_scp_request_get_size64(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:482</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_request_get_size64(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_request_get_size64(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	long ssh_scp_request_get_size64(Pointer scp);
	/**
	 * Original signature : <code>uint64_t ssh_scp_request_get_size64(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:482</i>
	 */
	long ssh_scp_request_get_size64(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>char* ssh_scp_request_get_warning(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:484</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_request_get_warning(ssh.SshLibrary.ssh_scp)} and {@link #ssh_scp_request_get_warning(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_scp_request_get_warning(Pointer scp);
	/**
	 * Original signature : <code>char* ssh_scp_request_get_warning(ssh_scp)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:484</i>
	 */
	String ssh_scp_request_get_warning(SshLibrary.ssh_scp scp);
	/**
	 * Original signature : <code>int ssh_scp_write(ssh_scp, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:486</i><br>
	 * @deprecated use the safer methods {@link #ssh_scp_write(ssh.SshLibrary.ssh_scp, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #ssh_scp_write(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int ssh_scp_write(Pointer scp, Pointer buffer, NativeSize len);
	/**
	 * Original signature : <code>int ssh_scp_write(ssh_scp, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:486</i>
	 */
	int ssh_scp_write(SshLibrary.ssh_scp scp, Pointer buffer, NativeSize len);
	/**
	 * Original signature : <code>int ssh_select(ssh_channel*, ssh_channel*, socket_t, fd_set*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:488</i><br>
	 * @deprecated use the safer methods {@link #ssh_select(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, ssh.SshLibrary.socket_t, com.sun.jna.Pointer, ssh.SshLibrary.timeval)} and {@link #ssh_select(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.SshLibrary.timeval)} instead
	 */
	@Deprecated 
	int ssh_select(Pointer channels, Pointer outchannels, Pointer maxfd, Pointer readfds, SshLibrary.timeval timeout);
	/**
	 * Original signature : <code>int ssh_select(ssh_channel*, ssh_channel*, socket_t, fd_set*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:488</i>
	 */
	int ssh_select(PointerByReference channels, PointerByReference outchannels, SshLibrary.socket_t maxfd, Pointer readfds, SshLibrary.timeval timeout);
	/**
	 * Original signature : <code>int ssh_select(ssh_channel*, ssh_channel*, socket_t, fd_set*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:488</i>
	 */
	int ssh_select(PointerByReference channels, PointerByReference outchannels, Pointer maxfd, Pointer readfds, SshLibrary.timeval timeout);
	/**
	 * Original signature : <code>int ssh_service_request(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:490</i><br>
	 * @deprecated use the safer methods {@link #ssh_service_request(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_service_request(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_service_request(Pointer session, Pointer service);
	/**
	 * Original signature : <code>int ssh_service_request(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:490</i>
	 */
	int ssh_service_request(SshLibrary.ssh_session session, String service);
	/**
	 * Original signature : <code>int ssh_set_agent_channel(ssh_session, ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:492</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_agent_channel(ssh.SshLibrary.ssh_session, ssh.SshLibrary.ssh_channel)} and {@link #ssh_set_agent_channel(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_set_agent_channel(Pointer session, Pointer channel);
	/**
	 * Original signature : <code>int ssh_set_agent_channel(ssh_session, ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:492</i>
	 */
	int ssh_set_agent_channel(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int ssh_set_agent_socket(ssh_session, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:494</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_agent_socket(ssh.SshLibrary.ssh_session, ssh.SshLibrary.socket_t)} and {@link #ssh_set_agent_socket(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_set_agent_socket(Pointer session, Pointer fd);
	/**
	 * Original signature : <code>int ssh_set_agent_socket(ssh_session, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:494</i>
	 */
	int ssh_set_agent_socket(SshLibrary.ssh_session session, SshLibrary.socket_t fd);
	/**
	 * Original signature : <code>void ssh_set_blocking(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:496</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_blocking(ssh.SshLibrary.ssh_session, int)} and {@link #ssh_set_blocking(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void ssh_set_blocking(Pointer session, int blocking);
	/**
	 * Original signature : <code>void ssh_set_blocking(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:496</i>
	 */
	void ssh_set_blocking(SshLibrary.ssh_session session, int blocking);
	/**
	 * Original signature : <code>void ssh_set_counters(ssh_session, ssh_counter, ssh_counter)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:498</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_counters(ssh.SshLibrary.ssh_session, ssh.ssh_counter_struct, ssh.ssh_counter_struct)} and {@link #ssh_set_counters(com.sun.jna.Pointer, ssh.ssh_counter_struct, ssh.ssh_counter_struct)} instead
	 */
	@Deprecated 
	void ssh_set_counters(Pointer session, ssh_counter_struct scounter, ssh_counter_struct rcounter);
	/**
	 * Original signature : <code>void ssh_set_counters(ssh_session, ssh_counter, ssh_counter)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:498</i>
	 */
	void ssh_set_counters(SshLibrary.ssh_session session, ssh_counter_struct scounter, ssh_counter_struct rcounter);
	/**
	 * Original signature : <code>void ssh_set_fd_except(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:500</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_fd_except(ssh.SshLibrary.ssh_session)} and {@link #ssh_set_fd_except(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_set_fd_except(Pointer session);
	/**
	 * Original signature : <code>void ssh_set_fd_except(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:500</i>
	 */
	void ssh_set_fd_except(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_set_fd_toread(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:502</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_fd_toread(ssh.SshLibrary.ssh_session)} and {@link #ssh_set_fd_toread(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_set_fd_toread(Pointer session);
	/**
	 * Original signature : <code>void ssh_set_fd_toread(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:502</i>
	 */
	void ssh_set_fd_toread(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_set_fd_towrite(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:504</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_fd_towrite(ssh.SshLibrary.ssh_session)} and {@link #ssh_set_fd_towrite(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_set_fd_towrite(Pointer session);
	/**
	 * Original signature : <code>void ssh_set_fd_towrite(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:504</i>
	 */
	void ssh_set_fd_towrite(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_silent_disconnect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:506</i><br>
	 * @deprecated use the safer methods {@link #ssh_silent_disconnect(ssh.SshLibrary.ssh_session)} and {@link #ssh_silent_disconnect(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_silent_disconnect(Pointer session);
	/**
	 * Original signature : <code>void ssh_silent_disconnect(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:506</i>
	 */
	void ssh_silent_disconnect(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_set_pcap_file(ssh_session, ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:508</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_pcap_file(ssh.SshLibrary.ssh_session, ssh.SshLibrary.ssh_pcap_file)} and {@link #ssh_set_pcap_file(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_set_pcap_file(Pointer session, Pointer pcapfile);
	/**
	 * Original signature : <code>int ssh_set_pcap_file(ssh_session, ssh_pcap_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:508</i>
	 */
	int ssh_set_pcap_file(SshLibrary.ssh_session session, SshLibrary.ssh_pcap_file pcapfile);
	/**
	 * USERAUTH<br>
	 * Original signature : <code>int ssh_userauth_none(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:513</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_none(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_userauth_none(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_none(Pointer session, Pointer username);
	/**
	 * USERAUTH<br>
	 * Original signature : <code>int ssh_userauth_none(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:513</i>
	 */
	int ssh_userauth_none(SshLibrary.ssh_session session, String username);
	/**
	 * Original signature : <code>int ssh_userauth_list(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:515</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_list(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_userauth_list(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_list(Pointer session, Pointer username);
	/**
	 * Original signature : <code>int ssh_userauth_list(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:515</i>
	 */
	int ssh_userauth_list(SshLibrary.ssh_session session, String username);
	/**
	 * Original signature : <code>int ssh_userauth_try_publickey(ssh_session, const char*, const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:517</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_try_publickey(ssh.SshLibrary.ssh_session, java.lang.String, ssh.SshLibrary.ssh_key)} and {@link #ssh_userauth_try_publickey(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_try_publickey(Pointer session, Pointer username, Pointer pubkey);
	/**
	 * Original signature : <code>int ssh_userauth_try_publickey(ssh_session, const char*, const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:517</i>
	 */
	int ssh_userauth_try_publickey(SshLibrary.ssh_session session, String username, SshLibrary.ssh_key pubkey);
	/**
	 * Original signature : <code>int ssh_userauth_publickey(ssh_session, const char*, const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:519</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_publickey(ssh.SshLibrary.ssh_session, java.lang.String, ssh.SshLibrary.ssh_key)} and {@link #ssh_userauth_publickey(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_publickey(Pointer session, Pointer username, Pointer privkey);
	/**
	 * Original signature : <code>int ssh_userauth_publickey(ssh_session, const char*, const ssh_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:519</i>
	 */
	int ssh_userauth_publickey(SshLibrary.ssh_session session, String username, SshLibrary.ssh_key privkey);
	/**
	 * Original signature : <code>int ssh_userauth_publickey_auto(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:521</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_publickey_auto(ssh.SshLibrary.ssh_session, java.lang.String, java.lang.String)} and {@link #ssh_userauth_publickey_auto(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_publickey_auto(Pointer session, Pointer username, Pointer passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_publickey_auto(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:521</i>
	 */
	int ssh_userauth_publickey_auto(SshLibrary.ssh_session session, String username, String passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_password(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:523</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_password(ssh.SshLibrary.ssh_session, java.lang.String, java.lang.String)} and {@link #ssh_userauth_password(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_password(Pointer session, Pointer username, Pointer password);
	/**
	 * Original signature : <code>int ssh_userauth_password(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:523</i>
	 */
	int ssh_userauth_password(SshLibrary.ssh_session session, String username, String password);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:525</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint(ssh.SshLibrary.ssh_session, java.lang.String, java.lang.String)} and {@link #ssh_userauth_kbdint(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_kbdint(Pointer session, Pointer user, Pointer submethods);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint(ssh_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:525</i>
	 */
	int ssh_userauth_kbdint(SshLibrary.ssh_session session, String user, String submethods);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getinstruction(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:527</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_getinstruction(ssh.SshLibrary.ssh_session)} and {@link #ssh_userauth_kbdint_getinstruction(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_userauth_kbdint_getinstruction(Pointer session);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getinstruction(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:527</i>
	 */
	String ssh_userauth_kbdint_getinstruction(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getname(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:529</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_getname(ssh.SshLibrary.ssh_session)} and {@link #ssh_userauth_kbdint_getname(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_userauth_kbdint_getname(Pointer session);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getname(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:529</i>
	 */
	String ssh_userauth_kbdint_getname(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_getnprompts(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:531</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_getnprompts(ssh.SshLibrary.ssh_session)} and {@link #ssh_userauth_kbdint_getnprompts(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_kbdint_getnprompts(Pointer session);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_getnprompts(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:531</i>
	 */
	int ssh_userauth_kbdint_getnprompts(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getprompt(ssh_session, unsigned int, char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:533</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_getprompt(ssh.SshLibrary.ssh_session, int, java.nio.ByteBuffer)} and {@link #ssh_userauth_kbdint_getprompt(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_userauth_kbdint_getprompt(Pointer session, int i, Pointer echo);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getprompt(ssh_session, unsigned int, char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:533</i>
	 */
	String ssh_userauth_kbdint_getprompt(SshLibrary.ssh_session session, int i, ByteBuffer echo);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_getnanswers(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:535</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_getnanswers(ssh.SshLibrary.ssh_session)} and {@link #ssh_userauth_kbdint_getnanswers(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_kbdint_getnanswers(Pointer session);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_getnanswers(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:535</i>
	 */
	int ssh_userauth_kbdint_getnanswers(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getanswer(ssh_session, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:537</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_getanswer(ssh.SshLibrary.ssh_session, int)} and {@link #ssh_userauth_kbdint_getanswer(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	String ssh_userauth_kbdint_getanswer(Pointer session, int i);
	/**
	 * Original signature : <code>char* ssh_userauth_kbdint_getanswer(ssh_session, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:537</i>
	 */
	String ssh_userauth_kbdint_getanswer(SshLibrary.ssh_session session, int i);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_setanswer(ssh_session, unsigned int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:539</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_kbdint_setanswer(ssh.SshLibrary.ssh_session, int, java.lang.String)} and {@link #ssh_userauth_kbdint_setanswer(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_kbdint_setanswer(Pointer session, int i, Pointer answer);
	/**
	 * Original signature : <code>int ssh_userauth_kbdint_setanswer(ssh_session, unsigned int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:539</i>
	 */
	int ssh_userauth_kbdint_setanswer(SshLibrary.ssh_session session, int i, String answer);
	/**
	 * Original signature : <code>int ssh_userauth_gssapi(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:541</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_gssapi(ssh.SshLibrary.ssh_session)} and {@link #ssh_userauth_gssapi(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_gssapi(Pointer session);
	/**
	 * Original signature : <code>int ssh_userauth_gssapi(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:541</i>
	 */
	int ssh_userauth_gssapi(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_version(int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:543</i>
	 */
	String ssh_version(int req_version);
	/**
	 * Original signature : <code>int ssh_write_knownhost(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:545</i><br>
	 * @deprecated use the safer methods {@link #ssh_write_knownhost(ssh.SshLibrary.ssh_session)} and {@link #ssh_write_knownhost(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_write_knownhost(Pointer session);
	/**
	 * Original signature : <code>int ssh_write_knownhost(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:545</i>
	 */
	int ssh_write_knownhost(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_dump_knownhost(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:547</i><br>
	 * @deprecated use the safer methods {@link #ssh_dump_knownhost(ssh.SshLibrary.ssh_session)} and {@link #ssh_dump_knownhost(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ssh_dump_knownhost(Pointer session);
	/**
	 * Original signature : <code>char* ssh_dump_knownhost(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:547</i>
	 */
	Pointer ssh_dump_knownhost(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>void ssh_string_burn(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:549</i>
	 */
	void ssh_string_burn(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string ssh_string_copy(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:551</i>
	 */
	SshLibrary.ssh_string ssh_string_copy(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>void* ssh_string_data(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:553</i>
	 */
	Pointer ssh_string_data(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>int ssh_string_fill(ssh_string, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:555</i>
	 */
	int ssh_string_fill(SshLibrary.ssh_string str, Pointer data, NativeSize len);
	/**
	 * Original signature : <code>void ssh_string_free(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:557</i>
	 */
	void ssh_string_free(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string ssh_string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:559</i><br>
	 * @deprecated use the safer methods {@link #ssh_string_from_char(java.lang.String)} and {@link #ssh_string_from_char(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_string ssh_string_from_char(Pointer what);
	/**
	 * Original signature : <code>ssh_string ssh_string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:559</i>
	 */
	SshLibrary.ssh_string ssh_string_from_char(String what);
	/**
	 * Original signature : <code>size_t ssh_string_len(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:561</i>
	 */
	NativeSize ssh_string_len(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string ssh_string_new(size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:563</i>
	 */
	SshLibrary.ssh_string ssh_string_new(NativeSize size);
	/**
	 * Original signature : <code>char* ssh_string_get_char(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:565</i>
	 */
	String ssh_string_get_char(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>char* ssh_string_to_char(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:567</i>
	 */
	Pointer ssh_string_to_char(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>void ssh_string_free_char(char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:569</i><br>
	 * @deprecated use the safer methods {@link #ssh_string_free_char(java.nio.ByteBuffer)} and {@link #ssh_string_free_char(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_string_free_char(Pointer s);
	/**
	 * Original signature : <code>void ssh_string_free_char(char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:569</i>
	 */
	void ssh_string_free_char(ByteBuffer s);
	/**
	 * Original signature : <code>int ssh_getpass(const char*, char*, size_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:571</i><br>
	 * @deprecated use the safer methods {@link #ssh_getpass(java.lang.String, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, int)} and {@link #ssh_getpass(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, int)} instead
	 */
	@Deprecated 
	int ssh_getpass(Pointer prompt, Pointer buf, NativeSize len, int echo, int verify);
	/**
	 * Original signature : <code>int ssh_getpass(const char*, char*, size_t, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:571</i>
	 */
	int ssh_getpass(String prompt, ByteBuffer buf, NativeSize len, int echo, int verify);
	/**
	 * Original signature : <code>ssh_event ssh_event_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:574</i>
	 */
	SshLibrary.ssh_event ssh_event_new();
	/**
	 * Original signature : <code>int ssh_event_add_fd(ssh_event, socket_t, short, ssh_event_callback, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:576</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_add_fd(ssh.SshLibrary.ssh_event, ssh.SshLibrary.socket_t, short, ssh.SshLibrary.ssh_event_callback, com.sun.jna.Pointer)} and {@link #ssh_event_add_fd(com.sun.jna.Pointer, com.sun.jna.Pointer, short, ssh.SshLibrary.ssh_event_callback, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_event_add_fd(Pointer event, Pointer fd, short events, SshLibrary.ssh_event_callback cb, Pointer userdata);
	/**
	 * Original signature : <code>int ssh_event_add_fd(ssh_event, socket_t, short, ssh_event_callback, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:576</i>
	 */
	int ssh_event_add_fd(SshLibrary.ssh_event event, SshLibrary.socket_t fd, short events, SshLibrary.ssh_event_callback cb, Pointer userdata);
	/**
	 * Original signature : <code>int ssh_event_add_session(ssh_event, ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:578</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_add_session(ssh.SshLibrary.ssh_event, ssh.SshLibrary.ssh_session)} and {@link #ssh_event_add_session(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_event_add_session(Pointer event, Pointer session);
	/**
	 * Original signature : <code>int ssh_event_add_session(ssh_event, ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:578</i>
	 */
	int ssh_event_add_session(SshLibrary.ssh_event event, SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_event_add_connector(ssh_event, ssh_connector)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:580</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_add_connector(ssh.SshLibrary.ssh_event, ssh.SshLibrary.ssh_connector)} and {@link #ssh_event_add_connector(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_event_add_connector(Pointer event, Pointer connector);
	/**
	 * Original signature : <code>int ssh_event_add_connector(ssh_event, ssh_connector)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:580</i>
	 */
	int ssh_event_add_connector(SshLibrary.ssh_event event, SshLibrary.ssh_connector connector);
	/**
	 * Original signature : <code>int ssh_event_dopoll(ssh_event, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:582</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_dopoll(ssh.SshLibrary.ssh_event, int)} and {@link #ssh_event_dopoll(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_event_dopoll(Pointer event, int timeout);
	/**
	 * Original signature : <code>int ssh_event_dopoll(ssh_event, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:582</i>
	 */
	int ssh_event_dopoll(SshLibrary.ssh_event event, int timeout);
	/**
	 * Original signature : <code>int ssh_event_remove_fd(ssh_event, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:584</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_remove_fd(ssh.SshLibrary.ssh_event, ssh.SshLibrary.socket_t)} and {@link #ssh_event_remove_fd(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_event_remove_fd(Pointer event, Pointer fd);
	/**
	 * Original signature : <code>int ssh_event_remove_fd(ssh_event, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:584</i>
	 */
	int ssh_event_remove_fd(SshLibrary.ssh_event event, SshLibrary.socket_t fd);
	/**
	 * Original signature : <code>int ssh_event_remove_session(ssh_event, ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:586</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_remove_session(ssh.SshLibrary.ssh_event, ssh.SshLibrary.ssh_session)} and {@link #ssh_event_remove_session(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_event_remove_session(Pointer event, Pointer session);
	/**
	 * Original signature : <code>int ssh_event_remove_session(ssh_event, ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:586</i>
	 */
	int ssh_event_remove_session(SshLibrary.ssh_event event, SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_event_remove_connector(ssh_event, ssh_connector)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:588</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_remove_connector(ssh.SshLibrary.ssh_event, ssh.SshLibrary.ssh_connector)} and {@link #ssh_event_remove_connector(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_event_remove_connector(Pointer event, Pointer connector);
	/**
	 * Original signature : <code>int ssh_event_remove_connector(ssh_event, ssh_connector)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:588</i>
	 */
	int ssh_event_remove_connector(SshLibrary.ssh_event event, SshLibrary.ssh_connector connector);
	/**
	 * Original signature : <code>void ssh_event_free(ssh_event)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:590</i><br>
	 * @deprecated use the safer methods {@link #ssh_event_free(ssh.SshLibrary.ssh_event)} and {@link #ssh_event_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_event_free(Pointer event);
	/**
	 * Original signature : <code>void ssh_event_free(ssh_event)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:590</i>
	 */
	void ssh_event_free(SshLibrary.ssh_event event);
	/**
	 * Original signature : <code>char* ssh_get_clientbanner(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:592</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_clientbanner(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_clientbanner(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_clientbanner(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_clientbanner(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:592</i>
	 */
	String ssh_get_clientbanner(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_serverbanner(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:594</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_serverbanner(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_serverbanner(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_serverbanner(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_serverbanner(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:594</i>
	 */
	String ssh_get_serverbanner(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_kex_algo(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:596</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_kex_algo(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_kex_algo(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_kex_algo(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_kex_algo(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:596</i>
	 */
	String ssh_get_kex_algo(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_cipher_in(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:598</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_cipher_in(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_cipher_in(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_cipher_in(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_cipher_in(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:598</i>
	 */
	String ssh_get_cipher_in(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_cipher_out(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:600</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_cipher_out(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_cipher_out(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_cipher_out(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_cipher_out(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:600</i>
	 */
	String ssh_get_cipher_out(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_hmac_in(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:602</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_hmac_in(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_hmac_in(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_hmac_in(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_hmac_in(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:602</i>
	 */
	String ssh_get_hmac_in(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_get_hmac_out(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:604</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_hmac_out(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_hmac_out(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_get_hmac_out(Pointer session);
	/**
	 * Original signature : <code>char* ssh_get_hmac_out(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:604</i>
	 */
	String ssh_get_hmac_out(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>ssh_buffer ssh_buffer_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:606</i>
	 */
	SshLibrary.ssh_buffer ssh_buffer_new();
	/**
	 * Original signature : <code>void ssh_buffer_free(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:608</i><br>
	 * @deprecated use the safer methods {@link #ssh_buffer_free(ssh.SshLibrary.ssh_buffer)} and {@link #ssh_buffer_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_buffer_free(Pointer buffer);
	/**
	 * Original signature : <code>void ssh_buffer_free(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:608</i>
	 */
	void ssh_buffer_free(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>int ssh_buffer_reinit(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:610</i><br>
	 * @deprecated use the safer methods {@link #ssh_buffer_reinit(ssh.SshLibrary.ssh_buffer)} and {@link #ssh_buffer_reinit(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_buffer_reinit(Pointer buffer);
	/**
	 * Original signature : <code>int ssh_buffer_reinit(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:610</i>
	 */
	int ssh_buffer_reinit(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>int ssh_buffer_add_data(ssh_buffer, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:612</i><br>
	 * @deprecated use the safer methods {@link #ssh_buffer_add_data(ssh.SshLibrary.ssh_buffer, com.sun.jna.Pointer, int)} and {@link #ssh_buffer_add_data(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_buffer_add_data(Pointer buffer, Pointer data, int len);
	/**
	 * Original signature : <code>int ssh_buffer_add_data(ssh_buffer, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:612</i>
	 */
	int ssh_buffer_add_data(SshLibrary.ssh_buffer buffer, Pointer data, int len);
	/**
	 * Original signature : <code>uint32_t ssh_buffer_get_data(ssh_buffer, void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:614</i><br>
	 * @deprecated use the safer methods {@link #ssh_buffer_get_data(ssh.SshLibrary.ssh_buffer, com.sun.jna.Pointer, int)} and {@link #ssh_buffer_get_data(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_buffer_get_data(Pointer buffer, Pointer data, int requestedlen);
	/**
	 * Original signature : <code>uint32_t ssh_buffer_get_data(ssh_buffer, void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:614</i>
	 */
	int ssh_buffer_get_data(SshLibrary.ssh_buffer buffer, Pointer data, int requestedlen);
	/**
	 * Original signature : <code>void* ssh_buffer_get(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:616</i><br>
	 * @deprecated use the safer methods {@link #ssh_buffer_get(ssh.SshLibrary.ssh_buffer)} and {@link #ssh_buffer_get(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ssh_buffer_get(Pointer buffer);
	/**
	 * Original signature : <code>void* ssh_buffer_get(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:616</i>
	 */
	Pointer ssh_buffer_get(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>uint32_t ssh_buffer_get_len(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:618</i><br>
	 * @deprecated use the safer methods {@link #ssh_buffer_get_len(ssh.SshLibrary.ssh_buffer)} and {@link #ssh_buffer_get_len(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_buffer_get_len(Pointer buffer);
	/**
	 * Original signature : <code>uint32_t ssh_buffer_get_len(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/libssh.h:618</i>
	 */
	int ssh_buffer_get_len(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>int ssh_auth_list(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:10</i><br>
	 * @deprecated use the safer methods {@link #ssh_auth_list(ssh.SshLibrary.ssh_session)} and {@link #ssh_auth_list(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_auth_list(Pointer session);
	/**
	 * Original signature : <code>int ssh_auth_list(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:10</i>
	 */
	int ssh_auth_list(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int ssh_userauth_offer_pubkey(ssh_session, const char*, int, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:12</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_offer_pubkey(ssh.SshLibrary.ssh_session, java.lang.String, int, ssh.SshLibrary.ssh_string)} and {@link #ssh_userauth_offer_pubkey(com.sun.jna.Pointer, com.sun.jna.Pointer, int, ssh.SshLibrary.ssh_string)} instead
	 */
	@Deprecated 
	int ssh_userauth_offer_pubkey(Pointer session, Pointer username, int type, SshLibrary.ssh_string publickey);
	/**
	 * Original signature : <code>int ssh_userauth_offer_pubkey(ssh_session, const char*, int, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:12</i>
	 */
	int ssh_userauth_offer_pubkey(SshLibrary.ssh_session session, String username, int type, SshLibrary.ssh_string publickey);
	/**
	 * Original signature : <code>int ssh_userauth_pubkey(ssh_session, const char*, ssh_string, ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:14</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_pubkey(ssh.SshLibrary.ssh_session, java.lang.String, ssh.SshLibrary.ssh_string, ssh.SshLibrary.ssh_private_key)} and {@link #ssh_userauth_pubkey(com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.SshLibrary.ssh_string, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_pubkey(Pointer session, Pointer username, SshLibrary.ssh_string publickey, Pointer privatekey);
	/**
	 * Original signature : <code>int ssh_userauth_pubkey(ssh_session, const char*, ssh_string, ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:14</i>
	 */
	int ssh_userauth_pubkey(SshLibrary.ssh_session session, String username, SshLibrary.ssh_string publickey, SshLibrary.ssh_private_key privatekey);
	/**
	 * Original signature : <code>int ssh_userauth_autopubkey(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:16</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_autopubkey(ssh.SshLibrary.ssh_session, java.lang.String)} and {@link #ssh_userauth_autopubkey(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_autopubkey(Pointer session, Pointer passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_autopubkey(ssh_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:16</i>
	 */
	int ssh_userauth_autopubkey(SshLibrary.ssh_session session, String passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_privatekey_file(ssh_session, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:18</i><br>
	 * @deprecated use the safer methods {@link #ssh_userauth_privatekey_file(ssh.SshLibrary.ssh_session, java.lang.String, java.lang.String, java.lang.String)} and {@link #ssh_userauth_privatekey_file(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_userauth_privatekey_file(Pointer session, Pointer username, Pointer filename, Pointer passphrase);
	/**
	 * Original signature : <code>int ssh_userauth_privatekey_file(ssh_session, const char*, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:18</i>
	 */
	int ssh_userauth_privatekey_file(SshLibrary.ssh_session session, String username, String filename, String passphrase);
	/**
	 * Original signature : <code>void buffer_free(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:20</i><br>
	 * @deprecated use the safer methods {@link #buffer_free(ssh.SshLibrary.ssh_buffer)} and {@link #buffer_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void buffer_free(Pointer buffer);
	/**
	 * Original signature : <code>void buffer_free(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:20</i>
	 */
	void buffer_free(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>void* buffer_get(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:22</i><br>
	 * @deprecated use the safer methods {@link #buffer_get(ssh.SshLibrary.ssh_buffer)} and {@link #buffer_get(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer buffer_get(Pointer buffer);
	/**
	 * Original signature : <code>void* buffer_get(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:22</i>
	 */
	Pointer buffer_get(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>uint32_t buffer_get_len(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:24</i><br>
	 * @deprecated use the safer methods {@link #buffer_get_len(ssh.SshLibrary.ssh_buffer)} and {@link #buffer_get_len(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int buffer_get_len(Pointer buffer);
	/**
	 * Original signature : <code>uint32_t buffer_get_len(ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:24</i>
	 */
	int buffer_get_len(SshLibrary.ssh_buffer buffer);
	/**
	 * Original signature : <code>ssh_buffer buffer_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:26</i>
	 */
	SshLibrary.ssh_buffer buffer_new();
	/**
	 * Original signature : <code>ssh_channel channel_accept_x11(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:28</i><br>
	 * @deprecated use the safer methods {@link #channel_accept_x11(ssh.SshLibrary.ssh_channel, int)} and {@link #channel_accept_x11(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel channel_accept_x11(Pointer channel, int timeout_ms);
	/**
	 * Original signature : <code>ssh_channel channel_accept_x11(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:28</i>
	 */
	SshLibrary.ssh_channel channel_accept_x11(SshLibrary.ssh_channel channel, int timeout_ms);
	/**
	 * Original signature : <code>int channel_change_pty_size(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:30</i><br>
	 * @deprecated use the safer methods {@link #channel_change_pty_size(ssh.SshLibrary.ssh_channel, int, int)} and {@link #channel_change_pty_size(com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int channel_change_pty_size(Pointer channel, int cols, int rows);
	/**
	 * Original signature : <code>int channel_change_pty_size(ssh_channel, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:30</i>
	 */
	int channel_change_pty_size(SshLibrary.ssh_channel channel, int cols, int rows);
	/**
	 * Original signature : <code>ssh_channel channel_forward_accept(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:32</i><br>
	 * @deprecated use the safer methods {@link #channel_forward_accept(ssh.SshLibrary.ssh_session, int)} and {@link #channel_forward_accept(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel channel_forward_accept(Pointer session, int timeout_ms);
	/**
	 * Original signature : <code>ssh_channel channel_forward_accept(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:32</i>
	 */
	SshLibrary.ssh_channel channel_forward_accept(SshLibrary.ssh_session session, int timeout_ms);
	/**
	 * Original signature : <code>int channel_close(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:34</i><br>
	 * @deprecated use the safer methods {@link #channel_close(ssh.SshLibrary.ssh_channel)} and {@link #channel_close(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_close(Pointer channel);
	/**
	 * Original signature : <code>int channel_close(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:34</i>
	 */
	int channel_close(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:36</i><br>
	 * @deprecated use the safer methods {@link #channel_forward_cancel(ssh.SshLibrary.ssh_session, java.lang.String, int)} and {@link #channel_forward_cancel(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int channel_forward_cancel(Pointer session, Pointer address, int port);
	/**
	 * Original signature : <code>int channel_forward_cancel(ssh_session, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:36</i>
	 */
	int channel_forward_cancel(SshLibrary.ssh_session session, String address, int port);
	/**
	 * Original signature : <code>int channel_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:38</i><br>
	 * @deprecated use the safer methods {@link #channel_forward_listen(ssh.SshLibrary.ssh_session, java.lang.String, int, java.nio.IntBuffer)} and {@link #channel_forward_listen(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int channel_forward_listen(Pointer session, Pointer address, int port, IntByReference bound_port);
	/**
	 * Original signature : <code>int channel_forward_listen(ssh_session, const char*, int, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:38</i>
	 */
	int channel_forward_listen(SshLibrary.ssh_session session, String address, int port, IntBuffer bound_port);
	/**
	 * Original signature : <code>void channel_free(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:40</i><br>
	 * @deprecated use the safer methods {@link #channel_free(ssh.SshLibrary.ssh_channel)} and {@link #channel_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void channel_free(Pointer channel);
	/**
	 * Original signature : <code>void channel_free(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:40</i>
	 */
	void channel_free(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_get_exit_status(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:42</i><br>
	 * @deprecated use the safer methods {@link #channel_get_exit_status(ssh.SshLibrary.ssh_channel)} and {@link #channel_get_exit_status(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_get_exit_status(Pointer channel);
	/**
	 * Original signature : <code>int channel_get_exit_status(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:42</i>
	 */
	int channel_get_exit_status(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_session channel_get_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:44</i><br>
	 * @deprecated use the safer methods {@link #channel_get_session(ssh.SshLibrary.ssh_channel)} and {@link #channel_get_session(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_session channel_get_session(Pointer channel);
	/**
	 * Original signature : <code>ssh_session channel_get_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:44</i>
	 */
	SshLibrary.ssh_session channel_get_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_is_closed(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:46</i><br>
	 * @deprecated use the safer methods {@link #channel_is_closed(ssh.SshLibrary.ssh_channel)} and {@link #channel_is_closed(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_is_closed(Pointer channel);
	/**
	 * Original signature : <code>int channel_is_closed(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:46</i>
	 */
	int channel_is_closed(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_is_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:48</i><br>
	 * @deprecated use the safer methods {@link #channel_is_eof(ssh.SshLibrary.ssh_channel)} and {@link #channel_is_eof(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_is_eof(Pointer channel);
	/**
	 * Original signature : <code>int channel_is_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:48</i>
	 */
	int channel_is_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_is_open(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:50</i><br>
	 * @deprecated use the safer methods {@link #channel_is_open(ssh.SshLibrary.ssh_channel)} and {@link #channel_is_open(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_is_open(Pointer channel);
	/**
	 * Original signature : <code>int channel_is_open(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:50</i>
	 */
	int channel_is_open(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>ssh_channel channel_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:52</i><br>
	 * @deprecated use the safer methods {@link #channel_new(ssh.SshLibrary.ssh_session)} and {@link #channel_new(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel channel_new(Pointer session);
	/**
	 * Original signature : <code>ssh_channel channel_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:52</i>
	 */
	SshLibrary.ssh_channel channel_new(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:54</i><br>
	 * @deprecated use the safer methods {@link #channel_open_forward(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, int)} and {@link #channel_open_forward(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int channel_open_forward(Pointer channel, Pointer remotehost, int remoteport, Pointer sourcehost, int localport);
	/**
	 * Original signature : <code>int channel_open_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:54</i>
	 */
	int channel_open_forward(SshLibrary.ssh_channel channel, String remotehost, int remoteport, String sourcehost, int localport);
	/**
	 * Original signature : <code>int channel_open_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:56</i><br>
	 * @deprecated use the safer methods {@link #channel_open_session(ssh.SshLibrary.ssh_channel)} and {@link #channel_open_session(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_open_session(Pointer channel);
	/**
	 * Original signature : <code>int channel_open_session(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:56</i>
	 */
	int channel_open_session(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_poll(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:58</i><br>
	 * @deprecated use the safer methods {@link #channel_poll(ssh.SshLibrary.ssh_channel, int)} and {@link #channel_poll(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int channel_poll(Pointer channel, int is_stderr);
	/**
	 * Original signature : <code>int channel_poll(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:58</i>
	 */
	int channel_poll(SshLibrary.ssh_channel channel, int is_stderr);
	/**
	 * Original signature : <code>int channel_read(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:60</i><br>
	 * @deprecated use the safer methods {@link #channel_read(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, int)} and {@link #channel_read(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int channel_read(Pointer channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_read(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:60</i>
	 */
	int channel_read(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_read_buffer(ssh_channel, ssh_buffer, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:62</i><br>
	 * @deprecated use the safer methods {@link #channel_read_buffer(ssh.SshLibrary.ssh_channel, ssh.SshLibrary.ssh_buffer, int, int)} and {@link #channel_read_buffer(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int channel_read_buffer(Pointer channel, Pointer buffer, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_read_buffer(ssh_channel, ssh_buffer, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:62</i>
	 */
	int channel_read_buffer(SshLibrary.ssh_channel channel, SshLibrary.ssh_buffer buffer, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_read_nonblocking(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:64</i><br>
	 * @deprecated use the safer methods {@link #channel_read_nonblocking(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int, int)} and {@link #channel_read_nonblocking(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int channel_read_nonblocking(Pointer channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_read_nonblocking(ssh_channel, void*, uint32_t, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:64</i>
	 */
	int channel_read_nonblocking(SshLibrary.ssh_channel channel, Pointer dest, int count, int is_stderr);
	/**
	 * Original signature : <code>int channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:66</i><br>
	 * @deprecated use the safer methods {@link #channel_request_env(ssh.SshLibrary.ssh_channel, java.lang.String, java.lang.String)} and {@link #channel_request_env(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_request_env(Pointer channel, Pointer name, Pointer value);
	/**
	 * Original signature : <code>int channel_request_env(ssh_channel, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:66</i>
	 */
	int channel_request_env(SshLibrary.ssh_channel channel, String name, String value);
	/**
	 * Original signature : <code>int channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:68</i><br>
	 * @deprecated use the safer methods {@link #channel_request_exec(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #channel_request_exec(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_request_exec(Pointer channel, Pointer cmd);
	/**
	 * Original signature : <code>int channel_request_exec(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:68</i>
	 */
	int channel_request_exec(SshLibrary.ssh_channel channel, String cmd);
	/**
	 * Original signature : <code>int channel_request_pty(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:70</i><br>
	 * @deprecated use the safer methods {@link #channel_request_pty(ssh.SshLibrary.ssh_channel)} and {@link #channel_request_pty(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_request_pty(Pointer channel);
	/**
	 * Original signature : <code>int channel_request_pty(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:70</i>
	 */
	int channel_request_pty(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:72</i><br>
	 * @deprecated use the safer methods {@link #channel_request_pty_size(ssh.SshLibrary.ssh_channel, java.lang.String, int, int)} and {@link #channel_request_pty_size(com.sun.jna.Pointer, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int channel_request_pty_size(Pointer channel, Pointer term, int cols, int rows);
	/**
	 * Original signature : <code>int channel_request_pty_size(ssh_channel, const char*, int, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:72</i>
	 */
	int channel_request_pty_size(SshLibrary.ssh_channel channel, String term, int cols, int rows);
	/**
	 * Original signature : <code>int channel_request_shell(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:74</i><br>
	 * @deprecated use the safer methods {@link #channel_request_shell(ssh.SshLibrary.ssh_channel)} and {@link #channel_request_shell(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_request_shell(Pointer channel);
	/**
	 * Original signature : <code>int channel_request_shell(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:74</i>
	 */
	int channel_request_shell(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:76</i><br>
	 * @deprecated use the safer methods {@link #channel_request_send_signal(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #channel_request_send_signal(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_request_send_signal(Pointer channel, Pointer signum);
	/**
	 * Original signature : <code>int channel_request_send_signal(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:76</i>
	 */
	int channel_request_send_signal(SshLibrary.ssh_channel channel, String signum);
	/**
	 * Original signature : <code>int channel_request_sftp(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:78</i><br>
	 * @deprecated use the safer methods {@link #channel_request_sftp(ssh.SshLibrary.ssh_channel)} and {@link #channel_request_sftp(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_request_sftp(Pointer channel);
	/**
	 * Original signature : <code>int channel_request_sftp(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:78</i>
	 */
	int channel_request_sftp(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:80</i><br>
	 * @deprecated use the safer methods {@link #channel_request_subsystem(ssh.SshLibrary.ssh_channel, java.lang.String)} and {@link #channel_request_subsystem(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_request_subsystem(Pointer channel, Pointer subsystem);
	/**
	 * Original signature : <code>int channel_request_subsystem(ssh_channel, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:80</i>
	 */
	int channel_request_subsystem(SshLibrary.ssh_channel channel, String subsystem);
	/**
	 * Original signature : <code>int channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:82</i><br>
	 * @deprecated use the safer methods {@link #channel_request_x11(ssh.SshLibrary.ssh_channel, int, java.lang.String, java.lang.String, int)} and {@link #channel_request_x11(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int channel_request_x11(Pointer channel, int single_connection, Pointer protocol, Pointer cookie, int screen_number);
	/**
	 * Original signature : <code>int channel_request_x11(ssh_channel, int, const char*, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:82</i>
	 */
	int channel_request_x11(SshLibrary.ssh_channel channel, int single_connection, String protocol, String cookie, int screen_number);
	/**
	 * Original signature : <code>int channel_send_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:84</i><br>
	 * @deprecated use the safer methods {@link #channel_send_eof(ssh.SshLibrary.ssh_channel)} and {@link #channel_send_eof(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int channel_send_eof(Pointer channel);
	/**
	 * Original signature : <code>int channel_send_eof(ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:84</i>
	 */
	int channel_send_eof(SshLibrary.ssh_channel channel);
	/**
	 * Original signature : <code>int channel_select(ssh_channel*, ssh_channel*, ssh_channel*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:86</i><br>
	 * @deprecated use the safer method {@link #channel_select(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, ssh.SshLibrary.timeval)} instead
	 */
	@Deprecated 
	int channel_select(Pointer readchans, Pointer writechans, Pointer exceptchans, SshLibrary.timeval timeout);
	/**
	 * Original signature : <code>int channel_select(ssh_channel*, ssh_channel*, ssh_channel*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:86</i>
	 */
	int channel_select(PointerByReference readchans, PointerByReference writechans, PointerByReference exceptchans, SshLibrary.timeval timeout);
	/**
	 * Original signature : <code>void channel_set_blocking(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:88</i><br>
	 * @deprecated use the safer methods {@link #channel_set_blocking(ssh.SshLibrary.ssh_channel, int)} and {@link #channel_set_blocking(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void channel_set_blocking(Pointer channel, int blocking);
	/**
	 * Original signature : <code>void channel_set_blocking(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:88</i>
	 */
	void channel_set_blocking(SshLibrary.ssh_channel channel, int blocking);
	/**
	 * Original signature : <code>int channel_write(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:90</i><br>
	 * @deprecated use the safer methods {@link #channel_write(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int)} and {@link #channel_write(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int channel_write(Pointer channel, Pointer data, int len);
	/**
	 * Original signature : <code>int channel_write(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:90</i>
	 */
	int channel_write(SshLibrary.ssh_channel channel, Pointer data, int len);
	/**
	 * Original signature : <code>void privatekey_free(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:92</i><br>
	 * @deprecated use the safer methods {@link #privatekey_free(ssh.SshLibrary.ssh_private_key)} and {@link #privatekey_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void privatekey_free(Pointer prv);
	/**
	 * Original signature : <code>void privatekey_free(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:92</i>
	 */
	void privatekey_free(SshLibrary.ssh_private_key prv);
	/**
	 * Original signature : <code>ssh_private_key privatekey_from_file(ssh_session, const char*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:94</i><br>
	 * @deprecated use the safer methods {@link #privatekey_from_file(ssh.SshLibrary.ssh_session, java.lang.String, int, java.lang.String)} and {@link #privatekey_from_file(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_private_key privatekey_from_file(Pointer session, Pointer filename, int type, Pointer passphrase);
	/**
	 * Original signature : <code>ssh_private_key privatekey_from_file(ssh_session, const char*, int, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:94</i>
	 */
	SshLibrary.ssh_private_key privatekey_from_file(SshLibrary.ssh_session session, String filename, int type, String passphrase);
	/**
	 * Original signature : <code>void publickey_free(ssh_public_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:96</i><br>
	 * @deprecated use the safer methods {@link #publickey_free(ssh.SshLibrary.ssh_public_key)} and {@link #publickey_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void publickey_free(Pointer key);
	/**
	 * Original signature : <code>void publickey_free(ssh_public_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:96</i>
	 */
	void publickey_free(SshLibrary.ssh_public_key key);
	/**
	 * Original signature : <code>int ssh_publickey_to_file(ssh_session, const char*, ssh_string, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:98</i><br>
	 * @deprecated use the safer methods {@link #ssh_publickey_to_file(ssh.SshLibrary.ssh_session, java.lang.String, ssh.SshLibrary.ssh_string, int)} and {@link #ssh_publickey_to_file(com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.SshLibrary.ssh_string, int)} instead
	 */
	@Deprecated 
	int ssh_publickey_to_file(Pointer session, Pointer file, SshLibrary.ssh_string pubkey, int type);
	/**
	 * Original signature : <code>int ssh_publickey_to_file(ssh_session, const char*, ssh_string, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:98</i>
	 */
	int ssh_publickey_to_file(SshLibrary.ssh_session session, String file, SshLibrary.ssh_string pubkey, int type);
	/**
	 * Original signature : <code>ssh_string publickey_from_file(ssh_session, const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:100</i><br>
	 * @deprecated use the safer methods {@link #publickey_from_file(ssh.SshLibrary.ssh_session, java.lang.String, java.nio.IntBuffer)} and {@link #publickey_from_file(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_string publickey_from_file(Pointer session, Pointer filename, IntByReference type);
	/**
	 * Original signature : <code>ssh_string publickey_from_file(ssh_session, const char*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:100</i>
	 */
	SshLibrary.ssh_string publickey_from_file(SshLibrary.ssh_session session, String filename, IntBuffer type);
	/**
	 * Original signature : <code>ssh_public_key publickey_from_privatekey(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:102</i><br>
	 * @deprecated use the safer methods {@link #publickey_from_privatekey(ssh.SshLibrary.ssh_private_key)} and {@link #publickey_from_privatekey(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_public_key publickey_from_privatekey(Pointer prv);
	/**
	 * Original signature : <code>ssh_public_key publickey_from_privatekey(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:102</i>
	 */
	SshLibrary.ssh_public_key publickey_from_privatekey(SshLibrary.ssh_private_key prv);
	/**
	 * Original signature : <code>ssh_string publickey_to_string(ssh_public_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:104</i><br>
	 * @deprecated use the safer methods {@link #publickey_to_string(ssh.SshLibrary.ssh_public_key)} and {@link #publickey_to_string(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_string publickey_to_string(Pointer key);
	/**
	 * Original signature : <code>ssh_string publickey_to_string(ssh_public_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:104</i>
	 */
	SshLibrary.ssh_string publickey_to_string(SshLibrary.ssh_public_key key);
	/**
	 * Original signature : <code>int ssh_try_publickey_from_file(ssh_session, const char*, ssh_string*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:106</i><br>
	 * @deprecated use the safer methods {@link #ssh_try_publickey_from_file(ssh.SshLibrary.ssh_session, java.lang.String, ssh.SshLibrary.ssh_string, java.nio.IntBuffer)} and {@link #ssh_try_publickey_from_file(com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.SshLibrary.ssh_string, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int ssh_try_publickey_from_file(Pointer session, Pointer keyfile, SshLibrary.ssh_string publickey, IntByReference type);
	/**
	 * Original signature : <code>int ssh_try_publickey_from_file(ssh_session, const char*, ssh_string*, int*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:106</i>
	 */
	int ssh_try_publickey_from_file(SshLibrary.ssh_session session, String keyfile, SshLibrary.ssh_string publickey, IntBuffer type);
	/**
	 * Original signature : <code>ssh_keytypes_e ssh_privatekey_type(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:108</i><br>
	 * @deprecated use the safer methods {@link #ssh_privatekey_type(ssh.SshLibrary.ssh_private_key)} and {@link #ssh_privatekey_type(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_privatekey_type(Pointer privatekey);
	/**
	 * Original signature : <code>ssh_keytypes_e ssh_privatekey_type(ssh_private_key)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:108</i>
	 */
	int ssh_privatekey_type(SshLibrary.ssh_private_key privatekey);
	/**
	 * Original signature : <code>ssh_string ssh_get_pubkey(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:110</i><br>
	 * @deprecated use the safer methods {@link #ssh_get_pubkey(ssh.SshLibrary.ssh_session)} and {@link #ssh_get_pubkey(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_string ssh_get_pubkey(Pointer session);
	/**
	 * Original signature : <code>ssh_string ssh_get_pubkey(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:110</i>
	 */
	SshLibrary.ssh_string ssh_get_pubkey(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>ssh_message ssh_message_retrieve(ssh_session, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:112</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_retrieve(ssh.SshLibrary.ssh_session, int)} and {@link #ssh_message_retrieve(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_message ssh_message_retrieve(Pointer session, int packettype);
	/**
	 * Original signature : <code>ssh_message ssh_message_retrieve(ssh_session, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:112</i>
	 */
	SshLibrary.ssh_message ssh_message_retrieve(SshLibrary.ssh_session session, int packettype);
	/**
	 * Original signature : <code>ssh_public_key ssh_message_auth_publickey(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:114</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_publickey(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_auth_publickey(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_public_key ssh_message_auth_publickey(Pointer msg);
	/**
	 * Original signature : <code>ssh_public_key ssh_message_auth_publickey(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:114</i>
	 */
	SshLibrary.ssh_public_key ssh_message_auth_publickey(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>void string_burn(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:116</i>
	 */
	void string_burn(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string string_copy(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:118</i>
	 */
	SshLibrary.ssh_string string_copy(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>void* string_data(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:120</i>
	 */
	Pointer string_data(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>int string_fill(ssh_string, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:122</i>
	 */
	int string_fill(SshLibrary.ssh_string str, Pointer data, NativeSize len);
	/**
	 * Original signature : <code>void string_free(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:124</i>
	 */
	void string_free(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:126</i><br>
	 * @deprecated use the safer methods {@link #string_from_char(java.lang.String)} and {@link #string_from_char(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_string string_from_char(Pointer what);
	/**
	 * Original signature : <code>ssh_string string_from_char(const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:126</i>
	 */
	SshLibrary.ssh_string string_from_char(String what);
	/**
	 * Original signature : <code>size_t string_len(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:128</i>
	 */
	NativeSize string_len(SshLibrary.ssh_string str);
	/**
	 * Original signature : <code>ssh_string string_new(size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:130</i>
	 */
	SshLibrary.ssh_string string_new(NativeSize size);
	/**
	 * Original signature : <code>char* string_to_char(ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/legacy.h:132</i>
	 */
	Pointer string_to_char(SshLibrary.ssh_string str);
	/**
	 * @brief Start a new sftp session.<br>
	 * @param session       The ssh session to use.<br>
	 * @return              A new sftp session or NULL on error.<br>
	 * @see sftp_free()<br>
	 * Original signature : <code>sftp_session sftp_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:129</i><br>
	 * @deprecated use the safer methods {@link #sftp_new(ssh.SshLibrary.ssh_session)} and {@link #sftp_new(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_session_struct sftp_new(Pointer session);
	/**
	 * @brief Start a new sftp session.<br>
	 * @param session       The ssh session to use.<br>
	 * @return              A new sftp session or NULL on error.<br>
	 * @see sftp_free()<br>
	 * Original signature : <code>sftp_session sftp_new(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:129</i>
	 */
	sftp_session_struct sftp_new(SshLibrary.ssh_session session);
	/**
	 * @brief Start a new sftp session with an existing channel.<br>
	 * @param session       The ssh session to use.<br>
	 * @param channel		An open session channel with subsystem already allocated<br>
	 * @return              A new sftp session or NULL on error.<br>
	 * @see sftp_free()<br>
	 * Original signature : <code>sftp_session sftp_new_channel(ssh_session, ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:138</i><br>
	 * @deprecated use the safer methods {@link #sftp_new_channel(ssh.SshLibrary.ssh_session, ssh.SshLibrary.ssh_channel)} and {@link #sftp_new_channel(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_session_struct sftp_new_channel(Pointer session, Pointer channel);
	/**
	 * @brief Start a new sftp session with an existing channel.<br>
	 * @param session       The ssh session to use.<br>
	 * @param channel		An open session channel with subsystem already allocated<br>
	 * @return              A new sftp session or NULL on error.<br>
	 * @see sftp_free()<br>
	 * Original signature : <code>sftp_session sftp_new_channel(ssh_session, ssh_channel)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:138</i>
	 */
	sftp_session_struct sftp_new_channel(SshLibrary.ssh_session session, SshLibrary.ssh_channel channel);
	/**
	 * @brief Close and deallocate a sftp session.<br>
	 * @param sftp          The sftp session handle to free.<br>
	 * Original signature : <code>void sftp_free(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:144</i>
	 */
	void sftp_free(sftp_session_struct sftp);
	/**
	 * @brief Initialize the sftp session with the server.<br>
	 * @param sftp          The sftp session to initialize.<br>
	 * @return              0 on success, < 0 on error with ssh error set.<br>
	 * @see sftp_new()<br>
	 * Original signature : <code>int sftp_init(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:152</i>
	 */
	int sftp_init(sftp_session_struct sftp);
	/**
	 * @brief Get the last sftp error.<br>
	 * Use this function to get the latest error set by a posix like sftp function.<br>
	 * @param sftp          The sftp session where the error is saved.<br>
	 * @return              The saved error (see server responses), < 0 if an error<br>
	 *                      in the function occured.<br>
	 * @see Server responses<br>
	 * Original signature : <code>int sftp_get_error(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:162</i>
	 */
	int sftp_get_error(sftp_session_struct sftp);
	/**
	 * @brief Get the count of extensions provided by the server.<br>
	 * @param  sftp         The sftp session to use.<br>
	 * @return The count of extensions provided by the server, 0 on error or<br>
	 *         not available.<br>
	 * Original signature : <code>int sftp_extensions_get_count(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:170</i>
	 */
	int sftp_extensions_get_count(sftp_session_struct sftp);
	/**
	 * @brief Get the name of the extension provided by the server.<br>
	 * @param  sftp         The sftp session to use.<br>
	 * @param  indexn        The index number of the extension name you want.<br>
	 * @return              The name of the extension.<br>
	 * Original signature : <code>char* sftp_extensions_get_name(sftp_session, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:178</i>
	 */
	String sftp_extensions_get_name(sftp_session_struct sftp, int indexn);
	/**
	 * @brief Get the data of the extension provided by the server.<br>
	 * This is normally the version number of the extension.<br>
	 * @param  sftp         The sftp session to use.<br>
	 * @param  indexn        The index number of the extension data you want.<br>
	 * @return              The data of the extension.<br>
	 * Original signature : <code>char* sftp_extensions_get_data(sftp_session, unsigned int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:187</i>
	 */
	String sftp_extensions_get_data(sftp_session_struct sftp, int indexn);
	/**
	 * @brief Check if the given extension is supported.<br>
	 * @param  sftp         The sftp session to use.<br>
	 * @param  name         The name of the extension.<br>
	 * @param  data         The data of the extension.<br>
	 * @return 1 if supported, 0 if not.<br>
	 * Example:<br>
	 * @code<br>
	 * sftp_extension_supported(sftp, "statvfs@openssh.com", "2");<br>
	 * @endcode<br>
	 * Original signature : <code>int sftp_extension_supported(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:200</i><br>
	 * @deprecated use the safer methods {@link #sftp_extension_supported(ssh.sftp_session_struct, java.lang.String, java.lang.String)} and {@link #sftp_extension_supported(ssh.sftp_session_struct, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_extension_supported(sftp_session_struct sftp, Pointer name, Pointer data);
	/**
	 * @brief Check if the given extension is supported.<br>
	 * @param  sftp         The sftp session to use.<br>
	 * @param  name         The name of the extension.<br>
	 * @param  data         The data of the extension.<br>
	 * @return 1 if supported, 0 if not.<br>
	 * Example:<br>
	 * @code<br>
	 * sftp_extension_supported(sftp, "statvfs@openssh.com", "2");<br>
	 * @endcode<br>
	 * Original signature : <code>int sftp_extension_supported(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:200</i>
	 */
	int sftp_extension_supported(sftp_session_struct sftp, String name, String data);
	/**
	 * @brief Open a directory used to obtain directory entries.<br>
	 * @param session       The sftp session handle to open the directory.<br>
	 * @param path          The path of the directory to open.<br>
	 * @return              A sftp directory handle or NULL on error with ssh and<br>
	 *                      sftp error set.<br>
	 * @see                 sftp_readdir<br>
	 * @see                 sftp_closedir<br>
	 * Original signature : <code>sftp_dir sftp_opendir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:211</i><br>
	 * @deprecated use the safer methods {@link #sftp_opendir(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_opendir(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_dir_struct sftp_opendir(sftp_session_struct session, Pointer path);
	/**
	 * @brief Open a directory used to obtain directory entries.<br>
	 * @param session       The sftp session handle to open the directory.<br>
	 * @param path          The path of the directory to open.<br>
	 * @return              A sftp directory handle or NULL on error with ssh and<br>
	 *                      sftp error set.<br>
	 * @see                 sftp_readdir<br>
	 * @see                 sftp_closedir<br>
	 * Original signature : <code>sftp_dir sftp_opendir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:211</i>
	 */
	sftp_dir_struct sftp_opendir(sftp_session_struct session, String path);
	/**
	 * @brief Get a single file attributes structure of a directory.<br>
	 * @param session      The sftp session handle to read the directory entry.<br>
	 * @param dir          The opened sftp directory handle to read from.<br>
	 * @return             A file attribute structure or NULL at the end of the<br>
	 *                     directory.<br>
	 * @see                sftp_opendir()<br>
	 * @see                sftp_attribute_free()<br>
	 * @see                sftp_closedir()<br>
	 * Original signature : <code>sftp_attributes sftp_readdir(sftp_session, sftp_dir)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:223</i>
	 */
	sftp_attributes_struct sftp_readdir(sftp_session_struct session, sftp_dir_struct dir);
	/**
	 * @brief Tell if the directory has reached EOF (End Of File).<br>
	 * @param dir           The sftp directory handle.<br>
	 * @return              1 if the directory is EOF, 0 if not.<br>
	 * @see                 sftp_readdir()<br>
	 * Original signature : <code>int sftp_dir_eof(sftp_dir)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:231</i>
	 */
	int sftp_dir_eof(sftp_dir_struct dir);
	/**
	 * @brief Get information about a file or directory.<br>
	 * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_attributes sftp_stat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:242</i><br>
	 * @deprecated use the safer methods {@link #sftp_stat(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_stat(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_attributes_struct sftp_stat(sftp_session_struct session, Pointer path);
	/**
	 * @brief Get information about a file or directory.<br>
	 * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_attributes sftp_stat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:242</i>
	 */
	sftp_attributes_struct sftp_stat(sftp_session_struct session, String path);
	/**
	 * @brief Get information about a file or directory.<br>
	 * Identical to sftp_stat, but if the file or directory is a symbolic link,<br>
	 * then the link itself is stated, not the file that it refers to.<br>
	 * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_attributes sftp_lstat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:255</i><br>
	 * @deprecated use the safer methods {@link #sftp_lstat(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_lstat(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_attributes_struct sftp_lstat(sftp_session_struct session, Pointer path);
	/**
	 * @brief Get information about a file or directory.<br>
	 * Identical to sftp_stat, but if the file or directory is a symbolic link,<br>
	 * then the link itself is stated, not the file that it refers to.<br>
	 * @param session       The sftp session handle.<br>
	 * @param path          The path to the file or directory to obtain the<br>
	 *                      information.<br>
	 * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_attributes sftp_lstat(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:255</i>
	 */
	sftp_attributes_struct sftp_lstat(sftp_session_struct session, String path);
	/**
	 * @brief Get information about a file or directory from a file handle.<br>
	 * @param file          The sftp file handle to get the stat information.<br>
	 * @return              The sftp attributes structure of the file or directory,<br>
	 *                      NULL on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_attributes sftp_fstat(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:264</i>
	 */
	sftp_attributes_struct sftp_fstat(sftp_file_struct file);
	/**
	 * @brief Free a sftp attribute structure.<br>
	 * @param file          The sftp attribute structure to free.<br>
	 * Original signature : <code>void sftp_attributes_free(sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:270</i>
	 */
	void sftp_attributes_free(sftp_attributes_struct file);
	/**
	 * @brief Close a directory handle opened by sftp_opendir().<br>
	 * @param dir           The sftp directory handle to close.<br>
	 * @return              Returns SSH_NO_ERROR or SSH_ERROR if an error occured.<br>
	 * Original signature : <code>int sftp_closedir(sftp_dir)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:277</i>
	 */
	int sftp_closedir(sftp_dir_struct dir);
	/**
	 * @brief Close an open file handle.<br>
	 * @param file          The open sftp file handle to close.<br>
	 * @return              Returns SSH_NO_ERROR or SSH_ERROR if an error occured.<br>
	 * @see                 sftp_open()<br>
	 * Original signature : <code>int sftp_close(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:285</i>
	 */
	int sftp_close(sftp_file_struct file);
	/**
	 * @brief Open a file on the server.<br>
	 * @param session       The sftp session handle.<br>
	 * @param file          The file to be opened.<br>
	 * @param accesstype    Is one of O_RDONLY, O_WRONLY or O_RDWR which request<br>
	 *                      opening  the  file  read-only,write-only or read/write.<br>
	 *                      Acesss may also be bitwise-or'd with one or  more of<br>
	 *                      the following:<br>
	 *                      O_CREAT - If the file does not exist it will be<br>
	 *                      created.<br>
	 *                      O_EXCL - When  used with O_CREAT, if the file already<br>
	 *                      exists it is an error and the open will fail.<br>
	 *                      O_TRUNC - If the file already exists it will be<br>
	 *                      truncated.<br>
	 * @param mode          Mode specifies the permissions to use if a new file is<br>
	 *                      created.  It  is  modified  by  the process's umask in<br>
	 *                      the usual way: The permissions of the created file are<br>
	 *                      (mode & ~umask)<br>
	 * @return              A sftp file handle, NULL on error with ssh and sftp<br>
	 *                      error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_file sftp_open(sftp_session, const char*, int, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:309</i><br>
	 * @deprecated use the safer methods {@link #sftp_open(ssh.sftp_session_struct, java.lang.String, int, int)} and {@link #sftp_open(ssh.sftp_session_struct, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	sftp_file_struct sftp_open(sftp_session_struct session, Pointer file, int accesstype, int mode);
	/**
	 * @brief Open a file on the server.<br>
	 * @param session       The sftp session handle.<br>
	 * @param file          The file to be opened.<br>
	 * @param accesstype    Is one of O_RDONLY, O_WRONLY or O_RDWR which request<br>
	 *                      opening  the  file  read-only,write-only or read/write.<br>
	 *                      Acesss may also be bitwise-or'd with one or  more of<br>
	 *                      the following:<br>
	 *                      O_CREAT - If the file does not exist it will be<br>
	 *                      created.<br>
	 *                      O_EXCL - When  used with O_CREAT, if the file already<br>
	 *                      exists it is an error and the open will fail.<br>
	 *                      O_TRUNC - If the file already exists it will be<br>
	 *                      truncated.<br>
	 * @param mode          Mode specifies the permissions to use if a new file is<br>
	 *                      created.  It  is  modified  by  the process's umask in<br>
	 *                      the usual way: The permissions of the created file are<br>
	 *                      (mode & ~umask)<br>
	 * @return              A sftp file handle, NULL on error with ssh and sftp<br>
	 *                      error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_file sftp_open(sftp_session, const char*, int, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:309</i>
	 */
	sftp_file_struct sftp_open(sftp_session_struct session, String file, int accesstype, int mode);
	/**
	 * @brief Make the sftp communication for this file handle non blocking.<br>
	 * @param[in]  handle   The file handle to set non blocking.<br>
	 * Original signature : <code>void sftp_file_set_nonblocking(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:315</i>
	 */
	void sftp_file_set_nonblocking(sftp_file_struct handle);
	/**
	 * @brief Make the sftp communication for this file handle blocking.<br>
	 * @param[in]  handle   The file handle to set blocking.<br>
	 * Original signature : <code>void sftp_file_set_blocking(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:321</i>
	 */
	void sftp_file_set_blocking(sftp_file_struct handle);
	/**
	 * @brief Read from a file using an opened sftp file handle.<br>
	 * @param file          The opened sftp file handle to be read from.<br>
	 * @param buf           Pointer to buffer to recieve read data.<br>
	 * @param count         Size of the buffer in bytes.<br>
	 * @return              Number of bytes written, < 0 on error with ssh and sftp<br>
	 *                      error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>ssize_t sftp_read(sftp_file, void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:332</i>
	 */
	long sftp_read(sftp_file_struct file, Pointer buf, NativeSize count);
	/**
	 * @brief Start an asynchronous read from a file using an opened sftp file handle.<br>
	 * Its goal is to avoid the slowdowns related to the request/response pattern<br>
	 * of a synchronous read. To do so, you must call 2 functions:<br>
	 * sftp_async_read_begin() and sftp_async_read().<br>
	 * The first step is to call sftp_async_read_begin(). This function returns a<br>
	 * request identifier. The second step is to call sftp_async_read() using the<br>
	 * returned identifier.<br>
	 * @param file          The opened sftp file handle to be read from.<br>
	 * @param len           Size to read in bytes.<br>
	 * @return              An identifier corresponding to the sent request, < 0 on<br>
	 *                      error.<br>
	 * @warning             When calling this function, the internal offset is<br>
	 *                      updated corresponding to the len parameter.<br>
	 * @warning             A call to sftp_async_read_begin() sends a request to<br>
	 *                      the server. When the server answers, libssh allocates<br>
	 *                      memory to store it until sftp_async_read() is called.<br>
	 *                      Not calling sftp_async_read() will lead to memory<br>
	 *                      leaks.<br>
	 * @see                 sftp_async_read()<br>
	 * @see                 sftp_open()<br>
	 * Original signature : <code>int sftp_async_read_begin(sftp_file, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:356</i>
	 */
	int sftp_async_read_begin(sftp_file_struct file, int len);
	/**
	 * @brief Wait for an asynchronous read to complete and save the data.<br>
	 * @param file          The opened sftp file handle to be read from.<br>
	 * @param data          Pointer to buffer to recieve read data.<br>
	 * @param len           Size of the buffer in bytes. It should be bigger or<br>
	 *                      equal to the length parameter of the<br>
	 *                      sftp_async_read_begin() call.<br>
	 * @param id            The identifier returned by the sftp_async_read_begin()<br>
	 *                      function.<br>
	 * @return              Number of bytes read, 0 on EOF, SSH_ERROR if an error<br>
	 *                      occured, SSH_AGAIN if the file is opened in nonblocking<br>
	 *                      mode and the request hasn't been executed yet.<br>
	 * @warning             A call to this function with an invalid identifier<br>
	 *                      will never return.<br>
	 * @see sftp_async_read_begin()<br>
	 * Original signature : <code>int sftp_async_read(sftp_file, void*, uint32_t, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:374</i>
	 */
	int sftp_async_read(sftp_file_struct file, Pointer data, int len, int id);
	/**
	 * @brief Write to a file using an opened sftp file handle.<br>
	 * @param file          Open sftp file handle to write to.<br>
	 * @param buf           Pointer to buffer to write data.<br>
	 * @param count         Size of buffer in bytes.<br>
	 * @return              Number of bytes written, < 0 on error with ssh and sftp<br>
	 *                      error set.<br>
	 * @see                 sftp_open()<br>
	 * @see                 sftp_read()<br>
	 * @see                 sftp_close()<br>
	 * Original signature : <code>ssize_t sftp_write(sftp_file, const void*, size_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:387</i>
	 */
	long sftp_write(sftp_file_struct file, Pointer buf, NativeSize count);
	/**
	 * @brief Seek to a specific location in a file.<br>
	 * @param file         Open sftp file handle to seek in.<br>
	 * @param new_offset   Offset in bytes to seek.<br>
	 * @return             0 on success, < 0 on error.<br>
	 * Original signature : <code>int sftp_seek(sftp_file, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:395</i>
	 */
	int sftp_seek(sftp_file_struct file, int new_offset);
	/**
	 * @brief Seek to a specific location in a file. This is the<br>
	 * 64bit version.<br>
	 * @param file         Open sftp file handle to seek in.<br>
	 * @param new_offset   Offset in bytes to seek.<br>
	 * @return             0 on success, < 0 on error.<br>
	 * Original signature : <code>int sftp_seek64(sftp_file, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:404</i>
	 */
	int sftp_seek64(sftp_file_struct file, long new_offset);
	/**
	 * @brief Report current byte position in file.<br>
	 * @param file          Open sftp file handle.<br>
	 * @return              The offset of the current byte relative to the beginning<br>
	 *                      of the file associated with the file descriptor. < 0 on<br>
	 *                      error.<br>
	 * Original signature : <code>long sftp_tell(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:413</i>
	 */
	NativeLong sftp_tell(sftp_file_struct file);
	/**
	 * @brief Report current byte position in file.<br>
	 * @param file          Open sftp file handle.<br>
	 * @return              The offset of the current byte relative to the beginning<br>
	 *                      of the file associated with the file descriptor. < 0 on<br>
	 *                      error.<br>
	 * Original signature : <code>uint64_t sftp_tell64(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:422</i>
	 */
	long sftp_tell64(sftp_file_struct file);
	/**
	 * @brief Rewinds the position of the file pointer to the beginning of the<br>
	 * file.<br>
	 * @param file          Open sftp file handle.<br>
	 * Original signature : <code>void sftp_rewind(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:429</i>
	 */
	void sftp_rewind(sftp_file_struct file);
	/**
	 * @brief Unlink (delete) a file.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file to unlink/delete.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_unlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:438</i><br>
	 * @deprecated use the safer methods {@link #sftp_unlink(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_unlink(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_unlink(sftp_session_struct sftp, Pointer file);
	/**
	 * @brief Unlink (delete) a file.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file to unlink/delete.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_unlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:438</i>
	 */
	int sftp_unlink(sftp_session_struct sftp, String file);
	/**
	 * @brief Remove a directoy.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param directory     The directory to remove.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_rmdir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:447</i><br>
	 * @deprecated use the safer methods {@link #sftp_rmdir(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_rmdir(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_rmdir(sftp_session_struct sftp, Pointer directory);
	/**
	 * @brief Remove a directoy.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param directory     The directory to remove.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_rmdir(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:447</i>
	 */
	int sftp_rmdir(sftp_session_struct sftp, String directory);
	/**
	 * @brief Create a directory.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param directory     The directory to create.<br>
	 * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_mkdir(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:459</i><br>
	 * @deprecated use the safer methods {@link #sftp_mkdir(ssh.sftp_session_struct, java.lang.String, int)} and {@link #sftp_mkdir(ssh.sftp_session_struct, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int sftp_mkdir(sftp_session_struct sftp, Pointer directory, int mode);
	/**
	 * @brief Create a directory.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param directory     The directory to create.<br>
	 * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_mkdir(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:459</i>
	 */
	int sftp_mkdir(sftp_session_struct sftp, String directory, int mode);
	/**
	 * @brief Rename or move a file or directory.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param original      The original url (source url) of file or directory to<br>
	 *                      be moved.<br>
	 * @param newname       The new url (destination url) of the file or directory<br>
	 *                      after the move.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_rename(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:471</i><br>
	 * @deprecated use the safer methods {@link #sftp_rename(ssh.sftp_session_struct, java.lang.String, java.lang.String)} and {@link #sftp_rename(ssh.sftp_session_struct, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_rename(sftp_session_struct sftp, Pointer original, Pointer newname);
	/**
	 * @brief Rename or move a file or directory.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param original      The original url (source url) of file or directory to<br>
	 *                      be moved.<br>
	 * @param newname       The new url (destination url) of the file or directory<br>
	 *                      after the move.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_rename(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:471</i>
	 */
	int sftp_rename(sftp_session_struct sftp, String original, String newname);
	/**
	 * @brief Set file attributes on a file, directory or symbolic link.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which attributes should be changed.<br>
	 * @param attr          The file attributes structure with the attributes set<br>
	 *                      which should be changed.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_setstat(sftp_session, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:482</i><br>
	 * @deprecated use the safer methods {@link #sftp_setstat(ssh.sftp_session_struct, java.lang.String, ssh.sftp_attributes_struct)} and {@link #sftp_setstat(ssh.sftp_session_struct, com.sun.jna.Pointer, ssh.sftp_attributes_struct)} instead
	 */
	@Deprecated 
	int sftp_setstat(sftp_session_struct sftp, Pointer file, sftp_attributes_struct attr);
	/**
	 * @brief Set file attributes on a file, directory or symbolic link.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which attributes should be changed.<br>
	 * @param attr          The file attributes structure with the attributes set<br>
	 *                      which should be changed.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_setstat(sftp_session, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:482</i>
	 */
	int sftp_setstat(sftp_session_struct sftp, String file, sftp_attributes_struct attr);
	/**
	 * @brief Change the file owner and group<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which owner and group should be changed.<br>
	 * @param owner         The new owner which should be set.<br>
	 * @param group         The new group which should be set.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_chown(sftp_session, const char*, uid_t, gid_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:493</i><br>
	 * @deprecated use the safer methods {@link #sftp_chown(ssh.sftp_session_struct, java.lang.String, int, int)} and {@link #sftp_chown(ssh.sftp_session_struct, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int sftp_chown(sftp_session_struct sftp, Pointer file, int owner, int group);
	/**
	 * @brief Change the file owner and group<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which owner and group should be changed.<br>
	 * @param owner         The new owner which should be set.<br>
	 * @param group         The new group which should be set.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_chown(sftp_session, const char*, uid_t, gid_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:493</i>
	 */
	int sftp_chown(sftp_session_struct sftp, String file, int owner, int group);
	/**
	 * @brief Change permissions of a file<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which owner and group should be changed.<br>
	 * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_chmod(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:505</i><br>
	 * @deprecated use the safer methods {@link #sftp_chmod(ssh.sftp_session_struct, java.lang.String, int)} and {@link #sftp_chmod(ssh.sftp_session_struct, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int sftp_chmod(sftp_session_struct sftp, Pointer file, int mode);
	/**
	 * @brief Change permissions of a file<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which owner and group should be changed.<br>
	 * @param mode          Specifies the permissions to use. It is modified by the<br>
	 *                      process's umask in the usual way:<br>
	 *                      The permissions of the created file are (mode & ~umask)<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_chmod(sftp_session, const char*, mode_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:505</i>
	 */
	int sftp_chmod(sftp_session_struct sftp, String file, int mode);
	/**
	 * @brief Change the last modification and access time of a file.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which owner and group should be changed.<br>
	 * @param times         A timeval structure which contains the desired access<br>
	 *                      and modification time.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_utimes(sftp_session, const char*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:516</i><br>
	 * @deprecated use the safer methods {@link #sftp_utimes(ssh.sftp_session_struct, java.lang.String, ssh.SshLibrary.timeval)} and {@link #sftp_utimes(ssh.sftp_session_struct, com.sun.jna.Pointer, ssh.SshLibrary.timeval)} instead
	 */
	@Deprecated 
	int sftp_utimes(sftp_session_struct sftp, Pointer file, SshLibrary.timeval times);
	/**
	 * @brief Change the last modification and access time of a file.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param file          The file which owner and group should be changed.<br>
	 * @param times         A timeval structure which contains the desired access<br>
	 *                      and modification time.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_utimes(sftp_session, const char*, timeval*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:516</i>
	 */
	int sftp_utimes(sftp_session_struct sftp, String file, SshLibrary.timeval times);
	/**
	 * @brief Create a symbolic link.<br>
	 * @param  sftp         The sftp session handle.<br>
	 * @param  target       Specifies the target of the symlink.<br>
	 * @param  dest         Specifies the path name of the symlink to be created.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_symlink(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:526</i><br>
	 * @deprecated use the safer methods {@link #sftp_symlink(ssh.sftp_session_struct, java.lang.String, java.lang.String)} and {@link #sftp_symlink(ssh.sftp_session_struct, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_symlink(sftp_session_struct sftp, Pointer target, Pointer dest);
	/**
	 * @brief Create a symbolic link.<br>
	 * @param  sftp         The sftp session handle.<br>
	 * @param  target       Specifies the target of the symlink.<br>
	 * @param  dest         Specifies the path name of the symlink to be created.<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>int sftp_symlink(sftp_session, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:526</i>
	 */
	int sftp_symlink(sftp_session_struct sftp, String target, String dest);
	/**
	 * @brief Read the value of a symbolic link.<br>
	 * @param  sftp         The sftp session handle.<br>
	 * @param  path         Specifies the path name of the symlink to be read.<br>
	 * @return              The target of the link, NULL on error.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>char* sftp_readlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:535</i><br>
	 * @deprecated use the safer methods {@link #sftp_readlink(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_readlink(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer sftp_readlink(sftp_session_struct sftp, Pointer path);
	/**
	 * @brief Read the value of a symbolic link.<br>
	 * @param  sftp         The sftp session handle.<br>
	 * @param  path         Specifies the path name of the symlink to be read.<br>
	 * @return              The target of the link, NULL on error.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>char* sftp_readlink(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:535</i>
	 */
	Pointer sftp_readlink(sftp_session_struct sftp, String path);
	/**
	 * @brief Get information about a mounted file system.<br>
	 * @param  sftp         The sftp session handle.<br>
	 * @param  path         The pathname of any file within the mounted file system.<br>
	 * @return A statvfs structure or NULL on error.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_statvfs_t sftp_statvfs(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:544</i><br>
	 * @deprecated use the safer methods {@link #sftp_statvfs(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_statvfs(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	sftp_statvfs_struct sftp_statvfs(sftp_session_struct sftp, Pointer path);
	/**
	 * @brief Get information about a mounted file system.<br>
	 * @param  sftp         The sftp session handle.<br>
	 * @param  path         The pathname of any file within the mounted file system.<br>
	 * @return A statvfs structure or NULL on error.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_statvfs_t sftp_statvfs(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:544</i>
	 */
	sftp_statvfs_struct sftp_statvfs(sftp_session_struct sftp, String path);
	/**
	 * @brief Get information about a mounted file system.<br>
	 * @param  file         An opened file.<br>
	 * @return A statvfs structure or NULL on error.<br>
	 * @see sftp_get_error()<br>
	 * Original signature : <code>sftp_statvfs_t sftp_fstatvfs(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:552</i>
	 */
	sftp_statvfs_struct sftp_fstatvfs(sftp_file_struct file);
	/**
	 * @brief Free the memory of an allocated statvfs.<br>
	 * @param  statvfs_o      The statvfs to free.<br>
	 * Original signature : <code>void sftp_statvfs_free(sftp_statvfs_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:558</i>
	 */
	void sftp_statvfs_free(sftp_statvfs_struct statvfs_o);
	/**
	 * @brief Synchronize a file's in-core state with storage device<br>
	 * This calls the "fsync@openssh.com" extention. You should check if the<br>
	 * extensions is supported using:<br>
	 * @code<br>
	 * int supported = sftp_extension_supported(sftp, "fsync@openssh.com", "1");<br>
	 * @endcode<br>
	 * @param file          The opened sftp file handle to sync<br>
	 * @return              0 on success, < 0 on error with ssh and sftp error set.<br>
	 * Original signature : <code>int sftp_fsync(sftp_file)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:570</i>
	 */
	int sftp_fsync(sftp_file_struct file);
	/**
	 * @brief Canonicalize a sftp path.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param path          The path to be canonicalized.<br>
	 * @return              The canonicalize path, NULL on error.<br>
	 * Original signature : <code>char* sftp_canonicalize_path(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:578</i><br>
	 * @deprecated use the safer methods {@link #sftp_canonicalize_path(ssh.sftp_session_struct, java.lang.String)} and {@link #sftp_canonicalize_path(ssh.sftp_session_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer sftp_canonicalize_path(sftp_session_struct sftp, Pointer path);
	/**
	 * @brief Canonicalize a sftp path.<br>
	 * @param sftp          The sftp session handle.<br>
	 * @param path          The path to be canonicalized.<br>
	 * @return              The canonicalize path, NULL on error.<br>
	 * Original signature : <code>char* sftp_canonicalize_path(sftp_session, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:578</i>
	 */
	Pointer sftp_canonicalize_path(sftp_session_struct sftp, String path);
	/**
	 * @brief Get the version of the SFTP protocol supported by the server<br>
	 * @param sftp          The sftp session handle.<br>
	 * @return              The server version.<br>
	 * Original signature : <code>int sftp_server_version(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:585</i>
	 */
	int sftp_server_version(sftp_session_struct sftp);
	/**
	 * this is not a public interface<br>
	 * Original signature : <code>sftp_packet sftp_packet_read(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:590</i>
	 */
	sftp_packet_struct sftp_packet_read(sftp_session_struct sftp);
	/**
	 * Original signature : <code>int sftp_packet_write(sftp_session, uint8_t, ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:592</i><br>
	 * @deprecated use the safer methods {@link #sftp_packet_write(ssh.sftp_session_struct, byte, ssh.SshLibrary.ssh_buffer)} and {@link #sftp_packet_write(ssh.sftp_session_struct, byte, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_packet_write(sftp_session_struct sftp, byte type, Pointer payload);
	/**
	 * Original signature : <code>int sftp_packet_write(sftp_session, uint8_t, ssh_buffer)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:592</i>
	 */
	int sftp_packet_write(sftp_session_struct sftp, byte type, SshLibrary.ssh_buffer payload);
	/**
	 * Original signature : <code>void sftp_packet_free(sftp_packet)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:594</i>
	 */
	void sftp_packet_free(sftp_packet_struct packet);
	/**
	 * Original signature : <code>int buffer_add_attributes(ssh_buffer, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:596</i><br>
	 * @deprecated use the safer methods {@link #buffer_add_attributes(ssh.SshLibrary.ssh_buffer, ssh.sftp_attributes_struct)} and {@link #buffer_add_attributes(com.sun.jna.Pointer, ssh.sftp_attributes_struct)} instead
	 */
	@Deprecated 
	int buffer_add_attributes(Pointer buffer, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int buffer_add_attributes(ssh_buffer, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:596</i>
	 */
	int buffer_add_attributes(SshLibrary.ssh_buffer buffer, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>sftp_attributes sftp_parse_attr(sftp_session, ssh_buffer, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:598</i><br>
	 * @deprecated use the safer methods {@link #sftp_parse_attr(ssh.sftp_session_struct, ssh.SshLibrary.ssh_buffer, int)} and {@link #sftp_parse_attr(ssh.sftp_session_struct, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	sftp_attributes_struct sftp_parse_attr(sftp_session_struct session, Pointer buf, int expectname);
	/**
	 * Original signature : <code>sftp_attributes sftp_parse_attr(sftp_session, ssh_buffer, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:598</i>
	 */
	sftp_attributes_struct sftp_parse_attr(sftp_session_struct session, SshLibrary.ssh_buffer buf, int expectname);
	/**
	 * sftpserver.c<br>
	 * Original signature : <code>sftp_client_message sftp_get_client_message(sftp_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:603</i>
	 */
	sftp_client_message_struct sftp_get_client_message(sftp_session_struct sftp);
	/**
	 * Original signature : <code>void sftp_client_message_free(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:605</i>
	 */
	void sftp_client_message_free(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>uint8_t sftp_client_message_get_type(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:607</i>
	 */
	byte sftp_client_message_get_type(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>char* sftp_client_message_get_filename(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:609</i>
	 */
	String sftp_client_message_get_filename(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>void sftp_client_message_set_filename(sftp_client_message, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:611</i><br>
	 * @deprecated use the safer methods {@link #sftp_client_message_set_filename(ssh.sftp_client_message_struct, java.lang.String)} and {@link #sftp_client_message_set_filename(ssh.sftp_client_message_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void sftp_client_message_set_filename(sftp_client_message_struct msg, Pointer newname);
	/**
	 * Original signature : <code>void sftp_client_message_set_filename(sftp_client_message, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:611</i>
	 */
	void sftp_client_message_set_filename(sftp_client_message_struct msg, String newname);
	/**
	 * Original signature : <code>char* sftp_client_message_get_data(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:613</i>
	 */
	String sftp_client_message_get_data(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>uint32_t sftp_client_message_get_flags(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:615</i>
	 */
	int sftp_client_message_get_flags(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>int sftp_send_client_message(sftp_session, sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:617</i>
	 */
	int sftp_send_client_message(sftp_session_struct sftp, sftp_client_message_struct msg);
	/**
	 * Original signature : <code>int sftp_reply_name(sftp_client_message, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:619</i><br>
	 * @deprecated use the safer methods {@link #sftp_reply_name(ssh.sftp_client_message_struct, java.lang.String, ssh.sftp_attributes_struct)} and {@link #sftp_reply_name(ssh.sftp_client_message_struct, com.sun.jna.Pointer, ssh.sftp_attributes_struct)} instead
	 */
	@Deprecated 
	int sftp_reply_name(sftp_client_message_struct msg, Pointer name, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_name(sftp_client_message, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:619</i>
	 */
	int sftp_reply_name(sftp_client_message_struct msg, String name, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_handle(sftp_client_message, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:621</i>
	 */
	int sftp_reply_handle(sftp_client_message_struct msg, SshLibrary.ssh_string handle);
	/**
	 * Original signature : <code>ssh_string sftp_handle_alloc(sftp_session, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:623</i>
	 */
	SshLibrary.ssh_string sftp_handle_alloc(sftp_session_struct sftp, Pointer info);
	/**
	 * Original signature : <code>int sftp_reply_attr(sftp_client_message, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:625</i>
	 */
	int sftp_reply_attr(sftp_client_message_struct msg, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>void* sftp_handle(sftp_session, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:627</i>
	 */
	Pointer sftp_handle(sftp_session_struct sftp, SshLibrary.ssh_string handle);
	/**
	 * Original signature : <code>int sftp_reply_status(sftp_client_message, uint32_t, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:629</i><br>
	 * @deprecated use the safer methods {@link #sftp_reply_status(ssh.sftp_client_message_struct, int, java.lang.String)} and {@link #sftp_reply_status(ssh.sftp_client_message_struct, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int sftp_reply_status(sftp_client_message_struct msg, int status, Pointer message);
	/**
	 * Original signature : <code>int sftp_reply_status(sftp_client_message, uint32_t, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:629</i>
	 */
	int sftp_reply_status(sftp_client_message_struct msg, int status, String message);
	/**
	 * Original signature : <code>int sftp_reply_names_add(sftp_client_message, const char*, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:631</i><br>
	 * @deprecated use the safer methods {@link #sftp_reply_names_add(ssh.sftp_client_message_struct, java.lang.String, java.lang.String, ssh.sftp_attributes_struct)} and {@link #sftp_reply_names_add(ssh.sftp_client_message_struct, com.sun.jna.Pointer, com.sun.jna.Pointer, ssh.sftp_attributes_struct)} instead
	 */
	@Deprecated 
	int sftp_reply_names_add(sftp_client_message_struct msg, Pointer file, Pointer longname, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_names_add(sftp_client_message, const char*, const char*, sftp_attributes)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:631</i>
	 */
	int sftp_reply_names_add(sftp_client_message_struct msg, String file, String longname, sftp_attributes_struct attr);
	/**
	 * Original signature : <code>int sftp_reply_names(sftp_client_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:633</i>
	 */
	int sftp_reply_names(sftp_client_message_struct msg);
	/**
	 * Original signature : <code>int sftp_reply_data(sftp_client_message, const void*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:635</i>
	 */
	int sftp_reply_data(sftp_client_message_struct msg, Pointer data, int len);
	/**
	 * Original signature : <code>void sftp_handle_remove(sftp_session, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/sftp.h:637</i>
	 */
	void sftp_handle_remove(sftp_session_struct sftp, Pointer handle);
	/**
	 * @brief Set the session server callback functions.<br>
	 * This functions sets the callback structure to use your own callback<br>
	 * functions for user authentication, new channels and requests.<br>
	 * @code<br>
	 * struct ssh_server_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .auth_password_function = my_auth_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_server_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * @param  session      The session to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_set_server_callbacks(ssh_session, ssh_server_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:224</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_server_callbacks(ssh.SshLibrary.ssh_session, ssh.ssh_server_callbacks_struct)} and {@link #ssh_set_server_callbacks(com.sun.jna.Pointer, ssh.ssh_server_callbacks_struct)} instead
	 */
	@Deprecated 
	int ssh_set_server_callbacks(Pointer session, ssh_server_callbacks_struct cb);
	/**
	 * @brief Set the session server callback functions.<br>
	 * This functions sets the callback structure to use your own callback<br>
	 * functions for user authentication, new channels and requests.<br>
	 * @code<br>
	 * struct ssh_server_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .auth_password_function = my_auth_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_server_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * @param  session      The session to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_set_server_callbacks(ssh_session, ssh_server_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:224</i>
	 */
	int ssh_set_server_callbacks(SshLibrary.ssh_session session, ssh_server_callbacks_struct cb);
	/**
	 * @brief Set the session callback functions.<br>
	 * This functions sets the callback structure to use your own callback<br>
	 * functions for auth, logging and status.<br>
	 * @code<br>
	 * struct ssh_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .auth_function = my_auth_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * @param  session      The session to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_set_callbacks(ssh_session, ssh_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:280</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_callbacks(ssh.SshLibrary.ssh_session, ssh.ssh_callbacks_struct)} and {@link #ssh_set_callbacks(com.sun.jna.Pointer, ssh.ssh_callbacks_struct)} instead
	 */
	@Deprecated 
	int ssh_set_callbacks(Pointer session, ssh_callbacks_struct cb);
	/**
	 * @brief Set the session callback functions.<br>
	 * This functions sets the callback structure to use your own callback<br>
	 * functions for auth, logging and status.<br>
	 * @code<br>
	 * struct ssh_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .auth_function = my_auth_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * @param  session      The session to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_set_callbacks(ssh_session, ssh_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:280</i>
	 */
	int ssh_set_callbacks(SshLibrary.ssh_session session, ssh_callbacks_struct cb);
	/**
	 * @brief Set the channel callback functions.<br>
	 * This functions sets the callback structure to use your own callback<br>
	 * functions for channel data and exceptions<br>
	 * @code<br>
	 * struct ssh_channel_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .channel_data = my_channel_data_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_channel_callbacks(channel, &cb);<br>
	 * @endcode<br>
	 * @param  channel      The channel to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * @warning this function will not replace existing callbacks but set the<br>
	 *          new one atop of them.<br>
	 * Original signature : <code>int ssh_set_channel_callbacks(ssh_channel, ssh_channel_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:460</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_channel_callbacks(ssh.SshLibrary.ssh_channel, ssh.ssh_channel_callbacks_struct)} and {@link #ssh_set_channel_callbacks(com.sun.jna.Pointer, ssh.ssh_channel_callbacks_struct)} instead
	 */
	@Deprecated 
	int ssh_set_channel_callbacks(Pointer channel, ssh_channel_callbacks_struct cb);
	/**
	 * @brief Set the channel callback functions.<br>
	 * This functions sets the callback structure to use your own callback<br>
	 * functions for channel data and exceptions<br>
	 * @code<br>
	 * struct ssh_channel_callbacks_struct cb = {<br>
	 *   .userdata = data,<br>
	 *   .channel_data = my_channel_data_function<br>
	 * };<br>
	 * ssh_callbacks_init(&cb);<br>
	 * ssh_set_channel_callbacks(channel, &cb);<br>
	 * @endcode<br>
	 * @param  channel      The channel to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * @warning this function will not replace existing callbacks but set the<br>
	 *          new one atop of them.<br>
	 * Original signature : <code>int ssh_set_channel_callbacks(ssh_channel, ssh_channel_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:460</i>
	 */
	int ssh_set_channel_callbacks(SshLibrary.ssh_channel channel, ssh_channel_callbacks_struct cb);
	/**
	 * @brief Add channel callback functions<br>
	 * This function will add channel callback functions to the channel callback<br>
	 * list.<br>
	 * Callbacks missing from a callback structure will be probed in the next<br>
	 * on the list.<br>
	 * @param  channel      The channel to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * @see ssh_set_channel_callbacks<br>
	 * Original signature : <code>int ssh_add_channel_callbacks(ssh_channel, ssh_channel_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:473</i><br>
	 * @deprecated use the safer methods {@link #ssh_add_channel_callbacks(ssh.SshLibrary.ssh_channel, ssh.ssh_channel_callbacks_struct)} and {@link #ssh_add_channel_callbacks(com.sun.jna.Pointer, ssh.ssh_channel_callbacks_struct)} instead
	 */
	@Deprecated 
	int ssh_add_channel_callbacks(Pointer channel, ssh_channel_callbacks_struct cb);
	/**
	 * @brief Add channel callback functions<br>
	 * This function will add channel callback functions to the channel callback<br>
	 * list.<br>
	 * Callbacks missing from a callback structure will be probed in the next<br>
	 * on the list.<br>
	 * @param  channel      The channel to set the callback structure.<br>
	 * @param  cb           The callback structure itself.<br>
	 * @return SSH_OK on success, SSH_ERROR on error.<br>
	 * @see ssh_set_channel_callbacks<br>
	 * Original signature : <code>int ssh_add_channel_callbacks(ssh_channel, ssh_channel_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:473</i>
	 */
	int ssh_add_channel_callbacks(SshLibrary.ssh_channel channel, ssh_channel_callbacks_struct cb);
	/**
	 * @brief Remove a channel callback.<br>
	 * The channel has been added with ssh_add_channel_callbacks or<br>
	 * ssh_set_channel_callbacks in this case.<br>
	 * @param channel  The channel to remove the callback structure from.<br>
	 * @param cb       The callback structure to remove<br>
	 * @returns SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_remove_channel_callbacks(ssh_channel, ssh_channel_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:483</i><br>
	 * @deprecated use the safer methods {@link #ssh_remove_channel_callbacks(ssh.SshLibrary.ssh_channel, ssh.ssh_channel_callbacks_struct)} and {@link #ssh_remove_channel_callbacks(com.sun.jna.Pointer, ssh.ssh_channel_callbacks_struct)} instead
	 */
	@Deprecated 
	int ssh_remove_channel_callbacks(Pointer channel, ssh_channel_callbacks_struct cb);
	/**
	 * @brief Remove a channel callback.<br>
	 * The channel has been added with ssh_add_channel_callbacks or<br>
	 * ssh_set_channel_callbacks in this case.<br>
	 * @param channel  The channel to remove the callback structure from.<br>
	 * @param cb       The callback structure to remove<br>
	 * @returns SSH_OK on success, SSH_ERROR on error.<br>
	 * Original signature : <code>int ssh_remove_channel_callbacks(ssh_channel, ssh_channel_callbacks)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:483</i>
	 */
	int ssh_remove_channel_callbacks(SshLibrary.ssh_channel channel, ssh_channel_callbacks_struct cb);
	/**
	 * @brief Set the thread callbacks structure.<br>
	 * This is necessary if your program is using libssh in a multithreaded fashion.<br>
	 * This function must be called first, outside of any threading context (in your<br>
	 * main() function for instance), before you call ssh_init().<br>
	 * @param[in] cb   A pointer to a ssh_threads_callbacks_struct structure, which<br>
	 *                 contains the different callbacks to be set.<br>
	 * @returns        Always returns SSH_OK.<br>
	 * @see ssh_threads_callbacks_struct<br>
	 * @see SSH_THREADS_PTHREAD<br>
	 * @bug libgcrypt 1.6 and bigger backend does not support custom callback.<br>
	 *      Using anything else than pthreads here will fail.<br>
	 * Original signature : <code>int ssh_threads_set_callbacks(ssh_threads_callbacks_struct*)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:512</i>
	 */
	int ssh_threads_set_callbacks(ssh_threads_callbacks_struct cb);
	/**
	 * @brief returns a pointer on the pthread threads callbacks, to be used with<br>
	 * ssh_threads_set_callbacks.<br>
	 * @warning you have to link with the library ssh_threads.<br>
	 * @see ssh_threads_set_callbacks<br>
	 * Original signature : <code>ssh_threads_callbacks_struct* ssh_threads_get_pthread()</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:520</i>
	 */
	ssh_threads_callbacks_struct ssh_threads_get_pthread();
	/**
	 * @brief Get the noop threads callbacks structure<br>
	 * This can be used with ssh_threads_set_callbacks. These callbacks do nothing<br>
	 * and are being used by default.<br>
	 * @return Always returns a valid pointer to the noop callbacks structure.<br>
	 * @see ssh_threads_set_callbacks<br>
	 * Original signature : <code>ssh_threads_callbacks_struct* ssh_threads_get_noop()</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:529</i>
	 */
	ssh_threads_callbacks_struct ssh_threads_get_noop();
	/**
	 * @brief Set the logging callback function.<br>
	 * @param[in]  cb  The callback to set.<br>
	 * @return         0 on success, < 0 on errror.<br>
	 * Original signature : <code>int ssh_set_log_callback(ssh_logging_callback)</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:536</i>
	 */
	int ssh_set_log_callback(SshLibrary.ssh_logging_callback cb);
	/**
	 * @brief Get the pointer to the logging callback function.<br>
	 * @return The pointer the the callback or NULL if none set.<br>
	 * Original signature : <code>ssh_logging_callback ssh_get_log_callback()</code><br>
	 * <i>native declaration : /usr/include/libssh/callbacks.h:542</i>
	 */
	SshLibrary.ssh_logging_callback ssh_get_log_callback();
	/**
	 * @brief Creates a new SSH server bind.<br>
	 * @return A newly allocated ssh_bind session pointer.<br>
	 * Original signature : <code>ssh_bind ssh_bind_new()</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:36</i>
	 */
	SshLibrary.ssh_bind ssh_bind_new();
	/**
	 * Original signature : <code>int ssh_bind_options_set(ssh_bind, ssh_bind_options_e, const void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:38</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_options_set(ssh.SshLibrary.ssh_bind, int, com.sun.jna.Pointer)} and {@link #ssh_bind_options_set(com.sun.jna.Pointer, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_bind_options_set(Pointer sshbind, int type, Pointer value);
	/**
	 * Original signature : <code>int ssh_bind_options_set(ssh_bind, ssh_bind_options_e, const void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:38</i>
	 */
	int ssh_bind_options_set(SshLibrary.ssh_bind sshbind, int type, Pointer value);
	/**
	 * @brief Start listening to the socket.<br>
	 * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * @return 0 on success, < 0 on error.<br>
	 * Original signature : <code>int ssh_bind_listen(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:45</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_listen(ssh.SshLibrary.ssh_bind)} and {@link #ssh_bind_listen(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_bind_listen(Pointer ssh_bind_o);
	/**
	 * @brief Start listening to the socket.<br>
	 * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * @return 0 on success, < 0 on error.<br>
	 * Original signature : <code>int ssh_bind_listen(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:45</i>
	 */
	int ssh_bind_listen(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * @brief Set the callback for this bind.<br>
	 * @param[in] sshbind   The bind to set the callback on.<br>
	 * @param[in] callbacks An already set up ssh_bind_callbacks instance.<br>
	 * @param[in] userdata  A pointer to private data to pass to the callbacks.<br>
	 * @return              SSH_OK on success, SSH_ERROR if an error occured.<br>
	 * @code<br>
	 *     struct ssh_callbacks_struct cb = {<br>
	 *         .userdata = data,<br>
	 *         .auth_function = my_auth_function<br>
	 *     };<br>
	 *     ssh_callbacks_init(&cb);<br>
	 *     ssh_bind_set_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * Original signature : <code>int ssh_bind_set_callbacks(ssh_bind, ssh_bind_callbacks, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:62</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_set_callbacks(ssh.SshLibrary.ssh_bind, ssh.ssh_bind_callbacks_struct, com.sun.jna.Pointer)} and {@link #ssh_bind_set_callbacks(com.sun.jna.Pointer, ssh.ssh_bind_callbacks_struct, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_bind_set_callbacks(Pointer sshbind, ssh_bind_callbacks_struct callbacks, Pointer userdata);
	/**
	 * @brief Set the callback for this bind.<br>
	 * @param[in] sshbind   The bind to set the callback on.<br>
	 * @param[in] callbacks An already set up ssh_bind_callbacks instance.<br>
	 * @param[in] userdata  A pointer to private data to pass to the callbacks.<br>
	 * @return              SSH_OK on success, SSH_ERROR if an error occured.<br>
	 * @code<br>
	 *     struct ssh_callbacks_struct cb = {<br>
	 *         .userdata = data,<br>
	 *         .auth_function = my_auth_function<br>
	 *     };<br>
	 *     ssh_callbacks_init(&cb);<br>
	 *     ssh_bind_set_callbacks(session, &cb);<br>
	 * @endcode<br>
	 * Original signature : <code>int ssh_bind_set_callbacks(ssh_bind, ssh_bind_callbacks, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:62</i>
	 */
	int ssh_bind_set_callbacks(SshLibrary.ssh_bind sshbind, ssh_bind_callbacks_struct callbacks, Pointer userdata);
	/**
	 * @brief  Set the session to blocking/nonblocking mode.<br>
	 * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * @param  blocking     Zero for nonblocking mode.<br>
	 * Original signature : <code>void ssh_bind_set_blocking(ssh_bind, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:69</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_set_blocking(ssh.SshLibrary.ssh_bind, int)} and {@link #ssh_bind_set_blocking(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void ssh_bind_set_blocking(Pointer ssh_bind_o, int blocking);
	/**
	 * @brief  Set the session to blocking/nonblocking mode.<br>
	 * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * @param  blocking     Zero for nonblocking mode.<br>
	 * Original signature : <code>void ssh_bind_set_blocking(ssh_bind, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:69</i>
	 */
	void ssh_bind_set_blocking(SshLibrary.ssh_bind ssh_bind_o, int blocking);
	/**
	 * @brief Recover the file descriptor from the session.<br>
	 * @param  ssh_bind_o     The ssh server bind to get the fd from.<br>
	 * @return The file descriptor.<br>
	 * Original signature : <code>socket_t ssh_bind_get_fd(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:76</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_get_fd(ssh.SshLibrary.ssh_bind)} and {@link #ssh_bind_get_fd(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.socket_t ssh_bind_get_fd(Pointer ssh_bind_o);
	/**
	 * @brief Recover the file descriptor from the session.<br>
	 * @param  ssh_bind_o     The ssh server bind to get the fd from.<br>
	 * @return The file descriptor.<br>
	 * Original signature : <code>socket_t ssh_bind_get_fd(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:76</i>
	 */
	SshLibrary.socket_t ssh_bind_get_fd(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * @brief Set the file descriptor for a session.<br>
	 * @param  ssh_bind_o     The ssh server bind to set the fd.<br>
	 * @param  fd           The file descriptssh_bind B<br>
	 * Original signature : <code>void ssh_bind_set_fd(ssh_bind, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:83</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_set_fd(ssh.SshLibrary.ssh_bind, ssh.SshLibrary.socket_t)} and {@link #ssh_bind_set_fd(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_bind_set_fd(Pointer ssh_bind_o, Pointer fd);
	/**
	 * @brief Set the file descriptor for a session.<br>
	 * @param  ssh_bind_o     The ssh server bind to set the fd.<br>
	 * @param  fd           The file descriptssh_bind B<br>
	 * Original signature : <code>void ssh_bind_set_fd(ssh_bind, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:83</i>
	 */
	void ssh_bind_set_fd(SshLibrary.ssh_bind ssh_bind_o, SshLibrary.socket_t fd);
	/**
	 * @brief Allow the file descriptor to accept new sessions.<br>
	 * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * Original signature : <code>void ssh_bind_fd_toaccept(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:89</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_fd_toaccept(ssh.SshLibrary.ssh_bind)} and {@link #ssh_bind_fd_toaccept(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_bind_fd_toaccept(Pointer ssh_bind_o);
	/**
	 * @brief Allow the file descriptor to accept new sessions.<br>
	 * @param  ssh_bind_o     The ssh server bind to use.<br>
	 * Original signature : <code>void ssh_bind_fd_toaccept(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:89</i>
	 */
	void ssh_bind_fd_toaccept(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * @brief Accept an incoming ssh connection and initialize the session.<br>
	 * @param  ssh_bind_o     The ssh server bind to accept a connection.<br>
	 * @param  session			A preallocated ssh session<br>
	 * @see ssh_new<br>
	 * @return SSH_OK when a connection is established<br>
	 * Original signature : <code>int ssh_bind_accept(ssh_bind, ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:98</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_accept(ssh.SshLibrary.ssh_bind, ssh.SshLibrary.ssh_session)} and {@link #ssh_bind_accept(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_bind_accept(Pointer ssh_bind_o, Pointer session);
	/**
	 * @brief Accept an incoming ssh connection and initialize the session.<br>
	 * @param  ssh_bind_o     The ssh server bind to accept a connection.<br>
	 * @param  session			A preallocated ssh session<br>
	 * @see ssh_new<br>
	 * @return SSH_OK when a connection is established<br>
	 * Original signature : <code>int ssh_bind_accept(ssh_bind, ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:98</i>
	 */
	int ssh_bind_accept(SshLibrary.ssh_bind ssh_bind_o, SshLibrary.ssh_session session);
	/**
	 * @brief Accept an incoming ssh connection on the given file descriptor<br>
	 *        and initialize the session.<br>
	 * @param  ssh_bind_o     The ssh server bind to accept a connection.<br>
	 * @param  session        A preallocated ssh session<br>
	 * @param  fd             A file descriptor of an already established TCP<br>
	 *                          inbound connection<br>
	 * @see ssh_new<br>
	 * @see ssh_bind_accept<br>
	 * @return SSH_OK when a connection is established<br>
	 * Original signature : <code>int ssh_bind_accept_fd(ssh_bind, ssh_session, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:111</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_accept_fd(ssh.SshLibrary.ssh_bind, ssh.SshLibrary.ssh_session, ssh.SshLibrary.socket_t)} and {@link #ssh_bind_accept_fd(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_bind_accept_fd(Pointer ssh_bind_o, Pointer session, Pointer fd);
	/**
	 * @brief Accept an incoming ssh connection on the given file descriptor<br>
	 *        and initialize the session.<br>
	 * @param  ssh_bind_o     The ssh server bind to accept a connection.<br>
	 * @param  session        A preallocated ssh session<br>
	 * @param  fd             A file descriptor of an already established TCP<br>
	 *                          inbound connection<br>
	 * @see ssh_new<br>
	 * @see ssh_bind_accept<br>
	 * @return SSH_OK when a connection is established<br>
	 * Original signature : <code>int ssh_bind_accept_fd(ssh_bind, ssh_session, socket_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:111</i>
	 */
	int ssh_bind_accept_fd(SshLibrary.ssh_bind ssh_bind_o, SshLibrary.ssh_session session, SshLibrary.socket_t fd);
	/**
	 * Original signature : <code>ssh_gssapi_creds ssh_gssapi_get_creds(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:113</i><br>
	 * @deprecated use the safer methods {@link #ssh_gssapi_get_creds(ssh.SshLibrary.ssh_session)} and {@link #ssh_gssapi_get_creds(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	Pointer ssh_gssapi_get_creds(Pointer session);
	/**
	 * Original signature : <code>ssh_gssapi_creds ssh_gssapi_get_creds(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:113</i>
	 */
	Pointer ssh_gssapi_get_creds(SshLibrary.ssh_session session);
	/**
	 * @brief Handles the key exchange and set up encryption<br>
	 * @param  session			A connected ssh session<br>
	 * @see ssh_bind_accept<br>
	 * @return SSH_OK if the key exchange was successful<br>
	 * Original signature : <code>int ssh_handle_key_exchange(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:121</i><br>
	 * @deprecated use the safer methods {@link #ssh_handle_key_exchange(ssh.SshLibrary.ssh_session)} and {@link #ssh_handle_key_exchange(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_handle_key_exchange(Pointer session);
	/**
	 * @brief Handles the key exchange and set up encryption<br>
	 * @param  session			A connected ssh session<br>
	 * @see ssh_bind_accept<br>
	 * @return SSH_OK if the key exchange was successful<br>
	 * Original signature : <code>int ssh_handle_key_exchange(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:121</i>
	 */
	int ssh_handle_key_exchange(SshLibrary.ssh_session session);
	/**
	 * @brief Free a ssh servers bind.<br>
	 * @param  ssh_bind_o     The ssh server bind to free.<br>
	 * Original signature : <code>void ssh_bind_free(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:127</i><br>
	 * @deprecated use the safer methods {@link #ssh_bind_free(ssh.SshLibrary.ssh_bind)} and {@link #ssh_bind_free(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_bind_free(Pointer ssh_bind_o);
	/**
	 * @brief Free a ssh servers bind.<br>
	 * @param  ssh_bind_o     The ssh server bind to free.<br>
	 * Original signature : <code>void ssh_bind_free(ssh_bind)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:127</i>
	 */
	void ssh_bind_free(SshLibrary.ssh_bind ssh_bind_o);
	/**
	 * @brief Set the acceptable authentication methods to be sent to the client.<br>
	 * *<br>
	 * @param[in]  session  The server session<br>
	 * @param[in]  auth_methods The authentication methods we will support, which<br>
	 *                          can be bitwise-or'd.<br>
	 *                          Supported methods are:<br>
	 *                          SSH_AUTH_METHOD_PASSWORD<br>
	 *                          SSH_AUTH_METHOD_PUBLICKEY<br>
	 *                          SSH_AUTH_METHOD_HOSTBASED<br>
	 *                          SSH_AUTH_METHOD_INTERACTIVE<br>
	 *                          SSH_AUTH_METHOD_GSSAPI_MIC<br>
	 * Original signature : <code>void ssh_set_auth_methods(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:142</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_auth_methods(ssh.SshLibrary.ssh_session, int)} and {@link #ssh_set_auth_methods(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void ssh_set_auth_methods(Pointer session, int auth_methods);
	/**
	 * @brief Set the acceptable authentication methods to be sent to the client.<br>
	 * *<br>
	 * @param[in]  session  The server session<br>
	 * @param[in]  auth_methods The authentication methods we will support, which<br>
	 *                          can be bitwise-or'd.<br>
	 *                          Supported methods are:<br>
	 *                          SSH_AUTH_METHOD_PASSWORD<br>
	 *                          SSH_AUTH_METHOD_PUBLICKEY<br>
	 *                          SSH_AUTH_METHOD_HOSTBASED<br>
	 *                          SSH_AUTH_METHOD_INTERACTIVE<br>
	 *                          SSH_AUTH_METHOD_GSSAPI_MIC<br>
	 * Original signature : <code>void ssh_set_auth_methods(ssh_session, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:142</i>
	 */
	void ssh_set_auth_methods(SshLibrary.ssh_session session, int auth_methods);
	/**
	 * @brief Reply with a standard reject message.<br>
	 * Use this function if you don't know what to respond or if you want to reject<br>
	 * a request.<br>
	 * @param[in] msg       The message to use for the reply.<br>
	 * @return              0 on success, -1 on error.<br>
	 * @see ssh_message_get()<br>
	 * Original signature : <code>int ssh_message_reply_default(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:152</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_reply_default(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_reply_default(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_reply_default(Pointer msg);
	/**
	 * @brief Reply with a standard reject message.<br>
	 * Use this function if you don't know what to respond or if you want to reject<br>
	 * a request.<br>
	 * @param[in] msg       The message to use for the reply.<br>
	 * @return              0 on success, -1 on error.<br>
	 * @see ssh_message_get()<br>
	 * Original signature : <code>int ssh_message_reply_default(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:152</i>
	 */
	int ssh_message_reply_default(SshLibrary.ssh_message msg);
	/**
	 * @brief Get the name of the authenticated user.<br>
	 * @param[in] msg       The message to get the username from.<br>
	 * @return              The username or NULL if an error occured.<br>
	 * @see ssh_message_get()<br>
	 * @see ssh_message_type()<br>
	 * Original signature : <code>char* ssh_message_auth_user(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:161</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_user(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_auth_user(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_auth_user(Pointer msg);
	/**
	 * @brief Get the name of the authenticated user.<br>
	 * @param[in] msg       The message to get the username from.<br>
	 * @return              The username or NULL if an error occured.<br>
	 * @see ssh_message_get()<br>
	 * @see ssh_message_type()<br>
	 * Original signature : <code>char* ssh_message_auth_user(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:161</i>
	 */
	String ssh_message_auth_user(SshLibrary.ssh_message msg);
	/**
	 * @brief Get the password of the authenticated user.<br>
	 * @param[in] msg       The message to get the password from.<br>
	 * @return              The username or NULL if an error occured.<br>
	 * @see ssh_message_get()<br>
	 * @see ssh_message_type()<br>
	 * Original signature : <code>char* ssh_message_auth_password(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:170</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_password(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_auth_password(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_auth_password(Pointer msg);
	/**
	 * @brief Get the password of the authenticated user.<br>
	 * @param[in] msg       The message to get the password from.<br>
	 * @return              The username or NULL if an error occured.<br>
	 * @see ssh_message_get()<br>
	 * @see ssh_message_type()<br>
	 * Original signature : <code>char* ssh_message_auth_password(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:170</i>
	 */
	String ssh_message_auth_password(SshLibrary.ssh_message msg);
	/**
	 * @brief Get the publickey of the authenticated user.<br>
	 * If you need the key for later user you should duplicate it.<br>
	 * @param[in] msg       The message to get the public key from.<br>
	 * @return              The public key or NULL.<br>
	 * @see ssh_key_dup()<br>
	 * @see ssh_key_cmp()<br>
	 * @see ssh_message_get()<br>
	 * @see ssh_message_type()<br>
	 * Original signature : <code>ssh_key ssh_message_auth_pubkey(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:182</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_pubkey(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_auth_pubkey(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_key ssh_message_auth_pubkey(Pointer msg);
	/**
	 * @brief Get the publickey of the authenticated user.<br>
	 * If you need the key for later user you should duplicate it.<br>
	 * @param[in] msg       The message to get the public key from.<br>
	 * @return              The public key or NULL.<br>
	 * @see ssh_key_dup()<br>
	 * @see ssh_key_cmp()<br>
	 * @see ssh_message_get()<br>
	 * @see ssh_message_type()<br>
	 * Original signature : <code>ssh_key ssh_message_auth_pubkey(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:182</i>
	 */
	SshLibrary.ssh_key ssh_message_auth_pubkey(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_auth_kbdint_is_response(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:184</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_kbdint_is_response(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_auth_kbdint_is_response(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_auth_kbdint_is_response(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_auth_kbdint_is_response(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:184</i>
	 */
	int ssh_message_auth_kbdint_is_response(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>ssh_publickey_state_e ssh_message_auth_publickey_state(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:186</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_publickey_state(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_auth_publickey_state(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_auth_publickey_state(Pointer msg);
	/**
	 * Original signature : <code>ssh_publickey_state_e ssh_message_auth_publickey_state(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:186</i>
	 */
	int ssh_message_auth_publickey_state(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_success(ssh_message, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:188</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_reply_success(ssh.SshLibrary.ssh_message, int)} and {@link #ssh_message_auth_reply_success(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_message_auth_reply_success(Pointer msg, int partial);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_success(ssh_message, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:188</i>
	 */
	int ssh_message_auth_reply_success(SshLibrary.ssh_message msg, int partial);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_pk_ok(ssh_message, ssh_string, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:190</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_reply_pk_ok(ssh.SshLibrary.ssh_message, ssh.SshLibrary.ssh_string, ssh.SshLibrary.ssh_string)} and {@link #ssh_message_auth_reply_pk_ok(com.sun.jna.Pointer, ssh.SshLibrary.ssh_string, ssh.SshLibrary.ssh_string)} instead
	 */
	@Deprecated 
	int ssh_message_auth_reply_pk_ok(Pointer msg, SshLibrary.ssh_string algo, SshLibrary.ssh_string pubkey);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_pk_ok(ssh_message, ssh_string, ssh_string)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:190</i>
	 */
	int ssh_message_auth_reply_pk_ok(SshLibrary.ssh_message msg, SshLibrary.ssh_string algo, SshLibrary.ssh_string pubkey);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_pk_ok_simple(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:192</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_reply_pk_ok_simple(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_auth_reply_pk_ok_simple(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_auth_reply_pk_ok_simple(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_auth_reply_pk_ok_simple(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:192</i>
	 */
	int ssh_message_auth_reply_pk_ok_simple(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_auth_set_methods(ssh_message, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:194</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_set_methods(ssh.SshLibrary.ssh_message, int)} and {@link #ssh_message_auth_set_methods(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_message_auth_set_methods(Pointer msg, int methods);
	/**
	 * Original signature : <code>int ssh_message_auth_set_methods(ssh_message, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:194</i>
	 */
	int ssh_message_auth_set_methods(SshLibrary.ssh_message msg, int methods);
	/**
	 * Original signature : <code>int ssh_message_auth_interactive_request(ssh_message, const char*, const char*, unsigned int, const char**, char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:196</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_auth_interactive_request(ssh.SshLibrary.ssh_message, java.lang.String, java.lang.String, int, java.lang.String[], java.nio.ByteBuffer)} and {@link #ssh_message_auth_interactive_request(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_auth_interactive_request(Pointer msg, Pointer name, Pointer instruction, int num_prompts, PointerByReference prompts, Pointer echo);
	/**
	 * Original signature : <code>int ssh_message_auth_interactive_request(ssh_message, const char*, const char*, unsigned int, const char**, char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:196</i>
	 */
	int ssh_message_auth_interactive_request(SshLibrary.ssh_message msg, String name, String instruction, int num_prompts, String prompts[], ByteBuffer echo);
	/**
	 * Original signature : <code>int ssh_message_service_reply_success(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:198</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_service_reply_success(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_service_reply_success(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_service_reply_success(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_service_reply_success(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:198</i>
	 */
	int ssh_message_service_reply_success(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_service_service(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:200</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_service_service(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_service_service(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_service_service(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_service_service(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:200</i>
	 */
	String ssh_message_service_service(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_global_request_reply_success(ssh_message, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:202</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_global_request_reply_success(ssh.SshLibrary.ssh_message, short)} and {@link #ssh_message_global_request_reply_success(com.sun.jna.Pointer, short)} instead
	 */
	@Deprecated 
	int ssh_message_global_request_reply_success(Pointer msg, short bound_port);
	/**
	 * Original signature : <code>int ssh_message_global_request_reply_success(ssh_message, uint16_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:202</i>
	 */
	int ssh_message_global_request_reply_success(SshLibrary.ssh_message msg, short bound_port);
	/**
	 * Original signature : <code>void ssh_set_message_callback(ssh_session, ssh_set_message_callback_ssh_bind_message_callback_callback*, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:204</i><br>
	 * @deprecated use the safer methods {@link #ssh_set_message_callback(ssh.SshLibrary.ssh_session, ssh.SshLibrary.ssh_set_message_callback_ssh_bind_message_callback_callback, com.sun.jna.Pointer)} and {@link #ssh_set_message_callback(com.sun.jna.Pointer, ssh.SshLibrary.ssh_set_message_callback_ssh_bind_message_callback_callback, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void ssh_set_message_callback(Pointer session, SshLibrary.ssh_set_message_callback_ssh_bind_message_callback_callback ssh_bind_message_callback, Pointer data);
	/**
	 * Original signature : <code>void ssh_set_message_callback(ssh_session, ssh_set_message_callback_ssh_bind_message_callback_callback*, void*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:204</i>
	 */
	void ssh_set_message_callback(SshLibrary.ssh_session session, SshLibrary.ssh_set_message_callback_ssh_bind_message_callback_callback ssh_bind_message_callback, Pointer data);
	/**
	 * Original signature : <code>int ssh_execute_message_callbacks(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:206</i><br>
	 * @deprecated use the safer methods {@link #ssh_execute_message_callbacks(ssh.SshLibrary.ssh_session)} and {@link #ssh_execute_message_callbacks(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_execute_message_callbacks(Pointer session);
	/**
	 * Original signature : <code>int ssh_execute_message_callbacks(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:206</i>
	 */
	int ssh_execute_message_callbacks(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_open_originator(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:208</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_open_originator(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_open_originator(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_open_originator(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_open_originator(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:208</i>
	 */
	String ssh_message_channel_request_open_originator(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_open_originator_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:210</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_open_originator_port(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_open_originator_port(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_open_originator_port(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_open_originator_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:210</i>
	 */
	int ssh_message_channel_request_open_originator_port(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_open_destination(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:212</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_open_destination(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_open_destination(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_open_destination(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_open_destination(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:212</i>
	 */
	String ssh_message_channel_request_open_destination(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_open_destination_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:214</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_open_destination_port(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_open_destination_port(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_open_destination_port(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_open_destination_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:214</i>
	 */
	int ssh_message_channel_request_open_destination_port(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>ssh_channel ssh_message_channel_request_channel(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:216</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_channel(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_channel(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	SshLibrary.ssh_channel ssh_message_channel_request_channel(Pointer msg);
	/**
	 * Original signature : <code>ssh_channel ssh_message_channel_request_channel(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:216</i>
	 */
	SshLibrary.ssh_channel ssh_message_channel_request_channel(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_pty_term(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:218</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_pty_term(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_pty_term(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_pty_term(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_pty_term(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:218</i>
	 */
	String ssh_message_channel_request_pty_term(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_width(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:220</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_pty_width(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_pty_width(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_pty_width(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_width(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:220</i>
	 */
	int ssh_message_channel_request_pty_width(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_height(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:222</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_pty_height(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_pty_height(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_pty_height(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_height(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:222</i>
	 */
	int ssh_message_channel_request_pty_height(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_pxwidth(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:224</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_pty_pxwidth(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_pty_pxwidth(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_pty_pxwidth(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_pxwidth(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:224</i>
	 */
	int ssh_message_channel_request_pty_pxwidth(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_pxheight(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:226</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_pty_pxheight(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_pty_pxheight(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_pty_pxheight(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_pty_pxheight(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:226</i>
	 */
	int ssh_message_channel_request_pty_pxheight(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_env_name(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:228</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_env_name(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_env_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_env_name(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_env_name(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:228</i>
	 */
	String ssh_message_channel_request_env_name(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_env_value(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:230</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_env_value(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_env_value(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_env_value(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_env_value(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:230</i>
	 */
	String ssh_message_channel_request_env_value(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_command(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:232</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_command(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_command(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_command(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_command(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:232</i>
	 */
	String ssh_message_channel_request_command(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_subsystem(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:234</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_subsystem(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_subsystem(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_subsystem(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_subsystem(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:234</i>
	 */
	String ssh_message_channel_request_subsystem(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_x11_single_connection(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:236</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_x11_single_connection(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_x11_single_connection(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_x11_single_connection(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_x11_single_connection(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:236</i>
	 */
	int ssh_message_channel_request_x11_single_connection(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_x11_auth_protocol(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:238</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_x11_auth_protocol(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_x11_auth_protocol(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_x11_auth_protocol(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_x11_auth_protocol(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:238</i>
	 */
	String ssh_message_channel_request_x11_auth_protocol(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_x11_auth_cookie(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:240</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_x11_auth_cookie(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_x11_auth_cookie(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_channel_request_x11_auth_cookie(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_channel_request_x11_auth_cookie(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:240</i>
	 */
	String ssh_message_channel_request_x11_auth_cookie(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_x11_screen_number(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:242</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_channel_request_x11_screen_number(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_channel_request_x11_screen_number(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_channel_request_x11_screen_number(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_channel_request_x11_screen_number(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:242</i>
	 */
	int ssh_message_channel_request_x11_screen_number(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>char* ssh_message_global_request_address(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:244</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_global_request_address(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_global_request_address(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	String ssh_message_global_request_address(Pointer msg);
	/**
	 * Original signature : <code>char* ssh_message_global_request_address(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:244</i>
	 */
	String ssh_message_global_request_address(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_message_global_request_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:246</i><br>
	 * @deprecated use the safer methods {@link #ssh_message_global_request_port(ssh.SshLibrary.ssh_message)} and {@link #ssh_message_global_request_port(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_message_global_request_port(Pointer msg);
	/**
	 * Original signature : <code>int ssh_message_global_request_port(ssh_message)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:246</i>
	 */
	int ssh_message_global_request_port(SshLibrary.ssh_message msg);
	/**
	 * Original signature : <code>int ssh_channel_open_reverse_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:248</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_open_reverse_forward(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, int)} and {@link #ssh_channel_open_reverse_forward(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_open_reverse_forward(Pointer channel, Pointer remotehost, int remoteport, Pointer sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_open_reverse_forward(ssh_channel, const char*, int, const char*, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:248</i>
	 */
	int ssh_channel_open_reverse_forward(SshLibrary.ssh_channel channel, String remotehost, int remoteport, String sourcehost, int localport);
	/**
	 * Original signature : <code>int ssh_channel_request_send_exit_status(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:252</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_send_exit_status(ssh.SshLibrary.ssh_channel, int)} and {@link #ssh_channel_request_send_exit_status(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int ssh_channel_request_send_exit_status(Pointer channel, int exit_status);
	/**
	 * Original signature : <code>int ssh_channel_request_send_exit_status(ssh_channel, int)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:252</i>
	 */
	int ssh_channel_request_send_exit_status(SshLibrary.ssh_channel channel, int exit_status);
	/**
	 * Original signature : <code>int ssh_channel_request_send_exit_signal(ssh_channel, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:254</i><br>
	 * @deprecated use the safer methods {@link #ssh_channel_request_send_exit_signal(ssh.SshLibrary.ssh_channel, java.lang.String, int, java.lang.String, java.lang.String)} and {@link #ssh_channel_request_send_exit_signal(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_channel_request_send_exit_signal(Pointer channel, Pointer signum, int core, Pointer errmsg, Pointer lang);
	/**
	 * Original signature : <code>int ssh_channel_request_send_exit_signal(ssh_channel, const char*, int, const char*, const char*)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:254</i>
	 */
	int ssh_channel_request_send_exit_signal(SshLibrary.ssh_channel channel, String signum, int core, String errmsg, String lang);
	/**
	 * Original signature : <code>int ssh_send_keepalive(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:256</i><br>
	 * @deprecated use the safer methods {@link #ssh_send_keepalive(ssh.SshLibrary.ssh_session)} and {@link #ssh_send_keepalive(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_send_keepalive(Pointer session);
	/**
	 * Original signature : <code>int ssh_send_keepalive(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:256</i>
	 */
	int ssh_send_keepalive(SshLibrary.ssh_session session);
	/**
	 * deprecated functions<br>
	 * Original signature : <code>int ssh_accept(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:261</i><br>
	 * @deprecated use the safer methods {@link #ssh_accept(ssh.SshLibrary.ssh_session)} and {@link #ssh_accept(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int ssh_accept(Pointer session);
	/**
	 * deprecated functions<br>
	 * Original signature : <code>int ssh_accept(ssh_session)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:261</i>
	 */
	int ssh_accept(SshLibrary.ssh_session session);
	/**
	 * Original signature : <code>int channel_write_stderr(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:263</i><br>
	 * @deprecated use the safer methods {@link #channel_write_stderr(ssh.SshLibrary.ssh_channel, com.sun.jna.Pointer, int)} and {@link #channel_write_stderr(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int channel_write_stderr(Pointer channel, Pointer data, int len);
	/**
	 * Original signature : <code>int channel_write_stderr(ssh_channel, const void*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/libssh/server.h:263</i>
	 */
	int channel_write_stderr(SshLibrary.ssh_channel channel, Pointer data, int len);
	public static class ssh_key_struct extends PointerType {
		public ssh_key_struct(Pointer address) {
			super(address);
		}
		public ssh_key_struct() {
			super();
		}
	};
	public static class ssh_bind extends PointerType {
		public ssh_bind(Pointer address) {
			super(address);
		}
		public ssh_bind() {
			super();
		}
	};
	public static class ssh_gssapi_select_oid_callback extends PointerType {
		public ssh_gssapi_select_oid_callback(Pointer address) {
			super(address);
		}
		public ssh_gssapi_select_oid_callback() {
			super();
		}
	};
	public static class ssh_event extends PointerType {
		public ssh_event(Pointer address) {
			super(address);
		}
		public ssh_event() {
			super();
		}
	};
	public static class ssh_channel extends PointerType {
		public ssh_channel(Pointer address) {
			super(address);
		}
		public ssh_channel() {
			super();
		}
	};
	public static class ssh_private_key extends PointerType {
		public ssh_private_key(Pointer address) {
			super(address);
		}
		public ssh_private_key() {
			super();
		}
	};
	public static class ssh_public_key extends PointerType {
		public ssh_public_key(Pointer address) {
			super(address);
		}
		public ssh_public_key() {
			super();
		}
	};
	public static class ssh_message extends PointerType {
		public ssh_message(Pointer address) {
			super(address);
		}
		public ssh_message() {
			super();
		}
	};
	public static class ssh_buffer extends PointerType {
		public ssh_buffer(Pointer address) {
			super(address);
		}
		public ssh_buffer() {
			super();
		}
	};
	public static class socket_t extends PointerType {
		public socket_t(Pointer address) {
			super(address);
		}
		public socket_t() {
			super();
		}
	};
	public static class ssh_session extends PointerType {
		public ssh_session(Pointer address) {
			super(address);
		}
		public ssh_session() {
			super();
		}
	};
	public static class ssh_key extends PointerType {
		public ssh_key(Pointer address) {
			super(address);
		}
		public ssh_key() {
			super();
		}
	};
	public static class ssh_scp extends PointerType {
		public ssh_scp(Pointer address) {
			super(address);
		}
		public ssh_scp() {
			super();
		}
	};
	public static class sftp_ext extends PointerType {
		public sftp_ext(Pointer address) {
			super(address);
		}
		public sftp_ext() {
			super();
		}
	};
	public static class ssh_connector extends PointerType {
		public ssh_connector(Pointer address) {
			super(address);
		}
		public ssh_connector() {
			super();
		}
	};
	public static class timeval extends PointerType {
		public timeval(Pointer address) {
			super(address);
		}
		public timeval() {
			super();
		}
	};
	public static class ssh_pcap_file extends PointerType {
		public ssh_pcap_file(Pointer address) {
			super(address);
		}
		public ssh_pcap_file() {
			super();
		}
	};
}
