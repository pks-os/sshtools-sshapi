package ssh;
import java.util.Arrays;
import java.util.List;

import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Pointer;
import ssh.SshLibrary.ssh_thread_callback;
import ssh.SshLibrary.ssh_thread_id_callback;
/**
 * <i>native declaration : /usr/include/libssh/callbacks.h:417</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ssh_threads_callbacks_struct extends Structure<ssh_threads_callbacks_struct, ssh_threads_callbacks_struct.ByValue, ssh_threads_callbacks_struct.ByReference > {
	/// C type : const char*
	public Pointer type;
	/// C type : ssh_thread_callback
	public ssh_thread_callback mutex_init;
	/// C type : ssh_thread_callback
	public ssh_thread_callback mutex_destroy;
	/// C type : ssh_thread_callback
	public ssh_thread_callback mutex_lock;
	/// C type : ssh_thread_callback
	public ssh_thread_callback mutex_unlock;
	/// C type : ssh_thread_id_callback
	public ssh_thread_id_callback thread_id;
	public ssh_threads_callbacks_struct() {
		super();
	}

	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList(new java.lang.String[]{"type", "mutex_init", "mutex_destroy", "mutex_lock", "mutex_unlock", "thread_id"});
	}
	/**
	 * @param type C type : const char*<br>
	 * @param mutex_init C type : ssh_thread_callback<br>
	 * @param mutex_destroy C type : ssh_thread_callback<br>
	 * @param mutex_lock C type : ssh_thread_callback<br>
	 * @param mutex_unlock C type : ssh_thread_callback<br>
	 * @param thread_id C type : ssh_thread_id_callback
	 */
	public ssh_threads_callbacks_struct(Pointer type, ssh_thread_callback mutex_init, ssh_thread_callback mutex_destroy, ssh_thread_callback mutex_lock, ssh_thread_callback mutex_unlock, ssh_thread_id_callback thread_id) {
		super();
		this.type = type;
		this.mutex_init = mutex_init;
		this.mutex_destroy = mutex_destroy;
		this.mutex_lock = mutex_lock;
		this.mutex_unlock = mutex_unlock;
		this.thread_id = thread_id;
	}
	@Override
	protected ByReference newByReference() { return new ByReference(); }
	@Override
	protected ByValue newByValue() { return new ByValue(); }
	@Override
	protected ssh_threads_callbacks_struct newInstance() { return new ssh_threads_callbacks_struct(); }
	public static ssh_threads_callbacks_struct[] newArray(int arrayLength) {
		return Structure.newArray(ssh_threads_callbacks_struct.class, arrayLength);
	}
	public static class ByReference extends ssh_threads_callbacks_struct implements Structure.ByReference {
		
	};
	public static class ByValue extends ssh_threads_callbacks_struct implements Structure.ByValue {
		
	};
}
