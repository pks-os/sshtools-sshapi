/**
 * Copyright (c) 2020 The JavaSSH Project
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
package ssh;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import ssh.SshLibrary.ssh_buffer;
import ssh.SshLibrary.ssh_string;
/**
 * <i>native declaration : /usr/include/libssh/sftp.h:47</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sftp_dir_struct extends Structure {
	/** C type : sftp_session */
	public ssh.sftp_session_struct.ByReference sftp;
	/** C type : char* */
	public Pointer name;
	/**
	 * handle to directory<br>
	 * C type : ssh_string
	 */
	public ssh_string handle;
	/**
	 * contains raw attributes from server which haven't been parsed<br>
	 * C type : ssh_buffer
	 */
	public ssh_buffer buffer;
	/** counts the number of following attributes structures into buffer */
	public int count;
	/** end of directory listing */
	public int eof;
	public sftp_dir_struct() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("sftp", "name", "handle", "buffer", "count", "eof");
	}
	/**
	 * @param sftp C type : sftp_session<br>
	 * @param name C type : char*<br>
	 * @param handle handle to directory<br>
	 * C type : ssh_string<br>
	 * @param buffer contains raw attributes from server which haven't been parsed<br>
	 * C type : ssh_buffer<br>
	 * @param count counts the number of following attributes structures into buffer<br>
	 * @param eof end of directory listing
	 */
	public sftp_dir_struct(ssh.sftp_session_struct.ByReference sftp, Pointer name, ssh_string handle, ssh_buffer buffer, int count, int eof) {
		super();
		this.sftp = sftp;
		this.name = name;
		this.handle = handle;
		this.buffer = buffer;
		this.count = count;
		this.eof = eof;
	}
	public sftp_dir_struct(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sftp_dir_struct implements Structure.ByReference {
		
	};
	public static class ByValue extends sftp_dir_struct implements Structure.ByValue {
		
	};
}
