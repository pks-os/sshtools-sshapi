package ssh;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import ssh.SshLibrary.ssh_auth_callback;
import ssh.SshLibrary.ssh_global_request_callback;
import ssh.SshLibrary.ssh_log_callback;
/**
 * The structure to replace libssh functions with appropriate callbacks.<br>
 * <i>native declaration : /usr/include/libssh/callbacks.h:115</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ssh_callbacks_struct extends Structure<ssh_callbacks_struct, ssh_callbacks_struct.ByValue, ssh_callbacks_struct.ByReference > {
	/// DON'T SET THIS use ssh_callbacks_init() instead.
	public NativeSize size;
	/**
	 * User-provided data. User is free to set anything he wants here<br>
	 * C type : void*
	 */
	public Pointer userdata;
	/**
	 * This functions will be called if e.g. a keyphrase is needed.<br>
	 * C type : ssh_auth_callback
	 */
	public ssh_auth_callback auth_function;
	/**
	 * This function will be called each time a loggable event happens.<br>
	 * C type : ssh_log_callback
	 */
	public ssh_log_callback log_function;
	/**
	 * This function gets called during connection time to indicate the<br>
	 * percentage of connection steps completed.<br>
	 * C type : connect_status_function_callback
	 */
	public ssh_callbacks_struct.connect_status_function_callback connect_status_function;
	/**
	 * This function will be called each time a global request is received.<br>
	 * C type : ssh_global_request_callback
	 */
	public ssh_global_request_callback global_request_function;
	/// <i>native declaration : /usr/include/libssh/callbacks.h</i>
	public interface connect_status_function_callback extends Callback {
		void apply(Pointer userdata, float status);
	};
	public ssh_callbacks_struct() {
		super();
		initFieldOrder();
	}
	protected void initFieldOrder() {
		setFieldOrder(new java.lang.String[]{"size", "userdata", "auth_function", "log_function", "connect_status_function", "global_request_function"});
	}
	/**
	 * @param size DON'T SET THIS use ssh_callbacks_init() instead.<br>
	 * @param userdata User-provided data. User is free to set anything he wants here<br>
	 * C type : void*<br>
	 * @param auth_function This functions will be called if e.g. a keyphrase is needed.<br>
	 * C type : ssh_auth_callback<br>
	 * @param log_function This function will be called each time a loggable event happens.<br>
	 * C type : ssh_log_callback<br>
	 * @param connect_status_function This function gets called during connection time to indicate the<br>
	 * percentage of connection steps completed.<br>
	 * C type : connect_status_function_callback<br>
	 * @param global_request_function This function will be called each time a global request is received.<br>
	 * C type : ssh_global_request_callback
	 */
	public ssh_callbacks_struct(NativeSize size, Pointer userdata, ssh_auth_callback auth_function, ssh_log_callback log_function, ssh_callbacks_struct.connect_status_function_callback connect_status_function, ssh_global_request_callback global_request_function) {
		super();
		this.size = size;
		this.userdata = userdata;
		this.auth_function = auth_function;
		this.log_function = log_function;
		this.connect_status_function = connect_status_function;
		this.global_request_function = global_request_function;
		initFieldOrder();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected ssh_callbacks_struct newInstance() { return new ssh_callbacks_struct(); }
	public static ssh_callbacks_struct[] newArray(int arrayLength) {
		return Structure.newArray(ssh_callbacks_struct.class, arrayLength);
	}
	public static class ByReference extends ssh_callbacks_struct implements Structure.ByReference {
		
	};
	public static class ByValue extends ssh_callbacks_struct implements Structure.ByValue {
		
	};
}
