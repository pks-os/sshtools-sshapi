/**
 * Copyright (c) 2020 The JavaSSH Project
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
package ssh;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import ssh.SshLibrary.ssh_buffer;
import ssh.SshLibrary.ssh_string;
/**
 * this is a bunch of all data that could be into a message<br>
 * <i>native declaration : /usr/include/libssh/sftp.h:70</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sftp_client_message_struct extends Structure {
	/** C type : sftp_session */
	public ssh.sftp_session_struct.ByReference sftp;
	public byte type;
	public int id;
	/**
	 * can be "path"<br>
	 * C type : char*
	 */
	public Pointer filename;
	public int flags;
	/** C type : sftp_attributes */
	public ssh.sftp_attributes_struct.ByReference attr;
	/** C type : ssh_string */
	public ssh_string handle;
	public long offset;
	public int len;
	public int attr_num;
	/**
	 * used by sftp_reply_attrs<br>
	 * C type : ssh_buffer
	 */
	public ssh_buffer attrbuf;
	/**
	 * can be newpath of rename()<br>
	 * C type : ssh_string
	 */
	public ssh_string data;
	/**
	 * complete message in case of retransmission<br>
	 * C type : ssh_buffer
	 */
	public ssh_buffer complete_message;
	/**
	 * cstring version of data<br>
	 * C type : char*
	 */
	public Pointer str_data;
	public sftp_client_message_struct() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("sftp", "type", "id", "filename", "flags", "attr", "handle", "offset", "len", "attr_num", "attrbuf", "data", "complete_message", "str_data");
	}
	public sftp_client_message_struct(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sftp_client_message_struct implements Structure.ByReference {
		
	};
	public static class ByValue extends sftp_client_message_struct implements Structure.ByValue {
		
	};
}
